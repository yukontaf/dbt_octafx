{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.0", "generated_at": "2024-05-31T19:25:23.507870Z", "invocation_id": "7bfdcfc9-5f5d-414d-96a7-8af9e6760241", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.195803Z", "completed_at": "2024-05-31T19:25:19.208617Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.208994Z", "completed_at": "2024-05-31T19:25:19.209004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015306949615478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.appsflyer_uninstall_events_report", "compiled": true, "compiled_code": "with source as (\n\n    select * from `analytics-147612`.`wh_raw`.`appsflyer_uninstall_events_report`\n\n),\n\nrenamed as (\n\n    select\n        install_time,\n        event_time,\n        event_value,\n        campaign,\n        campaign_id,\n        region,\n        country_code,\n        appsflyer_id,\n        customer_user_id,\n        platform,\n        os_version,\n        app_version,\n        sdk_version,\n        app_id,\n        app_name,\n        bundle_id,\n        user_agent,\n        google_play_referrer,\n        google_play_click_time,\n        google_play_install_begin_time\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`analytics-147612`.`dev_gsokolov`.`appsflyer_uninstall_events_report`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.201386Z", "completed_at": "2024-05-31T19:25:19.209510Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.210403Z", "completed_at": "2024-05-31T19:25:19.210407Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016067028045654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.campaign", "compiled": true, "compiled_code": "select\n    internal_customer_id,\n    type,\n    ingest_timestamp,\n    timestamp,\n    properties,\n    properties.__platform__a8ad3f04,\n    properties.__versioncode__f4faa1c0,\n    properties._platform,\n    properties._versioncode__2b8a87a0,\n    properties.accountnumber__0be7be93,\n    properties.action_id,\n    properties.action_name,\n    properties.action_type,\n    properties.action_url,\n    properties.app_version,\n    properties.attempts,\n    properties.body,\n    properties.body2,\n    properties.bot,\n    properties.browser,\n    properties.c_language_code,\n    properties.c_subject,\n    properties.c_subject_rendered,\n    properties.c_webinar_event_slug,\n    properties.c_webinar_tag,\n    properties.campaign_id,\n    properties.campaign_name,\n    properties.campaign_policy,\n    properties.campaign_trigger,\n    properties.channel_id,\n    properties.city,\n    properties.clickaction__ac7a4e64,\n    properties.code,\n    properties.comment,\n    properties.consent_category,\n    properties.country,\n    properties.cta,\n    properties.cumulative,\n    properties.ddd,\n    properties.dealid__5687d774,\n    properties.delta_time,\n    properties.deltatime__359510ad,\n    properties.device,\n    properties.device_model,\n    properties.device_type,\n    properties.error,\n    properties.event_id,\n    properties.event_type,\n    properties.google_push_notification_id,\n    properties.id,\n    properties.integration_id,\n    properties.integration_name,\n    properties.iosversionsode__d77c073d,\n    properties.ip,\n    properties.is_web,\n    properties.language,\n    properties.latitude,\n    properties.location,\n    properties.longitude,\n    properties.marketinsighttype__08774bdb,\n    properties.message,\n    properties.message_id,\n    properties.message_type,\n    properties.new_choice,\n    properties.os,\n    properties.os_name,\n    properties.os_version,\n    properties.platform,\n    properties.platformslug__10ba264c,\n    properties.positionid__7c012ec8,\n    properties.post_slug,\n    properties.postid__62fcd071,\n    properties.publicationurl__233f7608,\n    properties.recipient,\n    properties.redirect_to_screen,\n    properties.sdk,\n    properties.sdk_version,\n    properties.sender,\n    properties.sending_ip,\n    properties.sent_timestamp,\n    properties.slug,\n    properties.state,\n    properties.status,\n    properties.status_code,\n    properties.storyly_group_id,\n    properties.subject,\n    properties.symbol,\n    properties.template_id,\n    properties.template_name,\n    properties.thisisadefaultintproperty__1f9e5107,\n    properties.thisisadefaultstringproperty__c88137ea,\n    properties.title,\n    properties.tradingtype__8a13dd4c,\n    properties.type,\n    properties.url,\n    properties.user_agent__a510e506,\n    properties.utm_campaign,\n    properties.utm_content,\n    properties.utm_medium,\n    properties.utm_source,\n    properties.valid_until,\n    properties.variant,\n    properties.variant_id,\n    properties.xpath,\n    raw_properties,\n    raw_properties.__platform__a8ad3f04,\n    raw_properties.__versioncode__f4faa1c0,\n    raw_properties._platform,\n    raw_properties._versioncode__2b8a87a0,\n    raw_properties.accountnumber__0be7be93,\n    raw_properties.action_id,\n    raw_properties.action_name,\n    raw_properties.action_type,\n    raw_properties.action_url,\n    raw_properties.app_version,\n    raw_properties.attempts,\n    raw_properties.body,\n    raw_properties.body2,\n    raw_properties.bot,\n    raw_properties.browser,\n    raw_properties.c_language_code,\n    raw_properties.c_subject,\n    raw_properties.c_subject_rendered,\n    raw_properties.c_webinar_event_slug,\n    raw_properties.c_webinar_tag,\n    raw_properties.campaign_id,\n    raw_properties.campaign_name,\n    raw_properties.campaign_policy,\n    raw_properties.campaign_trigger,\n    raw_properties.channel_id,\n    raw_properties.city,\n    raw_properties.clickaction__ac7a4e64,\n    raw_properties.code,\n    raw_properties.comment,\n    raw_properties.consent_category,\n    raw_properties.country,\n    raw_properties.cta,\n    raw_properties.cumulative,\n    raw_properties.ddd,\n    raw_properties.dealid__5687d774,\n    raw_properties.delta_time,\n    raw_properties.deltatime__359510ad,\n    raw_properties.device,\n    raw_properties.device_model,\n    raw_properties.device_type,\n    raw_properties.error,\n    raw_properties.event_id,\n    raw_properties.event_type,\n    raw_properties.google_push_notification_id,\n    raw_properties.id,\n    raw_properties.integration_id,\n    raw_properties.integration_name,\n    raw_properties.iosversionsode__d77c073d,\n    raw_properties.ip,\n    raw_properties.is_web,\n    raw_properties.language,\n    raw_properties.latitude,\n    raw_properties.location,\n    raw_properties.longitude,\n    raw_properties.marketinsighttype__08774bdb,\n    raw_properties.message,\n    raw_properties.message_id,\n    raw_properties.message_type,\n    raw_properties.new_choice,\n    raw_properties.os,\n    raw_properties.os_name,\n    raw_properties.os_version,\n    raw_properties.platform,\n    raw_properties.platformslug__10ba264c,\n    raw_properties.positionid__7c012ec8,\n    raw_properties.post_slug,\n    raw_properties.postid__62fcd071,\n    raw_properties.publicationurl__233f7608,\n    raw_properties.recipient,\n    raw_properties.redirect_to_screen,\n    raw_properties.sdk,\n    raw_properties.sdk_version,\n    raw_properties.sender,\n    raw_properties.sending_ip,\n    raw_properties.sent_timestamp,\n    raw_properties.slug,\n    raw_properties.state,\n    raw_properties.status,\n    raw_properties.status_code,\n    raw_properties.storyly_group_id,\n    raw_properties.subject,\n    raw_properties.symbol,\n    raw_properties.template_id,\n    raw_properties.template_name,\n    raw_properties.thisisadefaultintproperty__1f9e5107,\n    raw_properties.thisisadefaultstringproperty__c88137ea,\n    raw_properties.title,\n    raw_properties.tradingtype__8a13dd4c,\n    raw_properties.type,\n    raw_properties.url,\n    raw_properties.user_agent__a510e506,\n    raw_properties.utm_campaign,\n    raw_properties.utm_content,\n    raw_properties.utm_medium,\n    raw_properties.utm_source,\n    raw_properties.valid_until,\n    raw_properties.variant,\n    raw_properties.variant_id,\n    raw_properties.xpath,\n    user_id,\n    campaign_id,\n    action_id\nfrom `analytics-147612`.`bloomreach_raw`.`campaign`", "relation_name": "`analytics-147612`.`dev_gsokolov`.`campaign`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.203863Z", "completed_at": "2024-05-31T19:25:19.210008Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.211146Z", "completed_at": "2024-05-31T19:25:19.211150Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01652383804321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.contact_policy_segment", "compiled": true, "compiled_code": "\n\nwith\n    user_last_deal as (\n        select user_id, max(close_time_dt) as last_deal_time\n        from `analytics-147612`.`wh_raw`.`trading_real_raw` as tr\n        group by user_id\n    ),\n\n    user_segment as (\n        select\n            cast(c.user_id as int) as user_id,\n            max(coalesce(cp.raw_properties.google_push_notification_id is not null, false)) as has_token,\n            max(coalesce(cc.properties.action = 'accept', false)) as has_consent\n        from `analytics-147612`.`bloomreach_raw`.`campaign` as c\n        left join\n            `analytics-147612`.`bloomreach_raw`.`customers_properties` as cp\n            on c.internal_customer_id = cp.internal_id\n        left join\n            `analytics-147612`.`bloomreach_raw`.`consent` as cc\n            on c.internal_customer_id = cc.internal_customer_id\n        where\n            c.internal_customer_id is not null\n            and c.user_id is not null\n        group by c.user_id\n    )\n    \n\nselect\n    us.user_id,\n    us.has_token,\n    us.has_consent\nfrom user_segment as us\ninner join user_last_deal as uld on us.user_id = uld.user_id\nwhere\n    (us.has_token or us.has_consent)\n    and uld.last_deal_time >= timestamp_sub(current_timestamp(), interval 45 day)", "relation_name": "`analytics-147612`.`dev_gsokolov`.`contact_policy_segment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.206568Z", "completed_at": "2024-05-31T19:25:19.210194Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.211601Z", "completed_at": "2024-05-31T19:25:19.211605Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016492128372192383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.customers_properties", "compiled": true, "compiled_code": "with\n    source as (select * from `analytics-147612`.`bloomreach_raw`.`customers_properties`),\n\n    renamed as (select internal_id, properties, raw_properties from source)\n\nselect *\nfrom renamed", "relation_name": "`analytics-147612`.`dev_gsokolov`.`customers_properties`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.213249Z", "completed_at": "2024-05-31T19:25:19.218683Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.223941Z", "completed_at": "2024-05-31T19:25:19.223948Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013161897659301758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.deals_activity", "compiled": true, "compiled_code": "\n\nwith\n    user_trading_activity as (\n        select\n            user_id,\n            count(operation_id) as number_of_trades,\n            sum(volume) as total_volume,\n            sum(profit) as total_profit,\n            avg(date_diff(close_time_dt, open_time_dt, day)) as avg_trade_duration_days\n        from `analytics-147612`.`wh_raw`.`trading_real_raw`\n        group by user_id\n    ),\n\n    user_communication_quality as (\n        select\n            user_id,\n            count(action_id) as total_communications,\n            sum(case when action_type = 'open' then 1 else 0 end) as email_opens,\n            sum(case when action_type = 'click' then 1 else 0 end) as link_clicks,\n            -- AVG(delta_time) AS avg_response_time,\n            count(\n                case\n                    when action_name in ('webinar_attend', 'link_click')\n                    then 1\n                    else null\n                end\n            ) as engagements\n        from `analytics-147612`.`bloomreach_raw`.`campaign`\n        where extract(year from timestamp) = extract(year from current_date())\n        group by user_id\n    )\n\nselect\n    t.user_id,\n    t.number_of_trades,\n    t.total_volume,\n    t.total_profit,\n    t.avg_trade_duration_days,\n    c.total_communications,\n    c.email_opens,\n    c.link_clicks,\n    -- c.avg_response_time,\n    c.engagements\nfrom user_trading_activity as t\njoin user_communication_quality as c on t.user_id = c.user_id", "relation_name": "`analytics-147612`.`dev_gsokolov`.`deals_activity`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.216777Z", "completed_at": "2024-05-31T19:25:19.224593Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.225604Z", "completed_at": "2024-05-31T19:25:19.225608Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012663125991821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.deposits_enhanced", "compiled": true, "compiled_code": "with\n    source as (select * from `analytics-147612`.`wh_raw`.`deposits_enhanced`),\n\n    renamed as (\n\n        select\n            user_id,\n            deposit_id,\n            deposit_type,\n            local_id,\n            mtaccount_id,\n            billing_account_id,\n            account,\n            amount,\n            amount_usd,\n            created,\n            response_created,\n            registered,\n            time_since_registration,\n            time_since_account_opening,\n            from_account,\n            from_paysystem_id,\n            referrer_mtaccount_id,\n            currency,\n            credited_amount,\n            credited_amount_currency,\n            bonus_id,\n            bonus_type,\n            bonus_status,\n            bonus_amount,\n            bonus_currency,\n            bonus_size,\n            country,\n            country_code,\n            platform,\n            leverage,\n            account_type,\n            source,\n            mobile_app,\n            payment_transaction_id,\n            created_dt,\n            response_created_dt,\n            id,\n            deposit_bracket,\n            deposit_number,\n            time_since_last_deposit\n\n        from source\n\n    )\n\nselect *\nfrom renamed\nwhere extract(year from created_dt) = extract(year from current_date())", "relation_name": "`analytics-147612`.`dev_gsokolov`.`deposits_enhanced`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.218951Z", "completed_at": "2024-05-31T19:25:19.225219Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.226491Z", "completed_at": "2024-05-31T19:25:19.226496Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011039018630981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.feed_app_reading_base", "compiled": true, "compiled_code": "with\n    source as (\n\n        select * from `analytics-147612`.`amplitude`.`events_octa_raw_app_feed_reading`\n\n    ),\n\n    renamed as (\n\n        select\n            event_id,\n            user_id,\n            device_id,\n            event_type,\n            time,\n            app_version_f,\n            app,\n            app_version_ep,\n            platform,\n            os_version,\n            device_brand,\n            device_manufacturer,\n            device_model,\n            carrier,\n            language,\n            ip,\n            adid,\n            day_of_week,\n            post_slug,\n            value,\n            channel_id,\n            symbol,\n            title,\n            post_type,\n            pattern_slugs,\n            is_subscribed,\n            num_of_subscriptions,\n            subscriptions,\n            session_starting_channel,\n            visit_source,\n            source_post_id\n\n        from source\n\n    )\n\nselect *\nfrom renamed\nwhere extract(year from time) = extract(year from current_date)", "relation_name": "`analytics-147612`.`dev_gsokolov`.`feed_app_reading_base`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.222120Z", "completed_at": "2024-05-31T19:25:19.225398Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.226991Z", "completed_at": "2024-05-31T19:25:19.226996Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011252880096435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.feed_web_reading_base", "compiled": true, "compiled_code": "with\n    source as (\n\n        select * from `analytics-147612`.`amplitude`.`events_octa_raw_web_feed_reading`\n\n    ),\n\n    renamed as (\n\n        select\n            user_id,\n            time,\n            event_type,\n            device_id,\n            app,\n            platform,\n            os_name,\n            os_version,\n            browser,\n            browser_version,\n            ip,\n            day_of_week,\n            post_slug,\n            value,\n            channel_id,\n            symbol,\n            title,\n            post_type,\n            pattern_slugs,\n            is_subscribed,\n            num_of_subscriptions,\n            subscriptions,\n            session_starting_channel\n\n        from source\n\n    )\n\nselect *\nfrom renamed\nwhere extract(year from time) = extract(year from current_date)", "relation_name": "`analytics-147612`.`dev_gsokolov`.`feed_web_reading_base`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.228796Z", "completed_at": "2024-05-31T19:25:19.233068Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.245479Z", "completed_at": "2024-05-31T19:25:19.245484Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01952195167541504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.filled_personal_info", "compiled": true, "compiled_code": "with\n    source as (\n\n        select * from `analytics-147612`.`amplitude`.`events_octa_raw_filled_personal_info`\n\n    ),\n\n    renamed as (\n\n        select\n            event_type,\n            event_id,\n            device_id,\n            timestamp,\n            user_id,\n            appsflyer_id,\n            client_id,\n            app,\n            app_version,\n            os_version,\n            os_name,\n            platform,\n            device_type,\n            device_brand,\n            device_manufacturer,\n            device_model,\n            browser,\n            browser_version,\n            carrier,\n            idfa,\n            idfv,\n            adid\n\n        from source\n\n    )\n\nselect *\nfrom renamed", "relation_name": "`analytics-147612`.`dev_gsokolov`.`filled_personal_info`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.231809Z", "completed_at": "2024-05-31T19:25:19.246063Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.313232Z", "completed_at": "2024-05-31T19:25:19.313237Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08478403091430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.get_columns", "compiled": true, "compiled_code": "-- get_columns.sql\n", "relation_name": "`analytics-147612`.`dev_gsokolov`.`get_columns`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.233258Z", "completed_at": "2024-05-31T19:25:19.313599Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.317942Z", "completed_at": "2024-05-31T19:25:19.317945Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.08728384971618652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.inactive_filled_personal_info", "compiled": true, "compiled_code": "with\n    -- Step 1: Fetch users who registered this year\n    user_source as (select * from `analytics-147612`.`wh_raw`.`users`),\n\n    registered_users as (\n        select user_id, registered_dt, registered_ut\n        from user_source\n        where extract(year from registered_dt) = extract(year from current_date())\n    ),\n\n    -- Step 2: Fetch deposits made this year\n    deposit_source as (select * from `analytics-147612`.`wh_raw`.`deposits_enhanced`),\n\n    deposits_this_year as (\n        select user_id, deposit_id, deposit_type, created_dt\n        from deposit_source\n        where extract(year from created_dt) = extract(year from current_date())\n    ),\n\n    -- Step 3: Filter out users who did not perform a deposit within 3 days after\n    -- registration\n    users_no_deposit_within_3_days as (\n        select u.user_id, u.registered_dt\n        from registered_users u\n        left join\n            deposits_this_year d\n            on u.user_id = d.user_id\n            and d.created_dt <= u.registered_dt + interval 3 day\n        where d.deposit_id is null\n    ),\n\n    -- Step 4: Fetch users who filled their personal info\n    personal_info_source as (\n        select * from `analytics-147612`.`amplitude`.`events_octa_raw_filled_personal_info`\n    ),\n\n    users_filled_personal_info as (\n        select user_id, min(timestamp) as first_personal_info_filled_at\n        from personal_info_source\n        group by user_id\n    ),\n\n    -- Step 5: Join registered users with personal info filled within 3 days after\n    -- registration\n    users_registered_and_filled as (\n        select u.user_id, u.registered_dt\n        from users_no_deposit_within_3_days u\n        inner join users_filled_personal_info p on u.user_id = p.user_id\n        where\n            p.first_personal_info_filled_at >= u.registered_dt\n            and p.first_personal_info_filled_at <= u.registered_dt + interval 3 day\n    )\n\n-- Final step: Select from the joined result\nselect *\nfrom users_registered_and_filled", "relation_name": "`analytics-147612`.`dev_gsokolov`.`inactive_filled_personal_info`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.319393Z", "completed_at": "2024-05-31T19:25:19.323970Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.325463Z", "completed_at": "2024-05-31T19:25:19.325468Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00869607925415039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.mobile_appsflyer", "compiled": true, "compiled_code": "\nwith\n    source as (select * from `analytics-147612`.`wh_raw`.`mobile_appsflyer`),\n    renamed as (\n        select\n            id,\n            attributed_touch_type,\n            attributed_touch_time,\n            media_source,\n            is_retargeting,\n            retargeting_conversion_type,\n            af_channel,\n            af_keywords,\n            campaign,\n            af_c_id,\n            af_adset,\n            af_adset_id,\n            af_ad,\n            af_ad_id,\n            af_ad_type,\n            af_siteid,\n            af_sub1,\n            af_sub2,\n            af_sub3,\n            af_sub4,\n            af_sub5,\n            http_referrer,\n            original_url,\n            user_agent,\n            af_cost_model,\n            af_cost_value,\n            af_cost_currency,\n            contributor1_af_prt,\n            contributor1_media_source,\n            contributor1_campaign,\n            contributor1_touch_type,\n            contributor1_touch_time,\n            contributor2_af_prt,\n            contributor2_media_source,\n            contributor2_campaign,\n            contributor2_touch_type,\n            contributor2_touch_time,\n            contributor3_af_prt,\n            contributor3_media_source,\n            contributor3_campaign,\n            contributor3_touch_type,\n            contributor3_touch_time,\n            country_code,\n            ip,\n            region,\n            state,\n            city,\n            wifi,\n            operator,\n            carrier,\n            language,\n            appsflyer_id,\n            advertising_id,\n            idfa,\n            android_id,\n            customer_user_id,\n            imei,\n            idfv,\n            platform,\n            device_type,\n            os_version,\n            app_version,\n            sdk_version,\n            app_id,\n            app_name,\n            bundle_id,\n            af_attribution_lookback,\n            event_name,\n            event_value,\n            event_revenue,\n            event_revenue_usd,\n            event_revenue_currency,\n            postal_code,\n            dma,\n            af_reengagement_window,\n            event_source,\n            is_primary_attribution,\n            af_sub_siteid,\n            download_time,\n            device_model,\n            device_brand,\n            event_type,\n            agency,\n            attribution_type,\n            event_time_dt,\n            install_time_dt,\n            insert_id,\n            store_reinstall,\n            install_app_store,\n            engagement_type,\n            af_event_type\n        from source\n    )\nselect *\nfrom renamed\nwhere extract(year from event_time_dt) = extract(year from current_date())", "relation_name": "`analytics-147612`.`dev_gsokolov`.`mobile_appsflyer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.321732Z", "completed_at": "2024-05-31T19:25:19.325803Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.326606Z", "completed_at": "2024-05-31T19:25:19.326610Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007805824279785156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.otr_counts", "compiled": true, "compiled_code": "-- Extract date boundaries for the current month to optimize repeated calculations\nwith\n    current_month_boundaries as (\n        select\n            date_trunc(current_date(), month) as month_start,\n            date_add(date_trunc(current_date(), month), interval 1 month) as month_end\n    ),\n\n    unique_active_users as (\n        select distinct ur.user_id\n        from `analytics-147612`.`wh_raw`.`trading_real_raw` ur\n        where\n            date(ur.open_time_dt) >= (select month_start from current_month_boundaries)\n            and date(ur.open_time_dt) < (select month_end from current_month_boundaries)\n            and ur.cmd < 2\n    ),\n\n    feed_app_reading_base as (\n        select\n            event_id,\n            user_id,\n            device_id,\n            event_type,\n            time,\n            app_version_f,\n            app,\n            app_version_ep,\n            platform,\n            os_version,\n            device_brand,\n            device_manufacturer,\n            device_model,\n            carrier,\n            language,\n            ip,\n            adid,\n            day_of_week,\n            post_slug,\n            value,\n            channel_id,\n            symbol,\n            title,\n            post_type,\n            pattern_slugs,\n            is_subscribed,\n            num_of_subscriptions,\n            subscriptions,\n            session_starting_channel,\n            visit_source,\n            source_post_id\n        from\n            `analytics-147612`.`amplitude`.`events_octa_raw_app_feed_reading`\n        where\n            date(time) >= (select month_start from current_month_boundaries)\n            and date(time) < (select month_end from current_month_boundaries)\n    ),\n\n    feed_web_reading_base as (\n        select\n            user_id,\n            time,\n            event_type,\n            device_id,\n            app,\n            platform,\n            os_name,\n            os_version,\n            browser,\n            browser_version,\n            ip,\n            day_of_week,\n            post_slug,\n            value,\n            channel_id,\n            symbol,\n            title,\n            post_type,\n            pattern_slugs,\n            is_subscribed,\n            num_of_subscriptions,\n            subscriptions,\n            session_starting_channel\n        from\n            `analytics-147612`.`amplitude`.`events_octa_raw_web_feed_reading`\n        where\n            date(time) >= (select month_start from current_month_boundaries)\n            and date(time) < (select month_end from current_month_boundaries)\n    ),\n\n    deals_source as (select * from `analytics-147612`.`wh_raw`.`trading_otr_deals_real`),\n    accounts_source as (select * from `analytics-147612`.`wh_raw`.`trading_otr_accounts_real`),\n\n    deals_renamed as (\n        select\n            id,\n            order_id,\n            position_id,\n            account_id,\n            symbol,\n            direction,\n            volume,\n            price,\n            profit,\n            quote_timestamp,\n            create_timestamp,\n            shard\n        from deals_source\n    ),\n\n    accounts_renamed as (\n        select\n            id,\n            user_id,\n            balance,\n            bonus,\n            margin,\n            leverage,\n            group_name,\n            currency,\n            readonly,\n            deleted,\n            created,\n            shard\n        from accounts_source\n    ),\n\n    current_month_deals as (\n        select *\n        from deals_renamed\n        where\n            date(create_timestamp) >= (select month_start from current_month_boundaries)\n            and date(create_timestamp) < (select month_end from current_month_boundaries)\n    ),\n\n    user_deal_counts as (\n        select account_id, count(*) as deal_count\n        from current_month_deals\n        group by account_id\n    ),\n\n    deal_user_mapping as (\n        select udc.account_id, ar.user_id, coalesce(udc.deal_count, 0) as deal_count\n        from user_deal_counts udc\n        join accounts_renamed ar on udc.account_id = ar.id\n    ),\n\n    app_reading_counts as (\n        select user_id, count(*) as app_reading_count\n        from feed_app_reading_base\n        group by user_id\n    ),\n\n    web_reading_counts as (\n        select user_id, count(*) as web_reading_count\n        from feed_web_reading_base\n        group by user_id\n    ),\n\n    combined_reading_counts as (\n        select\n            coalesce(app.user_id, web.user_id) as user_id,\n            coalesce(app.app_reading_count, 0) + coalesce(web.web_reading_count, 0) as total_reading_count\n        from app_reading_counts app\n        full outer join web_reading_counts web on app.user_id = web.user_id\n    )\n\n-- Final Query to Get User ID with Reading Counts and Deal Counts,\n-- ensuring every user in unique_active_users is considered\nselect\n    uau.user_id,\n    coalesce(drm.account_id, null) as account_id,\n    coalesce(drm.deal_count, 0) as deal_count,\n    coalesce(crc.total_reading_count, 0) as total_reading_count\nfrom unique_active_users uau\nleft join deal_user_mapping drm on uau.user_id = drm.user_id\nleft join combined_reading_counts crc on uau.user_id = crc.user_id", "relation_name": "`analytics-147612`.`dev_gsokolov`.`otr_counts`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.324151Z", "completed_at": "2024-05-31T19:25:19.326956Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.327700Z", "completed_at": "2024-05-31T19:25:19.327705Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006312847137451172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.payment_system_select", "compiled": true, "compiled_code": "with\n    source as (\n\n        select *\n        from `analytics-147612`.`amplitude`.`events_octa_raw_deposit_payment_system_select`\n\n    ),\n\n    renamed as (\n\n        select\n            user_id,\n            time,\n            device_id,\n            app,\n            ip,\n            carrier,\n            language,\n            adid,\n            platform,\n            os_version,\n            app_version,\n            full_app_version,\n            device_brand,\n            device_manufacturer,\n            device_model,\n            payment_system_id,\n            payment_system_slug,\n            payment_system_name\n\n        from source\n\n    )\n\nselect *\nfrom renamed", "relation_name": "`analytics-147612`.`dev_gsokolov`.`payment_system_select`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.328967Z", "completed_at": "2024-05-31T19:25:19.335076Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.335326Z", "completed_at": "2024-05-31T19:25:19.335330Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008182764053344727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.tokens", "compiled": true, "compiled_code": "WITH source AS (\n    SELECT\n        *\n    FROM\n        `analytics-147612`.`bloomreach_raw`.`customers_properties`\n),\nrenamed AS (\n    SELECT\n        raw_properties.user_id,\n        raw_properties.google_push_notification_id\n    FROM\n        source\n)\nSELECT\n    *\nFROM\n    renamed", "relation_name": "`analytics-147612`.`dev_gsokolov`.`tokens`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.331916Z", "completed_at": "2024-05-31T19:25:19.335656Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.336490Z", "completed_at": "2024-05-31T19:25:19.336494Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008072853088378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.trading_otr", "compiled": true, "compiled_code": "with\n    source as (select * from `analytics-147612`.`wh_raw`.`trading_otr_deals_real`),\n\n    renamed as (\n\n        select\n            id,\n            order_id,\n            position_id,\n            account_id,\n            symbol,\n            direction,\n            volume,\n            price,\n            profit,\n            quote_timestamp,\n            create_timestamp,\n            shard\n\n        from source\n\n    )\n\nselect *\nfrom renamed\nwhere create_timestamp >= \"2024-05-01\"", "relation_name": "`analytics-147612`.`dev_gsokolov`.`trading_otr`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.333439Z", "completed_at": "2024-05-31T19:25:19.335922Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.336838Z", "completed_at": "2024-05-31T19:25:19.336843Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005218982696533203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.trading_otr_accounts_real", "compiled": true, "compiled_code": "\n\nwith\n    source as (select * from `analytics-147612`.`wh_raw`.`trading_otr_accounts_real`),\n\n    renamed as (\n\n        select\n            id,\n            user_id,\n            balance,\n            bonus,\n            margin,\n            leverage,\n            group_name,\n            currency,\n            readonly,\n            deleted,\n            created,\n            shard\n\n        from source\n\n    )\n\nselect *\nfrom renamed", "relation_name": "`analytics-147612`.`dev_gsokolov`.`trading_otr_accounts_real`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.338344Z", "completed_at": "2024-05-31T19:25:19.343102Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.343320Z", "completed_at": "2024-05-31T19:25:19.343324Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006249189376831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.trading_real_raw", "compiled": true, "compiled_code": "with\n    source as (select * from `analytics-147612`.`wh_raw`.`trading_real_raw`),\n\n    renamed as (\n\n        select\n            account_created_dt,\n            account_created_ut,\n            balance,\n            balance_at_close,\n            balance_operation_type,\n            close_price,\n            close_time,\n            close_time_dt,\n            close_time_since_acc_open,\n            close_time_since_reg,\n            cmd,\n            comment,\n            commission,\n            conv_rate1,\n            copy_trade_commission,\n            equity_at_close,\n            equity_at_open,\n            expiration,\n            is_closed_by_hedge,\n            is_pending,\n            leverage_at_open,\n            login,\n            margin_at_open,\n            margin_rate,\n            modify_time,\n            open_price,\n            open_time,\n            open_time_dt,\n            operation_id,\n            pending_created,\n            pending_type,\n            profit,\n            reason,\n            registered_dt,\n            registered_ut,\n            shard,\n            spread_close,\n            spread_open,\n            status,\n            swap_free_commission,\n            swaps,\n            symbol_digits,\n            symbol_name,\n            trading_account_currency,\n            trading_account_id,\n            trading_account_leverage,\n            type,\n            user_id,\n            volume,\n            initial_open_operation_id,\n            initial_open_volume,\n            open_reason,\n            position_id,\n            platform_name,\n            open_deal_price\n\n        from source\n\n    )\n\nselect *\nfrom renamed\nwhere open_time_dt >= \"2024-05-01\" and cmd < 2", "relation_name": "`analytics-147612`.`dev_gsokolov`.`trading_real_raw`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.340314Z", "completed_at": "2024-05-31T19:25:19.343736Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.344563Z", "completed_at": "2024-05-31T19:25:19.344566Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006712913513183594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.trading_users", "compiled": true, "compiled_code": "\n\nwith\n    user_last_deal as (\n        select user_id, max(open_time_dt) as last_deal_time\n        from `analytics-147612`.`wh_raw`.`trading_real_raw`\n        where cmd < 2\n        group by user_id\n    )\n\nselect\n    safe_cast(c.user_id as int64) as user_id,\n    c.internal_customer_id,\n    max(\n        coalesce(cp.raw_properties.google_push_notification_id is not null, false)\n    ) as has_token,\n    max(coalesce(cc.properties.action = 'accept', false)) as has_consent\nfrom `analytics-147612`.`bloomreach_raw`.`campaign`  as c\nleft join\n    `analytics-147612`.`bloomreach_raw`.`customers_properties` as cp\n    on c.internal_customer_id = cp.internal_id\nleft join\n    `analytics-147612`.`bloomreach_raw`.`consent` as cc\n    on c.internal_customer_id = cc.internal_customer_id\nleft join user_last_deal as uld on safe_cast(c.user_id as int64) = uld.user_id\nwhere\n    c.user_id is not null\n    and uld.last_deal_time >= timestamp_sub(current_timestamp(), interval 45 day)\ngroup by c.user_id, c.internal_customer_id\nhaving\n    max(\n        coalesce(cp.raw_properties.google_push_notification_id is not null, false)\n    ) or\n    max(coalesce(cc.properties.action = 'accept', false))", "relation_name": "`analytics-147612`.`dev_gsokolov`.`trading_users`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.342048Z", "completed_at": "2024-05-31T19:25:19.344246Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.345209Z", "completed_at": "2024-05-31T19:25:19.345212Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007086038589477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.tw_segment", "compiled": true, "compiled_code": "with\n    deals_this_month as (\n        select distinct user_id\n        from `analytics-147612`.`dev_gsokolov`.`trading_real_raw`\n    ),\n\n    user_accounts as (\n        select distinct dtm.user_id\n        from deals_this_month dtm\n        left join\n            `analytics-147612`.`wh_raw`.`trading_otr_accounts_real` toa\n            on dtm.user_id = toa.user_id\n        where toa.id is null\n    )\n\nselect *\nfrom user_accounts", "relation_name": "`analytics-147612`.`dev_gsokolov`.`tw_segment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.346322Z", "completed_at": "2024-05-31T19:25:19.351519Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.351823Z", "completed_at": "2024-05-31T19:25:19.351826Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006888866424560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.users_3d", "compiled": true, "compiled_code": "with\n    -- Step 1: Fetch users who registered this year\n    user_source as (select * from `analytics-147612`.`wh_raw`.`users`),\n\n    registered_users as (\n        select user_id, registered_dt, registered_ut\n        from user_source\n        where extract(year from registered_dt) = extract(year from current_date())\n    ),\n\n    -- Step 2: Fetch deposits made this year\n    deposit_source as (select * from `analytics-147612`.`wh_raw`.`deposits_enhanced`),\n\n    deposits_this_year as (\n        select user_id, deposit_id, deposit_type, created_dt\n        from deposit_source\n        where extract(year from created_dt) = extract(year from current_date())\n    ),\n\n    -- Step 3: Filter out users who did not perform a deposit within 3 days after\n    -- registration\n    users_no_deposit_within_3_days as (\n        select u.user_id, u.registered_dt\n        from registered_users u\n        left join\n            deposits_this_year d\n            on u.user_id = d.user_id\n            and d.created_dt <= u.registered_dt + interval 3 day\n        where d.deposit_id is null\n    )\n\n-- Final step: Select from the filtered result\nselect *\nfrom users_no_deposit_within_3_days", "relation_name": "`analytics-147612`.`dev_gsokolov`.`users_3d`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.350136Z", "completed_at": "2024-05-31T19:25:19.352410Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.353105Z", "completed_at": "2024-05-31T19:25:19.353108Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005255937576293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.users_raw", "compiled": true, "compiled_code": "with\n    source as (select * from `analytics-147612`.`wh_raw`.`users`),\n\n    renamed as (\n\n        select\n            user_id,\n            registered_ut,\n            registered_dt,\n            verification_status,\n            is_email_verified,\n            is_locked,\n            lock_comment,\n            last_login,\n            birthdate,\n            country_code,\n            country,\n            city,\n            deposited_total,\n            withdrawn_total,\n            reg_info,\n            referrer_id,\n            is_unsubscribed,\n            language,\n            language_id,\n            support_language_id,\n            is_withdraw_disabled,\n            is_deposit_disabled,\n            email_domain,\n            email_hash,\n            email_hash_md5,\n            firstname_hash,\n            lastname_hash,\n            phone_hash,\n            phone_filled\n\n        from source\n\n    )\n\nselect *\nfrom renamed", "relation_name": "`analytics-147612`.`dev_gsokolov`.`users_raw`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.348494Z", "completed_at": "2024-05-31T19:25:19.352589Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.353403Z", "completed_at": "2024-05-31T19:25:19.353405Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007297039031982422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.users_cids_all", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select * from `analytics-147612`.`wh_raw`.`users_cids_all`\n\n),\n\nrenamed as (\n\n    select\n        client_id,\n        user_id,\n        dt,\n        src_info\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "`analytics-147612`.`dev_gsokolov`.`users_cids_all`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.433646Z", "completed_at": "2024-05-31T19:25:19.434754Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.436220Z", "completed_at": "2024-05-31T19:25:19.436226Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07210016250610352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_octafx.ETHUSD_random", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.435081Z", "completed_at": "2024-05-31T19:25:19.435891Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.436856Z", "completed_at": "2024-05-31T19:25:19.436859Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.07245182991027832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_octafx.XNGUSD_random", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.438308Z", "completed_at": "2024-05-31T19:25:19.442183Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.442501Z", "completed_at": "2024-05-31T19:25:19.442505Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0049517154693603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.users_pa_pss", "compiled": true, "compiled_code": "-- Step 1: Fetch users who registered this year and filled personal info within 3 days\n-- after registration\n\n-- Step 2: Fetch payment system select events\nwith\n    payment_system_select_source as (\n        select *\n        from `analytics-147612`.`amplitude`.`events_octa_raw_deposit_payment_system_select`\n    ),\n\n    payment_system_selects as (\n        select user_id, time as payment_system_select_time\n        from payment_system_select_source\n    ),\n\n    -- Step 3: Join registered users with payment system select events\n    users_with_payment_system_select as (\n        select i.user_id, i.registered_dt, p.payment_system_select_time\n        from `analytics-147612`.`dev_gsokolov`.`inactive_filled_personal_info` i\n        inner join payment_system_selects p on i.user_id = p.user_id\n        where\n            p.payment_system_select_time >= i.registered_dt + interval 4 day\n            and p.payment_system_select_time <= i.registered_dt + interval 7 day\n    ),\n\n    -- Step 4: Filter out users who have not performed a payment system select within\n    -- the desired time frame\n    users_with_payment_system_select_within_timeframe as (\n        select user_id, registered_dt\n        from users_with_payment_system_select\n        group by user_id, registered_dt\n        having count(payment_system_select_time) >= 1\n    )\n\n-- Final step: Select from the joined result\nselect *\nfrom users_with_payment_system_select_within_timeframe", "relation_name": "`analytics-147612`.`dev_gsokolov`.`users_pa_pss`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.440270Z", "completed_at": "2024-05-31T19:25:19.442843Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.443386Z", "completed_at": "2024-05-31T19:25:19.443388Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0056209564208984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.trading_agg", "compiled": true, "compiled_code": "\n\nwith\n    source as (select * from `analytics-147612`.`dev_gsokolov`.`trading_real_raw`), filter as (\n        select * from source where open_time_dt >= '2024-05-01' and cmd < 2\n    ),\n\n    aggregated as (\n        select\n            user_id,\n            trading_account_id,\n            count(operation_id) as total_operations,\n            sum(profit) as total_profit,\n            avg(balance) as avg_balance,\n            sum(volume) as total_volume,\n            avg(volume) as avg_volume_per_trade,\n            count(distinct symbol_name) as distinct_symbols,\n            -- Calculate segments, like Premium/Loyal customers, based on business logic\n            case\n                when avg(balance) > 10000\n                then 'Premium'\n                when count(distinct symbol_name) > 10\n                then 'Loyal'\n                else 'Regular'\n            end as segment\n\n        from filter\n        group by user_id, trading_account_id\n    )\n\nselect *\nfrom aggregated", "relation_name": "`analytics-147612`.`dev_gsokolov`.`trading_agg`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.445001Z", "completed_at": "2024-05-31T19:25:19.448897Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.449083Z", "completed_at": "2024-05-31T19:25:19.449087Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005415201187133789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.trading_dynamics_rolling_aggregates", "compiled": true, "compiled_code": "\n\nwith\n    source as (select * from `analytics-147612`.`dev_gsokolov`.`trading_real_raw`), filter as (\n        select\n            user_id,\n            operation_id,\n            trading_account_id,\n            symbol_name,\n            open_time_dt,\n            profit,\n            volume\n        from source\n        where open_time_dt >= '2024-05-01' and cmd < 2\n    ),\n\n    period_data as (\n        select\n            user_id,\n            trading_account_id,\n            symbol_name,\n            date_trunc(open_time_dt, week) as period_start,\n            sum(profit) as period_profit,\n            sum(volume) as period_volume,\n            count(operation_id) as period_operations\n        from filter\n        group by\n            user_id, trading_account_id, symbol_name, date_trunc(open_time_dt, week)\n    ),\n\n    rolling_aggregates as (\n        select\n            user_id,\n            trading_account_id,\n            symbol_name,\n            period_start,\n            sum(period_profit) over (\n                partition by user_id, trading_account_id, symbol_name\n                order by period_start\n                rows between unbounded preceding and current row\n            ) as cumulative_profit,\n            sum(period_volume) over (\n                partition by user_id, trading_account_id, symbol_name\n                order by period_start\n                rows between unbounded preceding and current row\n            ) as cumulative_volume,\n            avg(period_profit) over (\n                partition by user_id, trading_account_id, symbol_name\n                order by period_start\n                rows between unbounded preceding and current row\n            ) as avg_profit_per_period,\n            avg(period_volume) over (\n                partition by user_id, trading_account_id, symbol_name\n                order by period_start\n                rows between unbounded preceding and current row\n            ) as avg_volume_per_period,\n            sum(period_operations) over (\n                partition by user_id, trading_account_id, symbol_name\n                order by period_start\n                rows between unbounded preceding and current row\n            ) as cumulative_operations,\n            period_profit,\n            period_volume,\n            lag(period_profit) over (\n                partition by user_id, trading_account_id, symbol_name\n                order by period_start\n            ) as prev_period_profit,\n            lag(period_volume) over (\n                partition by user_id, trading_account_id, symbol_name\n                order by period_start\n            ) as prev_period_volume\n        from period_data\n    )\n\nselect\n    *,\n    case\n        when prev_period_profit is null or prev_period_profit = 0\n        then null\n        else (period_profit - prev_period_profit) / prev_period_profit\n    end as profit_change_pct,\n    case\n        when prev_period_volume is null or prev_period_volume = 0\n        then null\n        else (period_volume - prev_period_volume) / prev_period_volume\n    end as volume_change_pct\nfrom rolling_aggregates", "relation_name": "`analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.447117Z", "completed_at": "2024-05-31T19:25:19.451609Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.452170Z", "completed_at": "2024-05-31T19:25:19.452175Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007538318634033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.tw_segment_space_event_counts", "compiled": true, "compiled_code": "-- file: models/tw_segment_space_event_counts.sql\nwith\n    actual_tw_space_users as (\n        select distinct user_id from `analytics-147612`.`dev_gsokolov`.`trading_real_raw`\n    ),\n\n    app_feed_events as (\n        select\n            user_id,\n            countif(\n                extract(month from time) = extract(month from current_date)\n                and extract(year from time) = extract(year from current_date)\n            ) as app_event_count_month,\n            countif(\n                extract(year from time) = extract(year from current_date)\n            ) as app_event_count_year\n        from `analytics-147612`.`dev_gsokolov`.`feed_app_reading_base`\n        group by user_id\n    ),\n\n    web_feed_events as (\n        select\n            user_id,\n            countif(\n                extract(month from time) = extract(month from current_date)\n                and extract(year from time) = extract(year from current_date)\n            ) as web_event_count_month,\n            countif(\n                extract(year from time) = extract(year from current_date)\n            ) as web_event_count_year\n        from `analytics-147612`.`dev_gsokolov`.`feed_web_reading_base`\n        group by user_id\n    ),\n\n    total_events as (\n        select\n            u.user_id,\n            coalesce(a.app_event_count_month, 0) as app_event_count_month,\n            coalesce(a.app_event_count_year, 0) as app_event_count_year,\n            coalesce(w.web_event_count_month, 0) as web_event_count_month,\n            coalesce(w.web_event_count_year, 0) as web_event_count_year,\n            coalesce(a.app_event_count_month, 0)\n            + coalesce(w.web_event_count_month, 0) as total_event_count_month,\n            coalesce(a.app_event_count_year, 0)\n            + coalesce(w.web_event_count_year, 0) as total_event_count_year\n        from actual_tw_space_users u\n        left join app_feed_events a on u.user_id = a.user_id\n        left join web_feed_events w on u.user_id = w.user_id\n    )\n\nselect *\nfrom total_events", "relation_name": "`analytics-147612`.`dev_gsokolov`.`tw_segment_space_event_counts`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.449918Z", "completed_at": "2024-05-31T19:25:19.453053Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.453481Z", "completed_at": "2024-05-31T19:25:19.453484Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003940105438232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.tw_space_segment", "compiled": true, "compiled_code": "-- file: models/tw_space_segment.sql\nwith\n    trading_real_raw as (select * from `analytics-147612`.`dev_gsokolov`.`trading_real_raw`),\n\n    events_octa_raw_app_feed_reading as (\n        select * from `analytics-147612`.`dev_gsokolov`.`feed_app_reading_base`\n    ),\n\n    events_octa_raw_web_feed_reading as (\n        select * from `analytics-147612`.`dev_gsokolov`.`feed_web_reading_base`\n    )\n\nselect distinct t1.user_id\nfrom trading_real_raw as t1\nwhere\n    not exists (\n        select 1\n        from events_octa_raw_app_feed_reading as t2\n        where time >= '2024-05-01' and t1.user_id = t2.user_id\n    )\n    and not exists (\n        select 1\n        from events_octa_raw_web_feed_reading as t3\n        where t1.user_id = t3.user_id and time >= '2024-05-01'\n    )", "relation_name": "`analytics-147612`.`dev_gsokolov`.`tw_space_segment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.453789Z", "completed_at": "2024-05-31T19:25:19.459132Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.459550Z", "completed_at": "2024-05-31T19:25:19.459555Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006797075271606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.users_segment", "compiled": true, "compiled_code": "\n\nwith\n    user_last_deal as (\n        select user_id, max(close_time_dt) as last_deal_time\n        from `analytics-147612`.`dev_gsokolov`.`trading_real_raw`\n        group by user_id\n    )\n\nselect\n    cast(c.user_id as int) as user_id,\n    max(\n        coalesce(cp.raw_properties.google_push_notification_id is not null, false)\n    ) as has_token,\n    max(coalesce(cc.properties.action = 'accept', false)) as has_consent\nfrom `analytics-147612`.`bloomreach_raw`.`campaign` as c\nleft join\n    `analytics-147612`.`bloomreach_raw`.`customers_properties` as cp\n    on c.internal_customer_id = cp.internal_id\nleft join\n    `analytics-147612`.`bloomreach_raw`.`consent` as cc\n    on c.internal_customer_id = cc.internal_customer_id\nleft join user_last_deal as uld on cast(c.user_id as int) = uld.user_id\nwhere\n    c.properties.status = 'delivered'\n    and c.timestamp between '2023-06-01' and current_timestamp()\n    and c.user_id is not null\n    and uld.last_deal_time >= timestamp_sub(current_timestamp(), interval 30 day)\ngroup by c.user_id", "relation_name": "`analytics-147612`.`dev_gsokolov`.`users_segment`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.456722Z", "completed_at": "2024-05-31T19:25:19.460279Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.460703Z", "completed_at": "2024-05-31T19:25:19.460705Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00455784797668457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.users_segment_trading", "compiled": true, "compiled_code": "with\n    -- Step 1: Base source table\n    source as (select * from `analytics-147612`.`wh_raw`.`users`),\n\n    -- Step 2: Rename columns appropriately\n    renamed as (\n        select\n            user_id,\n            registered_ut,\n            registered_dt,\n            verification_status,\n            is_email_verified,\n            is_locked,\n            lock_comment,\n            last_login,\n            birthdate,\n            country_code,\n            country,\n            city,\n            deposited_total,\n            withdrawn_total,\n            reg_info,\n            referrer_id,\n            is_unsubscribed,\n            language,\n            language_id,\n            support_language_id,\n            is_withdraw_disabled,\n            is_deposit_disabled,\n            email_domain,\n            email_hash,\n            email_hash_md5,\n            firstname_hash,\n            lastname_hash,\n            phone_hash,\n            phone_filled\n        from source\n    ),\n\n    -- Step 3: User segment\n    user_last_deal as (\n        select user_id, max(close_time_dt) as last_deal_time\n        from `analytics-147612`.`dev_gsokolov`.`trading_real_raw`\n        group by user_id\n    ),\n\n    users_segment as (\n        select\n            cast(c.user_id as int) as user_id,\n            max(\n                coalesce(\n                    cp.raw_properties.google_push_notification_id is not null, false\n                )\n            ) as has_token,\n            max(coalesce(cc.properties.action = 'accept', false)) as has_consent\n        from `analytics-147612`.`bloomreach_raw`.`campaign` as c\n        left join\n            `analytics-147612`.`bloomreach_raw`.`customers_properties` as cp\n            on c.internal_customer_id = cp.internal_id\n        left join\n            `analytics-147612`.`bloomreach_raw`.`consent` as cc\n            on c.internal_customer_id = cc.internal_customer_id\n        left join user_last_deal as uld on cast(c.user_id as int) = uld.user_id\n        where\n            c.properties.status = 'delivered'\n            and c.timestamp between '2023-06-01' and current_timestamp()\n            and c.user_id is not null\n            and uld.last_deal_time\n            >= timestamp_sub(current_timestamp(), interval 30 day)\n        group by c.user_id\n    ),\n\n    -- Step 4: Trading data\n    trading_data as (\n        select user_id, count(*) as deal_count, sum(volume) as total_volume\n        from `analytics-147612`.`wh_raw`.`trading_real_raw`\n        where\n            open_time_dt >= '2024-01-01'  -- Only consider deals made this year\n            and cmd < 2\n        group by user_id\n    ),\n\n    -- Step 5: Users segment trading\n    users_segment_trading as (\n        select us.user_id, us.has_token, us.has_consent, td.deal_count, td.total_volume\n        from users_segment us\n        left join user_last_deal as uld on cast(us.user_id as int) = uld.user_id\n        left join trading_data as td on cast(us.user_id as int) = td.user_id\n        where uld.last_deal_time >= timestamp_sub(current_timestamp(), interval 30 day)\n        group by\n            us.user_id, us.has_token, us.has_consent, td.deal_count, td.total_volume\n    ),\n\n    -- Step 6: Combine and filter data\n    final_users as (\n        select r.*\n        from renamed r\n        join users_segment_trading ust on cast(r.user_id as int) = ust.user_id\n    )\n\n-- Step 7: Select final desired output\nselect *\nfrom final_users f\njoin users_segment_trading ust using (user_id)", "relation_name": "`analytics-147612`.`dev_gsokolov`.`users_segment_trading`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.461495Z", "completed_at": "2024-05-31T19:25:19.467031Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.467248Z", "completed_at": "2024-05-31T19:25:19.467252Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006836891174316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.users_segment_with_sessions", "compiled": true, "compiled_code": "\n\nwith\n    mobile_appsflyer_source as (\n        select *\n        from `analytics-147612`.`wh_raw`.`mobile_appsflyer`\n        where event_time_dt >= '2024-01-01'\n    ),\n\n    users_segment as (\n        with\n            user_last_deal as (\n                select user_id, max(close_time_dt) as last_deal_time\n                from `analytics-147612`.`dev_gsokolov`.`trading_real_raw`\n                group by user_id\n            )\n\n        select\n            c.user_id,\n            max(\n                coalesce(\n                    cp.raw_properties.google_push_notification_id is not null, false\n                )\n            ) as has_token,\n            max(coalesce(cc.properties.action = 'accept', false)) as has_consent\n        from `analytics-147612`.`bloomreach_raw`.`campaign` as c\n        left join\n            `analytics-147612`.`bloomreach_raw`.`customers_properties` as cp\n            on c.internal_customer_id = cp.internal_id\n        left join\n            `analytics-147612`.`bloomreach_raw`.`consent` as cc\n            on c.internal_customer_id = cc.internal_customer_id\n        left join user_last_deal as uld on cast(c.user_id as int) = uld.user_id\n        where\n            c.properties.status = 'delivered'\n            and c.timestamp between '2023-06-01' and current_timestamp()\n            and c.user_id is not null\n            and uld.last_deal_time\n            >= timestamp_sub(current_timestamp(), interval 30 day)\n        group by c.user_id\n    ),\n\n    user_sessions as (\n        select\n            customer_user_id,\n            min(event_time_dt) as session_start,\n            max(event_time_dt) as session_end,\n            timestamp_diff(\n                max(event_time_dt), min(event_time_dt), second\n            ) as session_duration\n        from mobile_appsflyer_source\n        where event_name = 'session'\n        group by customer_user_id\n    ),\n\n    users_segment_with_sessions as (\n        select us.user_id, avg(usn.session_duration) as avg_session_duration\n        from users_segment us\n        join user_sessions usn on us.user_id = usn.customer_user_id\n        group by us.user_id\n    )\n\nselect *\nfrom users_segment_with_sessions", "relation_name": "`analytics-147612`.`dev_gsokolov`.`users_segment_with_sessions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.465396Z", "completed_at": "2024-05-31T19:25:19.467553Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.467962Z", "completed_at": "2024-05-31T19:25:19.467965Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0030350685119628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.contact_policy_stat", "compiled": true, "compiled_code": "-- models/m_user_events_per_month.sql\n\n\nwith\n    user_events_per_month as (\n\n        with\n            trading_users as (select distinct user_id from `analytics-147612`.`dev_gsokolov`.`trading_users`),\n\n            -- Select events within the last 365 days from the current date and\n            -- calculate event count per user per month\n            recent_events as (\n                select\n                    user_id,\n                    extract(month from timestamp) as event_month,\n                    count(*) as event_count\n                from `analytics-147612`.`bloomreach_raw`.`campaign`\n                where timestamp_sub(current_timestamp(), interval 365 day) <= timestamp\n                group by user_id, extract(month from timestamp)\n            )\n\n        -- Join the distinct users with their recent events per month\n        select tu.user_id, re.event_month, re.event_count\n        from trading_users tu\n        left join recent_events re on tu.user_id = safe_cast(re.user_id as int64)\n    )\nselect *\nfrom user_events_per_month", "relation_name": "`analytics-147612`.`dev_gsokolov`.`contact_policy_stat`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.469100Z", "completed_at": "2024-05-31T19:25:19.472526Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.472721Z", "completed_at": "2024-05-31T19:25:19.472725Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004499197006225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.deal_cnt_tw", "compiled": true, "compiled_code": "with\n    first_deals as (\n        select user_id, min(open_time_dt) as first_deal_date\n        from `analytics-147612`.`dev_gsokolov`.`trading_real_raw`\n        where open_time_dt >= \"2024-05-01\" and cmd < 2\n        group by user_id\n    ),\n    deals_within_two_weeks as (\n        select rr.user_id, count(close_time_dt) as deal_count\n        from `analytics-147612`.`dev_gsokolov`.`trading_real_raw` rr\n        right join `analytics-147612`.`dev_gsokolov`.`tw_segment` ts on rr.user_id = ts.user_id\n        inner join first_deals fd on rr.user_id = fd.user_id\n        where\n            rr.open_time_dt\n            between fd.first_deal_date and fd.first_deal_date + interval '14' day\n            and rr.open_time_dt >= \"2024-05-01\"\n            and rr.cmd < 2\n        group by rr.user_id\n    )\nselect user_id, deal_count\nfrom deals_within_two_weeks\norder by deal_count desc", "relation_name": "`analytics-147612`.`dev_gsokolov`.`deal_cnt_tw`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.470981Z", "completed_at": "2024-05-31T19:25:19.473212Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.473597Z", "completed_at": "2024-05-31T19:25:19.473599Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004746913909912109, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.users_4-7d", "compiled": true, "compiled_code": "with\n    -- Step 1: Fetch users who registered this year and did not perform a deposit\n    -- within 3 days after registration\n    users_3d as (select u.user_id, u.registered_dt from `analytics-147612`.`dev_gsokolov`.`users_3d` u),\n\n    -- Step 2: Fetch payment system selection events\n    payment_system_select as (\n        select *\n        from `analytics-147612`.`amplitude`.`events_octa_raw_deposit_payment_system_select`\n    ),\n\n    -- Step 3: Find users who performed payment system selection between 4 and 7 days\n    -- after registration\n    payment_system_action_within_4_to_7_days as (\n        select ps.user_id, ps.time as payment_selection_time\n        from payment_system_select ps\n        join users_3d u on ps.user_id = u.user_id\n        where\n            ps.time\n            between u.registered_dt\n            + interval 4 day and u.registered_dt\n            + interval 7 day\n        group by ps.user_id, ps.time\n    )\n\n-- Final step: Select the relevant user ids\nselect distinct user_id\nfrom payment_system_action_within_4_to_7_days", "relation_name": "`analytics-147612`.`dev_gsokolov`.`users_4-7d`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.474211Z", "completed_at": "2024-05-31T19:25:19.477978Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.478184Z", "completed_at": "2024-05-31T19:25:19.478188Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004827976226806641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.users_pss_cr", "compiled": true, "compiled_code": "with\n    -- Step 1: Fetch users who registered this year and did not perform a deposit\n    -- within 3 days after registration\n    users_3d as (select u.user_id, u.registered_dt from `analytics-147612`.`dev_gsokolov`.`users_3d` u),\n\n    -- Step 2: Fetch payment system selection events and rename the table for easier\n    -- usage\n    payment_system_select as (\n        select pss.user_id, pss.time\n        from\n            `analytics-147612`.`amplitude`.`events_octa_raw_deposit_payment_system_select` pss\n    ),\n\n    -- Step 3: Mark users from users_3d who performed a payment system selection\n    -- between 4 and 7 days after registration\n    user_payment_system_action as (\n        select\n            u.user_id,\n            case\n                when\n                    exists (\n                        select 1\n                        from payment_system_select p\n                        where\n                            p.user_id = u.user_id\n                            and p.time\n                            between u.registered_dt\n                            + interval 4 day and u.registered_dt\n                            + interval 7 day\n                    )\n                then 1\n                else 0\n            end as performed_payment_system_select\n        from users_3d u\n    )\n\n-- Step 4: Calculate conversion statistics\nselect\n    count(*) as total_users,\n    sum(performed_payment_system_select) as converted_users,\n    (sum(performed_payment_system_select) * 100.0 / count(*)) as conversion_rate\nfrom user_payment_system_action", "relation_name": "`analytics-147612`.`dev_gsokolov`.`users_pss_cr`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.476114Z", "completed_at": "2024-05-31T19:25:19.478710Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.479074Z", "completed_at": "2024-05-31T19:25:19.479076Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003409862518310547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.uninstalls", "compiled": true, "compiled_code": "\n\nwith uninstall_events as (\n    select * from `analytics-147612`.`dev_gsokolov`.`appsflyer_uninstall_events_report`\n),\n\nusers as (\n    select * from `analytics-147612`.`dev_gsokolov`.`users_cids_all`\n),\n\njoined_data as (\n    select u.*, e.appsflyer_id\n    from users u\n    join uninstall_events e\n    on u.cid = e.appsflyer_id\n)\n\nselect *\nfrom joined_data", "relation_name": "`analytics-147612`.`dev_gsokolov`.`uninstalls`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.479713Z", "completed_at": "2024-05-31T19:25:19.488610Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.489010Z", "completed_at": "2024-05-31T19:25:19.489014Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010190010070800781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_agg_avg_balance.c10bbf6eb8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect avg_balance\nfrom `analytics-147612`.`dev_gsokolov`.`trading_agg`\nwhere avg_balance is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.486377Z", "completed_at": "2024-05-31T19:25:19.488816Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.489475Z", "completed_at": "2024-05-31T19:25:19.489478Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003787994384765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_agg_avg_volume_per_trade.7bb5128faa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect avg_volume_per_trade\nfrom `analytics-147612`.`dev_gsokolov`.`trading_agg`\nwhere avg_volume_per_trade is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.491254Z", "completed_at": "2024-05-31T19:25:19.497969Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.498462Z", "completed_at": "2024-05-31T19:25:19.498466Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00816488265991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_agg_distinct_symbols.d5d4b0c671", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect distinct_symbols\nfrom `analytics-147612`.`dev_gsokolov`.`trading_agg`\nwhere distinct_symbols is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.493700Z", "completed_at": "2024-05-31T19:25:19.498240Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.498816Z", "completed_at": "2024-05-31T19:25:19.498818Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008228778839111328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_agg_segment.a82dc14aa8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect segment\nfrom `analytics-147612`.`dev_gsokolov`.`trading_agg`\nwhere segment is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.500341Z", "completed_at": "2024-05-31T19:25:19.505078Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.505446Z", "completed_at": "2024-05-31T19:25:19.505452Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005902767181396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_agg_total_operations.bb31b06933", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_operations\nfrom `analytics-147612`.`dev_gsokolov`.`trading_agg`\nwhere total_operations is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.502762Z", "completed_at": "2024-05-31T19:25:19.505259Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.505760Z", "completed_at": "2024-05-31T19:25:19.505763Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0059850215911865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_agg_total_profit.5a6f8174fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_profit\nfrom `analytics-147612`.`dev_gsokolov`.`trading_agg`\nwhere total_profit is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.507217Z", "completed_at": "2024-05-31T19:25:19.511412Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.511798Z", "completed_at": "2024-05-31T19:25:19.511801Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00533294677734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_agg_total_volume.661442212c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_volume\nfrom `analytics-147612`.`dev_gsokolov`.`trading_agg`\nwhere total_volume is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.509078Z", "completed_at": "2024-05-31T19:25:19.511591Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.512113Z", "completed_at": "2024-05-31T19:25:19.512115Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005447864532470703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_agg_trading_account_id.11b34b9f7b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trading_account_id\nfrom `analytics-147612`.`dev_gsokolov`.`trading_agg`\nwhere trading_account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.513570Z", "completed_at": "2024-05-31T19:25:19.518813Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.519316Z", "completed_at": "2024-05-31T19:25:19.519321Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006517887115478516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_agg_user_id.dfd458e654", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom `analytics-147612`.`dev_gsokolov`.`trading_agg`\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.515692Z", "completed_at": "2024-05-31T19:25:19.519035Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.519759Z", "completed_at": "2024-05-31T19:25:19.519764Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006777048110961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.unique_trading_agg_user_id.403108a73e", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select user_id as unique_field\n  from `analytics-147612`.`dev_gsokolov`.`trading_agg`\n  where user_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.524038Z", "completed_at": "2024-05-31T19:25:19.526430Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.526919Z", "completed_at": "2024-05-31T19:25:19.526924Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005997657775878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_avg_volume_per_period.fff8f55a74", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect avg_volume_per_period\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere avg_volume_per_period is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.521572Z", "completed_at": "2024-05-31T19:25:19.526705Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.527355Z", "completed_at": "2024-05-31T19:25:19.527357Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006632328033447266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_avg_profit_per_period.d48841e7d1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect avg_profit_per_period\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere avg_profit_per_period is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.529052Z", "completed_at": "2024-05-31T19:25:19.534517Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.534887Z", "completed_at": "2024-05-31T19:25:19.534890Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006665229797363281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_cumulative_operations.58b613e2e0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cumulative_operations\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere cumulative_operations is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.532479Z", "completed_at": "2024-05-31T19:25:19.534698Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.535212Z", "completed_at": "2024-05-31T19:25:19.535214Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006749868392944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_cumulative_profit.078fe95f56", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cumulative_profit\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere cumulative_profit is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.536928Z", "completed_at": "2024-05-31T19:25:19.541632Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.542071Z", "completed_at": "2024-05-31T19:25:19.542078Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005978822708129883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_cumulative_volume.1568cd4508", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect cumulative_volume\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere cumulative_volume is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.539074Z", "completed_at": "2024-05-31T19:25:19.541872Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.542423Z", "completed_at": "2024-05-31T19:25:19.542426Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006086111068725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_period_profit.fc85b66220", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect period_profit\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere period_profit is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.546447Z", "completed_at": "2024-05-31T19:25:19.548785Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.549169Z", "completed_at": "2024-05-31T19:25:19.549173Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005774259567260742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_period_volume.a994ec02fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect period_volume\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere period_volume is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.544071Z", "completed_at": "2024-05-31T19:25:19.548981Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.549514Z", "completed_at": "2024-05-31T19:25:19.549516Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006320953369140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_period_start.413b1a4af7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect period_start\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere period_start is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.551034Z", "completed_at": "2024-05-31T19:25:19.555680Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.556166Z", "completed_at": "2024-05-31T19:25:19.556170Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005959987640380859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_profit_change_pct.80de32c49b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect profit_change_pct\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere profit_change_pct is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.553331Z", "completed_at": "2024-05-31T19:25:19.555928Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.556522Z", "completed_at": "2024-05-31T19:25:19.556524Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0060727596282958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_symbol_name.be79ba510b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect symbol_name\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere symbol_name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.558352Z", "completed_at": "2024-05-31T19:25:19.564126Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.564560Z", "completed_at": "2024-05-31T19:25:19.564564Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007259845733642578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_trading_account_id.be57fc6037", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect trading_account_id\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere trading_account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.560705Z", "completed_at": "2024-05-31T19:25:19.564353Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.564920Z", "completed_at": "2024-05-31T19:25:19.564922Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0072858333587646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_user_id.d20d97c29b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.568931Z", "completed_at": "2024-05-31T19:25:19.571046Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.571556Z", "completed_at": "2024-05-31T19:25:19.571562Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005734920501708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.campaign_activity", "compiled": true, "compiled_code": "\n\nwith\n    user_activity as (\n        select\n            b.user_id,\n            count(distinct action_id) as total_actions,\n            count(distinct action_type) as action_variety,\n            count(distinct campaign_id) as campaigns_engaged,\n            max(timestamp) as last_activity_time,\n            min(timestamp) as first_activity_time,\n            date_diff(max(timestamp), min(timestamp), day) as activity_span_days,\n            -- AVG(delta_time) AS avg_response_time,\n            max(attempts) as max_attempts,\n            array_agg(distinct device) as devices_used,\n            array_agg(distinct os) as os_used,\n            array_agg(distinct browser) as browsers_used,\n            array_agg(distinct platform) as platforms_used\n        from `analytics-147612`.`bloomreach_raw`.`campaign` b\n        inner join\n            `analytics-147612`.`dev_gsokolov`.`users_segment` u\n            on cast(b.user_id as int) = cast(u.user_id as int)\n        where extract(year from timestamp) = extract(year from current_date())\n        group by user_id\n    )\n\nselect\n    ua.user_id,\n    ua.total_actions,\n    ua.action_variety,\n    ua.campaigns_engaged,\n    ua.last_activity_time,\n    ua.first_activity_time,\n    ua.activity_span_days,\n    -- ua.avg_response_time,\n    ua.max_attempts,\n    array_to_string(ua.devices_used, ',') as devices_used,\n    array_to_string(ua.os_used, ',') as os_used,\n    array_to_string(ua.browsers_used, ',') as browsers_used,\n    array_to_string(ua.platforms_used, ',') as platforms_used\nfrom user_activity as ua", "relation_name": "`analytics-147612`.`dev_gsokolov`.`campaign_activity`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.566454Z", "completed_at": "2024-05-31T19:25:19.571308Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.571949Z", "completed_at": "2024-05-31T19:25:19.571952Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006310701370239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_octafx.not_null_trading_dynamics_rolling_aggregates_volume_change_pct.489f08c3f4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect volume_change_pct\nfrom `analytics-147612`.`dev_gsokolov`.`trading_dynamics_rolling_aggregates`\nwhere volume_change_pct is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.573665Z", "completed_at": "2024-05-31T19:25:19.578204Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.578591Z", "completed_at": "2024-05-31T19:25:19.578595Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0058879852294921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.cr", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith\n    -- Step 1: Filter bloomreach_campaign data\n    campaign_data as (\n        select distinct\n            internal_customer_id,\n            ingest_timestamp,\n            safe_cast(user_id as int64) as user_id,\n            campaign_id,\n            action_id,\n            timestamp as campaign_timestamp\n        from `analytics-147612`.`bloomreach_raw`.`campaign`\n        where\n            timestamp\n            between timestamp('2024-01-01') and timestamp('2024-01-08')\n            and extract(year from timestamp) = extract(year from current_date())\n            and user_id\n            in (select safe_cast(user_id as int64) from `analytics-147612`.`dev_gsokolov`.`users_segment`)\n            and campaign_id in (123', '456', '789)\n    ),\n\n    -- Step 2: Filter and process relevant deposits_enhanced data\n    deposits_data as (\n        with\n            source as (select * from `analytics-147612`.`wh_raw`.`deposits_enhanced`),\n\n            renamed as (\n                select user_id, deposit_id, amount, created_dt\n                from source\n                where extract(year from created_dt) = extract(year from current_date())\n            )\n        select *\n        from renamed\n    ),\n\n    -- Step 3: Join campaign_data with deposits_data to identify conversions\n    campaign_deposit_conversion as (\n        select\n            camp.internal_customer_id,\n            camp.user_id,\n            camp.campaign_id,\n            camp.action_id,\n            camp.campaign_timestamp,\n            depo.created_dt as deposit_time,\n            depo.deposit_id,\n            depo.amount as deposit_amount,\n            if(depo.created_dt is not null, 1, 0) as conversion_flag\n        from campaign_data camp\n        left join\n            deposits_data depo\n            on camp.user_id = depo.user_id\n            and depo.created_dt between camp.campaign_timestamp and timestamp_add(\n                camp.campaign_timestamp, interval 30 day\n            )\n    )\n\n-- Step 4: Aggregate the conversion data\nselect\n    user_id,\n    campaign_id,\n    action_id,\n    count(case when conversion_flag = 1 then 1 else null end) as conversions,\n    count(*) as total_campaigns,\n    (\n        count(case when conversion_flag = 1 then 1 else null end) * 1.0 / count(*)\n    ) as conversion_rate\nfrom campaign_deposit_conversion\ngroup by user_id, campaign_id, action_id", "relation_name": "`analytics-147612`.`dev_gsokolov`.`cr`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.576200Z", "completed_at": "2024-05-31T19:25:19.578395Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.578919Z", "completed_at": "2024-05-31T19:25:19.578921Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005949258804321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.session_length", "compiled": true, "compiled_code": "with\n    event_data as (\n        select\n            customer_user_id,\n            event_time_dt,\n            lag(event_time_dt) over (\n                partition by customer_user_id order by event_time_dt\n            ) as prev_event_time\n        from `analytics-147612`.`wh_raw`.`mobile_appsflyer`\n        where\n            extract(year from event_time_dt) = extract(year from current_date())\n            and customer_user_id\n            in (select distinct user_id from `analytics-147612`.`dev_gsokolov`.`users_segment`)\n    ),\n    session_flags as (\n        select\n            customer_user_id,\n            event_time_dt,\n            case\n                when event_time_dt - prev_event_time > interval 30 minute then 1 else 0\n            end as new_session\n        from event_data\n    ),\n    session_data as (\n        select\n            customer_user_id,\n            event_time_dt,\n            sum(new_session) over (\n                partition by customer_user_id order by event_time_dt\n            ) as session_id\n        from session_flags\n    ),\n    session_lengths as (\n        select\n            customer_user_id,\n            session_id,\n            max(event_time_dt) - min(event_time_dt) as session_length\n        from session_data\n        group by customer_user_id, session_id\n    )\nselect *\nfrom session_lengths", "relation_name": "`analytics-147612`.`dev_gsokolov`.`session_length`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.579856Z", "completed_at": "2024-05-31T19:25:19.581439Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:19.581617Z", "completed_at": "2024-05-31T19:25:19.581620Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0021462440490722656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.user_session_stats", "compiled": true, "compiled_code": "with\n    user_sessions as (\n        select\n            sl.customer_user_id,\n            \n            avg(sl.session_length) as avg_session_length_seconds\n        from `analytics-147612`.`dev_gsokolov`.`session_length` sl\n        group by sl.customer_user_id\n    ),\n\n    users_segment as (select * from `analytics-147612`.`dev_gsokolov`.`users_segment`)\n\nselect us.user_id, usg.avg_session_length_seconds\nfrom users_segment us\nleft join user_sessions usg on us.user_id = usg.customer_user_id", "relation_name": "`analytics-147612`.`dev_gsokolov`.`user_session_stats`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.354391Z", "completed_at": "2024-05-31T19:25:21.549297Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:21.549675Z", "completed_at": "2024-05-31T19:25:21.549682Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 2.1969478130340576, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.yamlgen", "compiled": true, "compiled_code": "version: 2\n\nsources:\n  - name: wh_raw\n    description: \"\"\n    tables:\n      - name: trading_otr_deals_real\n        description: \"\"\n        columns:\n          - name: id\n            data_type: int64\n            description: \"\"\n          - name: order_id\n            data_type: int64\n            description: \"\"\n          - name: position_id\n            data_type: int64\n            description: \"\"\n          - name: account_id\n            data_type: int64\n            description: \"\"\n          - name: symbol\n            data_type: string\n            description: \"\"\n          - name: direction\n            data_type: int64\n            description: \"\"\n          - name: volume\n            data_type: int64\n            description: \"\"\n          - name: price\n            data_type: float64\n            description: \"\"\n          - name: profit\n            data_type: float64\n            description: \"\"\n          - name: quote_timestamp\n            data_type: timestamp\n            description: \"\"\n          - name: create_timestamp\n            data_type: timestamp\n            description: \"\"\n          - name: shard\n            data_type: string\n            description: \"\"\n", "relation_name": "`analytics-147612`.`dev_gsokolov`.`yamlgen`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-05-31T19:25:19.235017Z", "completed_at": "2024-05-31T19:25:23.505037Z"}, {"name": "execute", "started_at": "2024-05-31T19:25:23.505450Z", "completed_at": "2024-05-31T19:25:23.505456Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 4.2745935916900635, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_octafx.metricflow_time_spine", "compiled": true, "compiled_code": "-- filename: metricflow_time_spine.sql\n-- BigQuery supports DATE() instead of TO_DATE(). Use this model if you're using\n-- BigQuery\n\nwith\n    days as (\n\n\n    \n\n\n    with rawdata as (\n\n        \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 10958\n    order by generated_number\n\n\n\n    ),\n\n    all_periods as (\n\n        select (\n            \n\n        datetime_add(\n            cast( DATE(2000,01,01) as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n        ) as date_day\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_day <= DATE(2030,01,01)\n\n    )\n\n    select * from filtered\n\n),\n\n    final as (select cast(date_day as date) as date_day from days)\n\nselect *\nfrom final", "relation_name": "`analytics-147612`.`dev_gsokolov`.`metricflow_time_spine`"}], "elapsed_time": 6.477799892425537, "args": {"static": false, "write_json": true, "which": "generate", "require_explicit_package_overrides_for_builtin_materializations": true, "cache_selected_only": false, "enable_legacy_logger": false, "log_file_max_bytes": 10485760, "static_parser": true, "indirect_selection": "eager", "project_dir": "/Users/gsokolov/Kogetsu/dbt_octafx", "select": [], "empty_catalog": false, "log_path": "/Users/gsokolov/Kogetsu/dbt_octafx/logs", "strict_mode": false, "compile": true, "version_check": true, "log_level": "info", "profiles_dir": "/Users/gsokolov/Kogetsu/dbt_octafx", "introspect": true, "use_colors": true, "populate_cache": true, "partial_parse_file_diff": true, "exclude": [], "log_level_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "macro_debugging": false, "invocation_command": "dbt ", "show_resource_report": false, "require_resource_names_without_spaces": false, "print": true, "printer_width": 80, "use_colors_file": true, "quiet": false, "partial_parse": true, "log_format_file": "debug", "source_freshness_run_project_hooks": false, "favor_state": false, "send_anonymous_usage_stats": true, "defer": false, "log_format": "default", "vars": {}}}