{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.13", "generated_at": "2024-04-26T03:59:24.162656Z", "invocation_id": "3735430e-5e78-4ef5-afec-1136692d42fe", "env": {}, "project_name": "dbt_octafx", "project_id": "846db0217e4e5fc9f9e0011569f652cb", "user_id": "ccc1dec7-e90c-4afe-aaa2-47cae211bbef", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.dbt_octafx.dummy_id": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "dummy_id", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/dummy_id.sql", "original_file_path": "models/push_problem/dummy_id.sql", "unique_id": "model.dbt_octafx.dummy_id", "fqn": ["dbt_octafx", "push_problem", "dummy_id"], "alias": "dummy_id", "checksum": {"name": "sha256", "checksum": "e5de26d07c3400a5188ce6d63b1cbf69bc4a7ef9b3dbbf42f2436cc2bff55611"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/dummy_id.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "table"}, "created_at": 1714072383.881235, "relation_name": "`analytics-147612`.`dev_gsokolov`.`dummy_id`", "raw_code": "{{ config(materialized='table') }}\n\nSELECT {{ get_user_id_based_on_client_id(\"69c10177-be79-4353-826b-a56b45cd6980\") }} as user_id", "language": "sql", "refs": [{"name": "users_cids_all", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_octafx.get_user_id_based_on_client_id"], "nodes": ["model.dbt_octafx.users_cids_all"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.timedelta_per_user": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "timedelta_per_user", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/timedelta_per_user.sql", "original_file_path": "models/push_problem/timedelta_per_user.sql", "unique_id": "model.dbt_octafx.timedelta_per_user", "fqn": ["dbt_octafx", "push_problem", "timedelta_per_user"], "alias": "timedelta_per_user", "checksum": {"name": "sha256", "checksum": "04d0df8f694174ec9d823877807dac1eac82908cf63ae94e6b8f0051ddce643e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml", "clustering": ["appsflyer_id"]}, "tags": [], "description": "", "columns": {"appsflyer_id": {"name": "appsflyer_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "failed_timestamp": {"name": "failed_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "first_attempt_timestamp": {"name": "first_attempt_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "time_delta_seconds": {"name": "time_delta_seconds", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/timedelta_per_user.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view", "clustering": ["appsflyer_id"]}, "created_at": 1714072383.8814871, "relation_name": "`analytics-147612`.`dev_gsokolov`.`timedelta_per_user`", "raw_code": "{{ config(\n        materialized='view',\n        clustering=[\"appsflyer_id\"]\n    ) }}\n\nWITH RankedEvents AS (\n  SELECT\n    i.appsflyer_id,\n    e.timestamp,\n    e.status,\n    e.action_id,\n    e.action_type,\n    e.campaign_name,\n    ROW_NUMBER() OVER (PARTITION BY i.appsflyer_id ORDER BY e.timestamp ASC) AS rank\n  FROM\n    {{ref('int_bloomreach_events_enhanced')}} as e\n    LEFT JOIN {{ref('int_af_id')}} AS i ON e.user_id = i.user_id\n  WHERE\n    e.action_type = 'mobile notification'\n),\nFailedEvents AS (\n  SELECT\n    appsflyer_id,\n    timestamp AS failed_timestamp\n  FROM RankedEvents\n  WHERE status = 'failed'\n),\nFirstAttemptEvents AS (\n  SELECT\n    appsflyer_id,\n    timestamp AS first_attempt_timestamp\n  FROM RankedEvents\n  WHERE rank = 1\n)\nSELECT\n  f.appsflyer_id,\n  f.failed_timestamp,\n  a.first_attempt_timestamp,\n  TIMESTAMP_DIFF(f.failed_timestamp, a.first_attempt_timestamp, SECOND) AS time_delta_seconds\nFROM\n  FailedEvents f\n  JOIN FirstAttemptEvents a ON f.appsflyer_id = a.appsflyer_id", "language": "sql", "refs": [{"name": "int_bloomreach_events_enhanced", "package": null, "version": null}, {"name": "int_af_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.int_bloomreach_events_enhanced", "model.dbt_octafx.int_af_id"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.avg_timedelta_per_user": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "avg_timedelta_per_user", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/avg_timedelta_per_user.sql", "original_file_path": "models/push_problem/avg_timedelta_per_user.sql", "unique_id": "model.dbt_octafx.avg_timedelta_per_user", "fqn": ["dbt_octafx", "push_problem", "avg_timedelta_per_user"], "alias": "avg_timedelta_per_user", "checksum": {"name": "sha256", "checksum": "045f7ff1f3be97e9b53236fc70b3de6b7a464f1a380eb0cd1b429da085b713b8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml", "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}, "clustering": ["appsflyer_id", "campaign_name"]}, "tags": [], "description": "", "columns": {"avg_time_delta_seconds": {"name": "avg_time_delta_seconds", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/avg_timedelta_per_user.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view", "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}, "clustering": ["appsflyer_id", "campaign_name"]}, "created_at": 1714072383.8821278, "relation_name": "`analytics-147612`.`dev_gsokolov`.`avg_timedelta_per_user`", "raw_code": "{{ config(\n        materialized='view',\n        partition_by={\n            \"field\": \"timestamp\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": \"day\"\n        },\n        clustering=[\"appsflyer_id\", \"campaign_name\"]\n    ) }}\n\nWITH RankedEvents AS (\n  SELECT\n    i.appsflyer_id,\n    e.timestamp,\n    e.status,\n    e.action_id,\n    e.action_type,\n    e.campaign_name,\n    ROW_NUMBER() OVER (PARTITION BY i.appsflyer_id ORDER BY e.timestamp ASC) AS rank\n  FROM\n    {{ref('int_bloomreach_events_enhanced')}} as e\n    LEFT JOIN {{ref('int_af_id')}} AS i ON e.user_id = i.user_id\n  WHERE\n    e.action_type = 'mobile notification'\n),\nFailedEvents AS (\n  SELECT\n    appsflyer_id,\n    timestamp AS failed_timestamp\n  FROM RankedEvents\n  WHERE status = 'failed'\n),\nFirstAttemptEvents AS (\n  SELECT\n    appsflyer_id,\n    timestamp AS first_attempt_timestamp\n  FROM RankedEvents\n  WHERE rank = 1\n),\nTimeDeltas AS (\n  SELECT\n    f.appsflyer_id,\n    TIMESTAMP_DIFF(f.failed_timestamp, a.first_attempt_timestamp, SECOND) AS time_delta_seconds\n  FROM\n    FailedEvents f\n    JOIN FirstAttemptEvents a ON f.appsflyer_id = a.appsflyer_id\n)\nSELECT\n  AVG(time_delta_seconds) AS avg_time_delta_seconds\nFROM\n  TimeDeltas", "language": "sql", "refs": [{"name": "int_bloomreach_events_enhanced", "package": null, "version": null}, {"name": "int_af_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.int_bloomreach_events_enhanced", "model.dbt_octafx.int_af_id"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.timedelta_helper": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "timedelta_helper", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/timedelta_helper.sql", "original_file_path": "models/push_problem/timedelta_helper.sql", "unique_id": "model.dbt_octafx.timedelta_helper", "fqn": ["dbt_octafx", "push_problem", "timedelta_helper"], "alias": "timedelta_helper", "checksum": {"name": "sha256", "checksum": "677942fe9622b2aaa87bb2e295ca4da737d19a905b82df42196d71285a2e3852"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"appsflyer_id": {"name": "appsflyer_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "if_failed": {"name": "if_failed", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_id": {"name": "action_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "action_type": {"name": "action_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/timedelta_helper.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.8818219, "relation_name": "`analytics-147612`.`dev_gsokolov`.`timedelta_helper`", "raw_code": "SELECT\n  i.appsflyer_id,\n  CASE\n    WHEN status = 'failed' THEN 1\n    WHEN status != 'failed' THEN 0\n  END as if_failed,\n  e.timestamp,\n  e.status,\n  e.action_id,\n  e.action_type,\n  e.campaign_name\nFROM\n  {{ref('int_bloomreach_events_enhanced')}} as e\n  LEFT JOIN {{ref('int_af_id')}} AS i ON e.user_id = i.user_id\nWHERE\n  (\n    e.action_type = 'mobile notification'\n  )", "language": "sql", "refs": [{"name": "int_bloomreach_events_enhanced", "package": null, "version": null}, {"name": "int_af_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.int_bloomreach_events_enhanced", "model.dbt_octafx.int_af_id"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.corrupt_user_id": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "corrupt_user_id", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/corrupt_user_id.sql", "original_file_path": "models/push_problem/corrupt_user_id.sql", "unique_id": "model.dbt_octafx.corrupt_user_id", "fqn": ["dbt_octafx", "push_problem", "corrupt_user_id"], "alias": "corrupt_user_id", "checksum": {"name": "sha256", "checksum": "a71c30c5f2477ee7fac869a150c964da782bd7ba02c91976119dea58091b3077"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"failed_pushes_users__appsflyer_id": {"name": "failed_pushes_users__appsflyer_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "failed_pushes_users__user_id": {"name": "failed_pushes_users__user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/corrupt_user_id.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.881994, "relation_name": "`analytics-147612`.`dev_gsokolov`.`corrupt_user_id`", "raw_code": "SELECT\n  `failed_pushes_users`.appsflyer_id `failed_pushes_users__appsflyer_id`,\n  `failed_pushes_users`.user_id `failed_pushes_users__user_id`\nFROM\n  (\n    SELECT\n      e.user_id,\n      a.appsflyer_id\n    FROM\n      `analytics-147612`.`dev_gsokolov`.`int_bloomreach_events_enhanced` e\n      INNER JOIN `analytics-147612`.`dev_gsokolov`.`int_af_id` a ON e.user_id = a.user_id\n    WHERE\n      e.timestamp > '2024-01-01T00:00:00.000'\n      AND e.timestamp < '2024-12-31T23:59:59.999'\n      AND (\n        e.action_type = 'mobile notification'\n      )\n      AND (e.status = 'failed')\n      AND (a.appsflyer_id is not null)\n    GROUP BY\n      1,\n      2\n  ) AS `failed_pushes_users`\nSELECT\n  `failed_pushes_users`.appsflyer_id `failed_pushes_users__appsflyer_id`,\n  `failed_pushes_users`.user_id `failed_pushes_users__user_id`\nFROM\n  (\n    SELECT\n      e.user_id,\n      a.appsflyer_id\n    FROM\n      `analytics-147612`.`dev_gsokolov`.`int_bloomreach_events_enhanced` e\n      INNER JOIN `analytics-147612`.`dev_gsokolov`.`int_af_id` a ON e.user_id = a.user_id\n    WHERE\n      e.timestamp > '2024-01-01T00:00:00.000'\n      AND e.timestamp < '2024-12-31T23:59:59.999'\n      AND (\n        e.action_type = 'mobile notification'\n      )\n      AND (e.status = 'failed')\n      AND (a.appsflyer_id is not null)\n    GROUP BY\n      1,\n      2\n  ) AS `failed_pushes_users`\nGROUP BY\n  1,\n  2", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.stg_pushes": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_pushes", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/stage/stg_pushes.sql", "original_file_path": "models/push_problem/stage/stg_pushes.sql", "unique_id": "model.dbt_octafx.stg_pushes", "fqn": ["dbt_octafx", "push_problem", "stage", "stg_pushes"], "alias": "stg_pushes", "checksum": {"name": "sha256", "checksum": "0208aed69af9af8582ac4713364c3f7387348b338568c6449ad4a4b566b1b7e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"type": {"name": "type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "internal_customer_id": {"name": "internal_customer_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ingest_timestamp": {"name": "ingest_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "action_type": {"name": "action_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_trigger": {"name": "campaign_trigger", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_id": {"name": "action_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "campaign_policy": {"name": "campaign_policy", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_name": {"name": "action_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sent_timestamp": {"name": "sent_timestamp", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "consent_category": {"name": "consent_category", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "integration_id": {"name": "integration_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "integration_name": {"name": "integration_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "message_type": {"name": "message_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sender": {"name": "sender", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sending_ip": {"name": "sending_ip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ip": {"name": "ip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "error": {"name": "error", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "redirect_to_screen": {"name": "redirect_to_screen", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "template_name": {"name": "template_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "attempts": {"name": "attempts", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "delta_time": {"name": "delta_time", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "os": {"name": "os", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "device": {"name": "device", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_url": {"name": "action_url", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/stage/stg_pushes.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.886492, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_pushes`", "raw_code": "select ue.*\nfrom {{ ref('stg_bloomreach_events') }} as ue\nwhere action_type = 'mobile notification'\nand status in ('delivered', 'clicked', 'failed')", "language": "sql", "refs": [{"name": "stg_bloomreach_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.stg_bloomreach_events"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.stg_bloomreach_events": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_bloomreach_events", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/stage/stg_bloomreach_events.sql", "original_file_path": "models/push_problem/stage/stg_bloomreach_events.sql", "unique_id": "model.dbt_octafx.stg_bloomreach_events", "fqn": ["dbt_octafx", "push_problem", "stage", "stg_bloomreach_events"], "alias": "stg_bloomreach_events", "checksum": {"name": "sha256", "checksum": "7048a7a323a76aefa8427c1c2800c373b41abb73313953749e001529ede2dcfe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml", "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}, "clustering": ["user_id"]}, "tags": [], "description": "", "columns": {"type": {"name": "type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "internal_customer_id": {"name": "internal_customer_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ingest_timestamp": {"name": "ingest_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "action_type": {"name": "action_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_trigger": {"name": "campaign_trigger", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_id": {"name": "action_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "campaign_policy": {"name": "campaign_policy", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_name": {"name": "action_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sent_timestamp": {"name": "sent_timestamp", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "consent_category": {"name": "consent_category", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "integration_id": {"name": "integration_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "integration_name": {"name": "integration_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "message_type": {"name": "message_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sender": {"name": "sender", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sending_ip": {"name": "sending_ip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ip": {"name": "ip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "error": {"name": "error", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "redirect_to_screen": {"name": "redirect_to_screen", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "template_name": {"name": "template_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "attempts": {"name": "attempts", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "delta_time": {"name": "delta_time", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "os": {"name": "os", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "device": {"name": "device", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_url": {"name": "action_url", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/stage/stg_bloomreach_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view", "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}, "clustering": ["user_id"]}, "created_at": 1714072383.883708, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_bloomreach_events`", "raw_code": "{{ config(\n        materialized='view',\n        partition_by={\n            \"field\": \"timestamp\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": \"day\"\n        },\n        clustering=[\"user_id\"]\n    ) }}\n\nselect\n    c.type,\n    c.internal_customer_id,\n    c.ingest_timestamp,\n    c.timestamp,\n    properties.action_type,\n    properties.campaign_trigger,\n    properties.language,\n    properties.platform,\n    properties.campaign_name,\n    properties.action_id,\n    properties.campaign_policy,\n    -- properties.subject,\n    properties.action_name,\n    properties.recipient,\n    -- properties.message,\n    properties.sent_timestamp,\n    properties.consent_category,\n    properties.campaign_id,\n    properties.status,\n    properties.integration_id,\n    properties.message_id,\n    properties.integration_name,\n    properties.utm_campaign,\n    properties.utm_medium,\n    properties.utm_source,\n    properties.code,\n    properties.message_type,\n    properties.sender,\n    properties.sending_ip,\n    properties.country,\n    properties.city,\n    properties.ip,\n    properties.state,\n    properties.longitude,\n    properties.status_code,\n    properties.error,\n    properties.event_type,\n    properties.symbol,\n    properties.redirect_to_screen,\n    properties.template_name,\n    properties.title,\n    properties.attempts,\n    properties.delta_time,\n    properties.os,\n    properties.location,\n    properties.device,\n    properties.action_url,\n    safe_cast(c.user_id as numeric) as user_id\nfrom {{ source(\"bloomreach\", 'campaign') }} as c\nwhere\n    timestamp_trunc(c.timestamp, day) >= '2024-01-01'", "language": "sql", "refs": [], "sources": [["bloomreach", "campaign"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.bloomreach.campaign"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.stg_users": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_users", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/stage/stg_users.sql", "original_file_path": "models/push_problem/stage/stg_users.sql", "unique_id": "model.dbt_octafx.stg_users", "fqn": ["dbt_octafx", "push_problem", "stage", "stg_users"], "alias": "stg_users", "checksum": {"name": "sha256", "checksum": "f0d8d9bc7e4a06cf5e285035fccaa58ba5e800b95bb27a5bba30a4414a40101b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "countries", "type": "left", "sql_on": "${stg_users.country_code} = ${countries.code}"}]}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "registered_dt": {"name": "registered_dt", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "countries", "type": "left", "sql_on": "${stg_users.country_code} = ${countries.code}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/stage/stg_users.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view", "meta": {"joins": [{"join": "countries", "type": "left", "sql_on": "${stg_users.country_code} = ${countries.code}"}]}}, "created_at": 1714072383.884782, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_users`", "raw_code": "select\n    user_id,\n    country_code,\n    registered_dt\nfrom\n    {{ source('wh_raw', 'users') }}\nwhere registered_dt >= '2024-01-01'", "language": "sql", "refs": [], "sources": [["wh_raw", "users"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.wh_raw.users"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.stg_af_events": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_af_events", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/stage/stg_af_events.sql", "original_file_path": "models/push_problem/stage/stg_af_events.sql", "unique_id": "model.dbt_octafx.stg_af_events", "fqn": ["dbt_octafx", "push_problem", "stage", "stg_af_events"], "alias": "stg_af_events", "checksum": {"name": "sha256", "checksum": "92e8adb6a02846917fa76b72e8f57d9e8316c3ed50ceb6ae7e439fbe37a481b6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "appsflyer_id": {"name": "appsflyer_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "media_source": {"name": "media_source", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_channel": {"name": "af_channel", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign": {"name": "campaign", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ip": {"name": "ip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "os_version": {"name": "os_version", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_version": {"name": "app_version", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sdk_version": {"name": "sdk_version", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "bundle_id": {"name": "bundle_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_value": {"name": "event_value", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "device_model": {"name": "device_model", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "device_brand": {"name": "device_brand", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_time_dt": {"name": "event_time_dt", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "install_time_dt": {"name": "install_time_dt", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "store_reinstall": {"name": "store_reinstall", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "install_app_store": {"name": "install_app_store", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/stage/stg_af_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.88766, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_af_events`", "raw_code": "SELECT\n    af.id,\n    af.appsflyer_id\n    -- , af_id.user_id\n    , media_source\n    , af_channel\n    , campaign\n    , country_code\n    , af.ip\n    , af.platform\n    , af.device_type\n    , af.os_version\n    , af.app_version\n    , af.sdk_version\n    , af.app_id\n    , af.app_name\n    , af.bundle_id\n    , af.event_name\n    , af.event_value\n    , af.device_model\n    , af.device_brand\n    , af.event_type\n    , af.event_time_dt\n    , af.install_time_dt\n    , af.store_reinstall\n    , af.install_app_store\nFROM {{source('wh_raw', 'mobile_appsflyer')}} AS af\nWHERE af.event_time_dt >= '2024-01-01'", "language": "sql", "refs": [], "sources": [["wh_raw", "mobile_appsflyer"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.wh_raw.mobile_appsflyer"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.int_users_af": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_users_af", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/intermediate/int_users_af.sql", "original_file_path": "models/push_problem/intermediate/int_users_af.sql", "unique_id": "model.dbt_octafx.int_users_af", "fqn": ["dbt_octafx", "push_problem", "intermediate", "int_users_af"], "alias": "int_users_af", "checksum": {"name": "sha256", "checksum": "56f6ace0f85b2443b1a2bcf6a91192bbaf9ebbb10476ab85c5624fabdf7fd370"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "registered_dt": {"name": "registered_dt", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "appsflyer_id": {"name": "appsflyer_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "install_time_dt": {"name": "install_time_dt", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/intermediate/int_users_af.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.890661, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_users_af`", "raw_code": "select\n    u.*,\n    af.appsflyer_id,\n    af.install_time_dt\nfrom {{ ref('stg_users') }} as u\ninner join\n    {{ ref('int_af_id') }} as af\n    on u.user_id = af.user_id", "language": "sql", "refs": [{"name": "stg_users", "package": null, "version": null}, {"name": "int_af_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.stg_users", "model.dbt_octafx.int_af_id"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.int_bloomreach_events_enhanced": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_bloomreach_events_enhanced", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/intermediate/int_bloomreach_events_enhanced.sql", "original_file_path": "models/push_problem/intermediate/int_bloomreach_events_enhanced.sql", "unique_id": "model.dbt_octafx.int_bloomreach_events_enhanced", "fqn": ["dbt_octafx", "push_problem", "intermediate", "int_bloomreach_events_enhanced"], "alias": "int_bloomreach_events_enhanced", "checksum": {"name": "sha256", "checksum": "7d76b5964740a763305bc98460e6e2a5d1cb471bb9e2cf0591c6459626204c9b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"type": {"name": "type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "internal_customer_id": {"name": "internal_customer_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ingest_timestamp": {"name": "ingest_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "action_type": {"name": "action_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_trigger": {"name": "campaign_trigger", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_id": {"name": "action_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "campaign_policy": {"name": "campaign_policy", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_name": {"name": "action_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sent_timestamp": {"name": "sent_timestamp", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "consent_category": {"name": "consent_category", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "integration_id": {"name": "integration_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "integration_name": {"name": "integration_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "message_type": {"name": "message_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sender": {"name": "sender", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sending_ip": {"name": "sending_ip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ip": {"name": "ip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "error": {"name": "error", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "redirect_to_screen": {"name": "redirect_to_screen", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "template_name": {"name": "template_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "attempts": {"name": "attempts", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "delta_time": {"name": "delta_time", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "os": {"name": "os", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "device": {"name": "device", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_url": {"name": "action_url", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "google_push_notification_id": {"name": "google_push_notification_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "registered_dt": {"name": "registered_dt", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/intermediate/int_bloomreach_events_enhanced.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.8894238, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_bloomreach_events_enhanced`", "raw_code": "SELECT\n    c.*,\n    cp.raw_properties.google_push_notification_id,\n    u.country_code,\n    u.registered_dt\nFROM {{ ref('stg_bloomreach_events') }} AS c\nINNER JOIN {{ ref('stg_users') }} AS u\n    ON safe_cast(c.user_id AS INTEGER) = u.user_id\n    AND TIMESTAMP_TRUNC(\n        c.timestamp, DAY\n    ) BETWEEN u.registered_dt AND u.registered_dt + INTERVAL 28 DAY\n\nLEFT JOIN {{ source('bloomreach', 'customers_properties') }} AS cp\n    ON c.internal_customer_id = cp.internal_id", "language": "sql", "refs": [{"name": "stg_bloomreach_events", "package": null, "version": null}, {"name": "stg_users", "package": null, "version": null}], "sources": [["bloomreach", "customers_properties"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.bloomreach.customers_properties", "model.dbt_octafx.stg_bloomreach_events", "model.dbt_octafx.stg_users"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.int_events_enum": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_events_enum", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/intermediate/int_events_enum.sql", "original_file_path": "models/push_problem/intermediate/int_events_enum.sql", "unique_id": "model.dbt_octafx.int_events_enum", "fqn": ["dbt_octafx", "push_problem", "intermediate", "int_events_enum"], "alias": "int_events_enum", "checksum": {"name": "sha256", "checksum": "4327e285797dd5e87e64c8a6adcfc6c6b83ad2bc990db3daf2d76e0d73d390bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}, "metrics": {"push_cnt": {"type": "count"}}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "registered_dt": {"name": "registered_dt", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "consent_category": {"name": "consent_category", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sent_timestamp": {"name": "sent_timestamp", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "action_name": {"name": "action_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_id": {"name": "action_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_trigger": {"name": "campaign_trigger", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_type": {"name": "action_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ingest_timestamp": {"name": "ingest_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "first_error_timestamp": {"name": "first_error_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "DATETIME", "constraints": [], "quote": null, "tags": []}, "first_error_event_number": {"name": "first_error_event_number", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/intermediate/int_events_enum.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.8903942, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_events_enum`", "raw_code": "with\nevents as (\n    select\n        *,\n        row_number() over (\n            partition by user_id order by cast(timestamp as datetime)\n        ) as event_number\n    from {{ ref('int_bloomreach_events_enhanced') }}\n    where\n        user_id in (select distinct user_id from {{ ref('int_notreg_user_id') }})\n        and status in ('delivered', 'clicked', 'failed')\n),\n\nfirst_not_registered as (\n    select\n        user_id,\n        min(cast(timestamp as datetime)) as first_error_timestamp,\n        min(event_number) as first_error_event_number\n    from events\n    where error = \"NotRegistered\"\n    group by user_id\n)\n\nselect\n    cast(e.user_id as numeric) as user_id,\n    country_code,\n    registered_dt,\n    status,\n    campaign_id,\n    consent_category,\n    sent_timestamp,\n    action_name,\n    action_id,\n    campaign_name,\n    platform,\n    campaign_trigger,\n    action_type,\n    ingest_timestamp,\n    timestamp,\n    type,\n    fnr.first_error_timestamp,\n    cast(fnr.first_error_event_number as numeric) as first_error_event_number\nfrom events as e\nleft join first_not_registered as fnr on e.user_id = fnr.user_id", "language": "sql", "refs": [{"name": "int_bloomreach_events_enhanced", "package": null, "version": null}, {"name": "int_notreg_user_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.int_bloomreach_events_enhanced", "model.dbt_octafx.int_notreg_user_id"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.countries": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "countries", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/intermediate/countries.sql", "original_file_path": "models/push_problem/intermediate/countries.sql", "unique_id": "model.dbt_octafx.countries", "fqn": ["dbt_octafx", "push_problem", "intermediate", "countries"], "alias": "countries", "checksum": {"name": "sha256", "checksum": "6b431a9798ec11e8fa3cce76fe64bee2ced16a4728093cc1d8fff05c541ed2f5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"country": {"name": "country", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "tier": {"name": "tier", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "tier_name": {"name": "tier_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/intermediate/countries.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "table"}, "created_at": 1714072383.8897011, "relation_name": "`analytics-147612`.`dev_gsokolov`.`countries`", "raw_code": "{{ config(materialized='table') }}\n\nSELECT\n    c.country,\n    c.code,\n    ct.tier,\n    concat(\"Tier \", ct.tier_id) as tier_name\nFROM {{source('wh_raw', 'countries')}} AS c\nLEFT JOIN\n    {{source('wh_raw', 'countries_tiers')}} AS ct\n    ON c.country = ct.country", "language": "sql", "refs": [], "sources": [["wh_raw", "countries"], ["wh_raw", "countries_tiers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.wh_raw.countries", "source.dbt_octafx.wh_raw.countries_tiers"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.int_notreg_pushes": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_notreg_pushes", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/intermediate/int_notreg_pushes.sql", "original_file_path": "models/push_problem/intermediate/int_notreg_pushes.sql", "unique_id": "model.dbt_octafx.int_notreg_pushes", "fqn": ["dbt_octafx", "push_problem", "intermediate", "int_notreg_pushes"], "alias": "int_notreg_pushes", "checksum": {"name": "sha256", "checksum": "f8860a9d65cd86d5b1df90c375b835dbd8bd2cb90274ad99d2ce63c68f3543a1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"type": {"name": "type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "internal_customer_id": {"name": "internal_customer_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ingest_timestamp": {"name": "ingest_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "action_type": {"name": "action_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_trigger": {"name": "campaign_trigger", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_id": {"name": "action_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "campaign_policy": {"name": "campaign_policy", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_name": {"name": "action_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sent_timestamp": {"name": "sent_timestamp", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "consent_category": {"name": "consent_category", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "integration_id": {"name": "integration_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "integration_name": {"name": "integration_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "message_type": {"name": "message_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sender": {"name": "sender", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sending_ip": {"name": "sending_ip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ip": {"name": "ip", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "status_code": {"name": "status_code", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "error": {"name": "error", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "symbol": {"name": "symbol", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "redirect_to_screen": {"name": "redirect_to_screen", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "template_name": {"name": "template_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "title": {"name": "title", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "attempts": {"name": "attempts", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "delta_time": {"name": "delta_time", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "os": {"name": "os", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "device": {"name": "device", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_url": {"name": "action_url", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}, "metrics": {"push_cnt": {"type": "count"}}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/intermediate/int_notreg_pushes.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.8936949, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_notreg_pushes`", "raw_code": "select *\nfrom {{ref('stg_pushes')}}\nwhere status = 'failed' and error = 'NotRegistered'", "language": "sql", "refs": [{"name": "stg_pushes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.stg_pushes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.int_pushes_enum": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_pushes_enum", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/intermediate/int_pushes_enum.sql", "original_file_path": "models/push_problem/intermediate/int_pushes_enum.sql", "unique_id": "model.dbt_octafx.int_pushes_enum", "fqn": ["dbt_octafx", "push_problem", "intermediate", "int_pushes_enum"], "alias": "int_pushes_enum", "checksum": {"name": "sha256", "checksum": "24dc84be8941d3efd3c5c13f10e0e09b873c1dc7c9af04047027407cd56af3db"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}, "metrics": {"push_cnt": {"type": "count"}}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "first_error_timestamp": {"name": "first_error_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "DATETIME", "constraints": [], "quote": null, "tags": []}, "next_delivered_timestamp": {"name": "next_delivered_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "DATETIME", "constraints": [], "quote": null, "tags": []}, "time_difference_in_seconds": {"name": "time_difference_in_seconds", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/intermediate/int_pushes_enum.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.8908968, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_pushes_enum`", "raw_code": "with\n    pushes as (\n        select\n            *,\n            row_number() over (\n                partition by user_id order by cast(timestamp as datetime)\n            ) as event_number\n        from {{ ref(\"int_bloomreach_events_enhanced\") }}\n        where user_id in (select distinct user_id from {{ ref(\"int_notreg_user_id\") }})\n        and (action_type = 'mobile notification' and status in ('delivered', 'clicked', 'failed'))\n    ),\n    first_not_registered as (\n        select\n            user_id,\n            min(cast(timestamp as datetime)) as first_error_timestamp,\n            min(event_number) as first_error_event_number\n        from pushes\n        where error = \"NotRegistered\"\n        group by user_id\n    ),\n    first_error_event as (\n    select\n        user_id,\n        min(cast(timestamp as datetime)) as first_error_timestamp\n    from\n        pushes\n    where\n        error = 'NotRegistered'\n    group by\n        user_id\n),\nnext_delivered_event as (\n    select\n        e.user_id,\n        min(cast(e.timestamp as datetime)) as next_delivered_timestamp\n    from\n        pushes e\n    join\n        first_error_event fee on e.user_id = fee.user_id\n    where\n        e.status = 'delivered' and cast(e.timestamp as datetime) > fee.first_error_timestamp\n    group by\n        e.user_id\n)\nselect\n    fee.user_id,\n    fee.first_error_timestamp,\n    nde.next_delivered_timestamp,\n    date_diff(nde.next_delivered_timestamp, fee.first_error_timestamp, second) as time_difference_in_seconds\nfrom\n    first_error_event fee\nleft join\n    next_delivered_event nde on fee.user_id = nde.user_id", "language": "sql", "refs": [{"name": "int_bloomreach_events_enhanced", "package": null, "version": null}, {"name": "int_notreg_user_id", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.int_bloomreach_events_enhanced", "model.dbt_octafx.int_notreg_user_id"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.int_notreg_user_id": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_notreg_user_id", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/intermediate/int_notreg_user_id.sql", "original_file_path": "models/push_problem/intermediate/int_notreg_user_id.sql", "unique_id": "model.dbt_octafx.int_notreg_user_id", "fqn": ["dbt_octafx", "push_problem", "intermediate", "int_notreg_user_id"], "alias": "int_notreg_user_id", "checksum": {"name": "sha256", "checksum": "1754d0c533308de4fea2ec4dd6ad1ddb79594baa6773c3d78c78bc52ceeb6891"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"joins": [{"join": "int_pushes_enum", "type": "inner", "sql_on": "${int_notreg_user_id.user_id} = ${int_pushes_enum.user_id}"}, {"join": "stg_users", "type": "inner", "sql_on": "${int_notreg_user_id.user_id} = ${stg_users.user_id}"}, {"join": "countries", "type": "left", "sql_on": "${stg_users.country_code} = ${countries.code}"}]}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}, "metrics": {"push_cnt": {"type": "count"}}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "first_error_timestamp": {"name": "first_error_timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "DATETIME", "constraints": [], "quote": null, "tags": []}}, "meta": {"joins": [{"join": "int_pushes_enum", "type": "inner", "sql_on": "${int_notreg_user_id.user_id} = ${int_pushes_enum.user_id}"}, {"join": "stg_users", "type": "inner", "sql_on": "${int_notreg_user_id.user_id} = ${stg_users.user_id}"}, {"join": "countries", "type": "left", "sql_on": "${stg_users.country_code} = ${countries.code}"}]}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/intermediate/int_notreg_user_id.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view", "meta": {"joins": [{"join": "int_pushes_enum", "type": "inner", "sql_on": "${int_notreg_user_id.user_id} = ${int_pushes_enum.user_id}"}, {"join": "stg_users", "type": "inner", "sql_on": "${int_notreg_user_id.user_id} = ${stg_users.user_id}"}, {"join": "countries", "type": "left", "sql_on": "${stg_users.country_code} = ${countries.code}"}]}}, "created_at": 1714072383.8918269, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_notreg_user_id`", "raw_code": "with\nfirst_not_registered as (\n    select\n        user_id,\n        min(cast(timestamp as datetime)) as first_error_timestamp\n    from {{ ref('int_notreg_pushes') }}\n    where error = \"NotRegistered\"\n    group by user_id\n)\n\nselect distinct\n    uep.user_id,\n    fnr.first_error_timestamp\nfrom {{ ref('int_notreg_pushes') }} as uep\ninner join first_not_registered as fnr on uep.user_id = fnr.user_id\ngroup by 1, 2", "language": "sql", "refs": [{"name": "int_notreg_pushes", "package": null, "version": null}, {"name": "int_notreg_pushes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.int_notreg_pushes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.int_af_id": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_af_id", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/intermediate/int_af_id.sql", "original_file_path": "models/push_problem/intermediate/int_af_id.sql", "unique_id": "model.dbt_octafx.int_af_id", "fqn": ["dbt_octafx", "push_problem", "intermediate", "int_af_id"], "alias": "int_af_id", "checksum": {"name": "sha256", "checksum": "50ee9b67025e3965107dbc6a10e17e7a6fde52cb591c322d388feb5c00ea4eea"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "appsflyer_id": {"name": "appsflyer_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "install_time_dt": {"name": "install_time_dt", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/push_problem/intermediate/int_af_id.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.89205, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_af_id`", "raw_code": "SELECT\n    cast(user_id as numeric) as user_id\n    , client_id AS appsflyer_id\n    , af.install_time_dt\nFROM (\n    SELECT\n        *\n        , ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY dt DESC) AS row_num\n    FROM {{source('wh_raw', 'users_cids_all')}}\n    WHERE user_id IN (SELECT DISTINCT user_id FROM {{ref('int_bloomreach_events_enhanced')}})\n) AS s\n    INNER JOIN {{source('wh_raw', 'mobile_appsflyer')}} AS af\n        ON s.client_id = af.appsflyer_id\n            AND af.event_time_dt >= '2024-01-01'\nWHERE s.row_num = 1", "language": "sql", "refs": [{"name": "int_bloomreach_events_enhanced", "package": null, "version": null}], "sources": [["wh_raw", "users_cids_all"], ["wh_raw", "mobile_appsflyer"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.wh_raw.users_cids_all", "source.dbt_octafx.wh_raw.mobile_appsflyer", "model.dbt_octafx.int_bloomreach_events_enhanced"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.user_deals": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "user_deals", "resource_type": "model", "package_name": "dbt_octafx", "path": "ab_stats/user_deals.sql", "original_file_path": "models/ab_stats/user_deals.sql", "unique_id": "model.dbt_octafx.user_deals", "fqn": ["dbt_octafx", "ab_stats", "user_deals"], "alias": "user_deals", "checksum": {"name": "sha256", "checksum": "ff628cd0b2a7654edaba8ccca09f252333dd3472dcbace6804d3a1d174d80115"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "variant": {"name": "variant", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "operation_id": {"name": "operation_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "symbol_name": {"name": "symbol_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "cmd": {"name": "cmd", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "volume": {"name": "volume", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "open_price": {"name": "open_price", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "close_price": {"name": "close_price", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "profit": {"name": "profit", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "open_time_dt": {"name": "open_time_dt", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "close_time_dt": {"name": "close_time_dt", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "trade_day": {"name": "trade_day", "description": "", "meta": {"dimension": {"type": "date"}}, "data_type": "DATE", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/ab_stats/user_deals.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.897412, "relation_name": "`analytics-147612`.`dev_gsokolov`.`user_deals`", "raw_code": "SELECT \n    u.user_id,\n    u.variant,\n    COALESCE(t.operation_id, 0) AS operation_id,\n    COALESCE(t.symbol_name, '') AS symbol_name,\n    COALESCE(t.cmd, 0) AS cmd,\n    COALESCE(t.volume, 0) AS volume,\n    COALESCE(t.open_price, 0) AS open_price,\n    COALESCE(t.close_price, 0) AS close_price,\n    COALESCE(t.profit, 0) AS profit,\n    COALESCE(t.open_time_dt, CAST('1970-01-01' AS TIMESTAMP)) AS open_time_dt,\n    COALESCE(t.close_time_dt, CAST('1970-01-01' AS TIMESTAMP)) AS close_time_dt,\n    COALESCE(DATE(DATE_TRUNC(t.open_time_dt, DAY)), DATE('1970-01-01')) AS trade_day\nFROM \n    {{ ref('ab_users') }} u\n    LEFT JOIN {{ source(\"wh_raw\", \"trading_real_raw\") }} AS t ON u.user_id = t.user_id\n        AND (DATE(t.open_time_dt) BETWEEN '{{ var('start') }}' AND '{{ var('end') }}')\n        AND (DATE(t.close_time_dt) BETWEEN '{{ var('start') }}' AND '{{ var('end') }}')\n        AND t.cmd < 2", "language": "sql", "refs": [{"name": "ab_users", "package": null, "version": null}], "sources": [["wh_raw", "trading_real_raw"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.wh_raw.trading_real_raw", "model.dbt_octafx.ab_users"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.ab_stats_grouped": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "ab_stats_grouped", "resource_type": "model", "package_name": "dbt_octafx", "path": "ab_stats/ab_stats_grouped.sql", "original_file_path": "models/ab_stats/ab_stats_grouped.sql", "unique_id": "model.dbt_octafx.ab_stats_grouped", "fqn": ["dbt_octafx", "ab_stats", "ab_stats_grouped"], "alias": "ab_stats_grouped", "checksum": {"name": "sha256", "checksum": "4046a5a9f4bbd4ec468ccc7909ac62168946635d14fcb355287b35d999f32708"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"variant": {"name": "variant", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_count": {"name": "user_count", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "total_vol": {"name": "total_vol", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "total_converted": {"name": "total_converted", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "total_deals": {"name": "total_deals", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "avg_vol_xauusd": {"name": "avg_vol_xauusd", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "std_volume_xauusd": {"name": "std_volume_xauusd", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_deals_xauusd": {"name": "total_deals_xauusd", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vol_xauusd": {"name": "vol_xauusd", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/ab_stats/ab_stats_grouped.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.897781, "relation_name": "`analytics-147612`.`dev_gsokolov`.`ab_stats_grouped`", "raw_code": "SELECT\n    variant,\n    COUNT(DISTINCT user_id) AS user_count,\n    ROUND(AVG({{ var('symbol_name') }}_vol), 4)\n        AS avg_vol_{{ var('symbol_name') }},\n    ROUND(STDDEV({{ var('symbol_name') }}_vol), 4)\n        AS std_volume_{{ var('symbol_name') }},\n    SUM({{ var('symbol_name') }}_deals_cnt)\n        AS total_deals_{{ var('symbol_name') }},\n    SUM({{ var('symbol_name') }}_vol) AS vol_{{ var('symbol_name') }},\n    SUM(symbol_volume) AS total_vol,\n    SUM({{ var('symbol_name') }}_converted) AS total_converted,\n    SUM(deals_cnt) AS total_deals\nFROM\n    {{ ref('ab_stats') }}\nGROUP BY variant", "language": "sql", "refs": [{"name": "ab_stats", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.ab_stats"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.ab_users": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "ab_users", "resource_type": "model", "package_name": "dbt_octafx", "path": "ab_stats/ab_users.sql", "original_file_path": "models/ab_stats/ab_users.sql", "unique_id": "model.dbt_octafx.ab_users", "fqn": ["dbt_octafx", "ab_stats", "ab_users"], "alias": "ab_users", "checksum": {"name": "sha256", "checksum": "1505537f10e40be8b1f52116b144d6a991b5b8e160f62b9440aedc176d03bd6a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "variant": {"name": "variant", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/ab_stats/ab_users.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.898398, "relation_name": "`analytics-147612`.`dev_gsokolov`.`ab_users`", "raw_code": "WITH\neligible AS (\n    SELECT\n        properties.variant AS variant,\n        SAFE_CAST(user_id AS INT64) AS user_id\n    FROM {{ source(\"bloomreach\", \"campaign\") }}\n    WHERE\n        campaign_id = \"{{ var('campaign_id') }}\"\n        AND action_id = {{ var('action_id') }}\n)\n\nSELECT\n    user_id,\n    variant\nFROM eligible\n{% if var('random_users') == true %}\n{% set random_users = [var('symbol_name'), \"random\"]|join('_') %}\nunion all\nselect safe_cast(user_id as int) as user_id, 'Variant B' as variant\nFROM \n{{ ref(random_users) }}\n{% endif %}", "language": "sql", "refs": [], "sources": [["bloomreach", "campaign"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.bloomreach.campaign"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.ab_stats": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "ab_stats", "resource_type": "model", "package_name": "dbt_octafx", "path": "ab_stats/ab_stats.sql", "original_file_path": "models/ab_stats/ab_stats.sql", "unique_id": "model.dbt_octafx.ab_stats", "fqn": ["dbt_octafx", "ab_stats", "ab_stats"], "alias": "ab_stats", "checksum": {"name": "sha256", "checksum": "405612f63fda2e82f933d921ba2dfe8c5646e2d3d66b6e1df5916f441bef2aaa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "variant": {"name": "variant", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "deals_cnt": {"name": "deals_cnt", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "deals_cnt_percentile": {"name": "deals_cnt_percentile", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "symbol_volume": {"name": "symbol_volume", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "symbol_volume_percentile": {"name": "symbol_volume_percentile", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "xauusd_vol": {"name": "xauusd_vol", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xauusd_vol_percentile": {"name": "xauusd_vol_percentile", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_xauusd_deal": {"name": "first_xauusd_deal", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xauusd_deals_cnt": {"name": "xauusd_deals_cnt", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xauusd_deals_cnt_percentile": {"name": "xauusd_deals_cnt_percentile", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "xauusd_converted": {"name": "xauusd_converted", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/ab_stats/ab_stats.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.898228, "relation_name": "`analytics-147612`.`dev_gsokolov`.`ab_stats`", "raw_code": "WITH stats AS (\n    SELECT\n        user_id,\n        variant,\n        COUNT(DISTINCT operation_id) AS deals_cnt,\n        COALESCE(SUM(volume), 0) AS symbol_volume,\n        COALESCE(\n            SUM(\n                CASE\n                    WHEN\n                        symbol_name = '{{ var('symbol_name') }}'\n                        THEN volume ELSE\n                        0\n                END\n            ),\n            0\n        ) AS {{ var('symbol_name') }}_vol,\n        MIN(\n            CASE\n                WHEN symbol_name = '{{ var('symbol_name') }}' THEN open_time_dt\n            END\n        )\n            AS first_{{ var('symbol_name') }}_deal,\n        COALESCE(\n            SUM(\n                CASE\n                    WHEN symbol_name = '{{ var('symbol_name') }}' THEN 1 ELSE 0\n                END\n            ),\n            0\n        )\n            AS {{ var('symbol_name') }}_deals_cnt,\n        IF(\n            COALESCE(\n                SUM(\n                    CASE\n                        WHEN\n                            symbol_name = '{{ var('symbol_name') }}'\n                            THEN 1 ELSE\n                            0\n                    END\n                ),\n                0\n            )\n            > 0,\n            1,\n            0\n        ) AS {{ var('symbol_name') }}_converted\n    FROM\n        {{ ref('user_deals') }}\n    GROUP BY\n        user_id, variant\n)\n\nSELECT\n    user_id,\n    variant,\n    deals_cnt,\n    PERCENT_RANK()\n        OVER (PARTITION BY variant ORDER BY deals_cnt)\n        AS deals_cnt_percentile,\n    symbol_volume,\n    PERCENT_RANK()\n        OVER (PARTITION BY variant ORDER BY symbol_volume)\n        AS symbol_volume_percentile,\n    {{ var('symbol_name') }}_vol,\n    PERCENT_RANK()\n        OVER (PARTITION BY variant ORDER BY {{ var('symbol_name') }}_vol)\n        AS {{ var('symbol_name') }}_vol_percentile,\n    COALESCE(CAST(first_{{ var('symbol_name') }}_deal AS STRING), 'N/A')\n        AS first_{{ var('symbol_name') }}_deal,\n    {{ var('symbol_name') }}_deals_cnt,\n    PERCENT_RANK()\n        OVER (PARTITION BY variant ORDER BY {{ var('symbol_name') }}_deals_cnt)\n        AS {{ var('symbol_name') }}_deals_cnt_percentile,\n    {{ var('symbol_name') }}_converted\nFROM\n    stats\nORDER BY\n    deals_cnt DESC", "language": "sql", "refs": [{"name": "user_deals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.user_deals"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.appsflyer_uninstall_events_report": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "appsflyer_uninstall_events_report", "resource_type": "model", "package_name": "dbt_octafx", "path": "sources/appsflyer_uninstall_events_report.sql", "original_file_path": "models/sources/appsflyer_uninstall_events_report.sql", "unique_id": "model.dbt_octafx.appsflyer_uninstall_events_report", "fqn": ["dbt_octafx", "sources", "appsflyer_uninstall_events_report"], "alias": "appsflyer_uninstall_events_report", "checksum": {"name": "sha256", "checksum": "480412a4be020fb72eb2c5e4d8ec00fffbf250ab2665e709a528d6a1122374ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"install_time": {"name": "install_time", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "event_time": {"name": "event_time", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "event_value": {"name": "event_value", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign": {"name": "campaign", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "appsflyer_id": {"name": "appsflyer_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "customer_user_id": {"name": "customer_user_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "os_version": {"name": "os_version", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_version": {"name": "app_version", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sdk_version": {"name": "sdk_version", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "bundle_id": {"name": "bundle_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "google_play_referrer": {"name": "google_play_referrer", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "google_play_click_time": {"name": "google_play_click_time", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "google_play_install_begin_time": {"name": "google_play_install_begin_time", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/sources/appsflyer_uninstall_events_report.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.899125, "relation_name": "`analytics-147612`.`dev_gsokolov`.`appsflyer_uninstall_events_report`", "raw_code": "with source as (\n\n    select * from {{ source('wh_raw', 'appsflyer_uninstall_events_report') }}\n\n),\n\nrenamed as (\n\n    select\n        install_time,\n        event_time,\n        event_value,\n        campaign,\n        campaign_id,\n        region,\n        country_code,\n        appsflyer_id,\n        customer_user_id,\n        platform,\n        os_version,\n        app_version,\n        sdk_version,\n        app_id,\n        app_name,\n        bundle_id,\n        user_agent,\n        google_play_referrer,\n        google_play_click_time,\n        google_play_install_begin_time\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["wh_raw", "appsflyer_uninstall_events_report"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.wh_raw.appsflyer_uninstall_events_report"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.tokens": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "tokens", "resource_type": "model", "package_name": "dbt_octafx", "path": "sources/tokens.sql", "original_file_path": "models/sources/tokens.sql", "unique_id": "model.dbt_octafx.tokens", "fqn": ["dbt_octafx", "sources", "tokens"], "alias": "tokens", "checksum": {"name": "sha256", "checksum": "823f0b3dffd437608726942c40b830f0af2b7c0e5ea59376b1452b97f74e0e92"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "google_push_notification_id": {"name": "google_push_notification_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/sources/tokens.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.8995242, "relation_name": "`analytics-147612`.`dev_gsokolov`.`tokens`", "raw_code": "WITH source AS (\n    SELECT\n        *\n    FROM\n        {{ source(\n            'bloomreach',\n            'customers_properties'\n        ) }}\n),\nrenamed AS (\n    SELECT\n        raw_properties.user_id,\n        raw_properties.google_push_notification_id\n    FROM\n        source\n)\nSELECT\n    *\nFROM\n    renamed", "language": "sql", "refs": [], "sources": [["bloomreach", "customers_properties"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.bloomreach.customers_properties"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.users_cids_all": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "users_cids_all", "resource_type": "model", "package_name": "dbt_octafx", "path": "sources/users_cids_all.sql", "original_file_path": "models/sources/users_cids_all.sql", "unique_id": "model.dbt_octafx.users_cids_all", "fqn": ["dbt_octafx", "sources", "users_cids_all"], "alias": "users_cids_all", "checksum": {"name": "sha256", "checksum": "bb6aa6d88aa7f30f1c87e18152f39f0d3649ff6a188c196789a5491405253b55"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml", "partition_by": {"field": "dt", "data_type": "timestamp", "granularity": "day"}, "clustering": ["user_id", "client_id"]}, "tags": [], "description": "", "columns": {"client_id": {"name": "client_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "src_info": {"name": "src_info", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/sources/users_cids_all.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view", "partition_by": {"field": "dt", "data_type": "timestamp", "granularity": "day"}, "clustering": ["user_id", "client_id"]}, "created_at": 1714072383.89936, "relation_name": "`analytics-147612`.`dev_gsokolov`.`users_cids_all`", "raw_code": "{{ config(\n        materialized='view',\n        partition_by={\n            \"field\": \"dt\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": \"day\"\n        },\n        clustering=[\"user_id\", \"client_id\"]\n    ) }}\n\nwith source as (\n\n    select * from {{ source('wh_raw', 'users_cids_all') }}\n\n),\n\nrenamed as (\n\n    select\n        client_id,\n        user_id,\n        dt,\n        src_info\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["wh_raw", "users_cids_all"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.wh_raw.users_cids_all"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.funnel_dbt": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "funnel_dbt", "resource_type": "model", "package_name": "dbt_octafx", "path": "funnels/funnel_dbt.sql", "original_file_path": "models/funnels/funnel_dbt.sql", "unique_id": "model.dbt_octafx.funnel_dbt", "fqn": ["dbt_octafx", "funnels", "funnel_dbt"], "alias": "funnel_dbt", "checksum": {"name": "sha256", "checksum": "7bcc6cb50fe5b1e341ea3a0cf601967a57493aef30ffea87f67c417fe4d63049"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"event_type": {"name": "event_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "unique_users": {"name": "unique_users", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "pct_conversion": {"name": "pct_conversion", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "pct_of_previous": {"name": "pct_of_previous", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/funnels/funnel_dbt.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072383.89975, "relation_name": "`analytics-147612`.`dev_gsokolov`.`funnel_dbt`", "raw_code": "{% set events =\n  dbt_product_analytics.event_stream(\n    from=ref('event_stream'),\n    event_type_col=\"event_nature\",\n    user_id_col=\"user_id\",\n    date_col=\"timestamp\"\n    )\n%}\n\n{% set steps = [\"communication\", \"deal\"] %}\n\n{{ dbt_product_analytics.funnel(steps=steps, event_stream=events) }}", "language": "sql", "refs": [{"name": "event_stream", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_product_analytics.event_stream", "macro.dbt_product_analytics.funnel"], "nodes": ["model.dbt_octafx.event_stream"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.funnel_deals": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "funnel_deals", "resource_type": "model", "package_name": "dbt_octafx", "path": "funnels/funnel_deals.sql", "original_file_path": "models/funnels/funnel_deals.sql", "unique_id": "model.dbt_octafx.funnel_deals", "fqn": ["dbt_octafx", "funnels", "funnel_deals"], "alias": "funnel_deals", "checksum": {"name": "sha256", "checksum": "6b79a406ae76b05e1aaa12762fa83dcbbf91860e6e29ef5f3cb919e3bf96c2bd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml", "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}, "clustering": ["user_id"]}, "tags": [], "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number", "primary_key": true}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "cmd": {"name": "cmd", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "symbol_name": {"name": "symbol_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/funnels/funnel_deals.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view", "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}, "clustering": ["user_id"]}, "created_at": 1714072383.899977, "relation_name": "`analytics-147612`.`dev_gsokolov`.`funnel_deals`", "raw_code": "{{ config(\n        materialized='view',\n        partition_by={\n            \"field\": \"timestamp\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": \"day\"\n        },\n        clustering=[\"user_id\"]\n    ) }}\n\nSELECT\n    user_id\n    , cmd\n    , open_time_dt AS timestamp\n    , symbol_name\nFROM {{source('wh_raw', 'trading_real_raw')}}\nWHERE open_time_dt >= TIMESTAMP_TRUNC(TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY), MONTH)\n    AND open_time_dt < TIMESTAMP_TRUNC(CURRENT_TIMESTAMP(), DAY) and cmd < 2\n    and symbol_name = 'XAUUSD'\nGROUP BY user_id, cmd, timestamp, symbol_name", "language": "sql", "refs": [], "sources": [["wh_raw", "trading_real_raw"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.wh_raw.trading_real_raw"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.funnel_bloomreach_events": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "funnel_bloomreach_events", "resource_type": "model", "package_name": "dbt_octafx", "path": "funnels/funnel_bloomreach_events.sql", "original_file_path": "models/funnels/funnel_bloomreach_events.sql", "unique_id": "model.dbt_octafx.funnel_bloomreach_events", "fqn": ["dbt_octafx", "funnels", "funnel_bloomreach_events"], "alias": "funnel_bloomreach_events", "checksum": {"name": "sha256", "checksum": "69f84487cd6afc499a0e1365848664f2de1a559575e9794e6a51897473d3ed12"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml", "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}, "clustering": ["user_id"]}, "tags": [], "description": "", "columns": {"action_id": {"name": "action_id", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "action_name": {"name": "action_name", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_type": {"name": "action_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_number": {"name": "event_number", "description": "", "meta": {"dimension": {"type": "number"}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number", "primary_key": true}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "variant": {"name": "variant", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/funnels/funnel_bloomreach_events.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view", "partition_by": {"field": "timestamp", "data_type": "timestamp", "granularity": "day"}, "clustering": ["user_id"]}, "created_at": 1714072383.900397, "relation_name": "`analytics-147612`.`dev_gsokolov`.`funnel_bloomreach_events`", "raw_code": "{{ config(\n        materialized='view',\n        partition_by={\n            \"field\": \"timestamp\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": \"day\"\n        },\n        clustering=[\"user_id\"]\n    ) }}\n\nSELECT\n  action_id,\n  properties.action_name,\n  properties.action_type,\n  campaign_id,\n  event_number,\n  properties.platform,\n  properties.status,\n  timestamp,\n  user_id,\n  properties.variant\nFROM\n  (\n    SELECT\n      *,\n      ROW_NUMBER() OVER (\n        PARTITION BY user_id\n        ORDER BY\n          timestamp ASC\n      ) AS event_number\n    FROM\n      {{source('bloomreach', 'campaign')}}\n    WHERE\n      timestamp >= '2024-04-01' and \n      properties.action_type in ('mobile notification', 'email', 'split')\n  ) AS bloomreach_events\nGROUP BY\n  action_id,\n  properties.action_name,\n  properties.action_type,\n  campaign_id,\n  event_number,\n  properties.platform,\n  properties.status,\n  timestamp,\n  user_id,\n  properties.variant", "language": "sql", "refs": [], "sources": [["bloomreach", "campaign"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.bloomreach.campaign"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.dbt_octafx.XNGUSD_random": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "XNGUSD_random", "resource_type": "seed", "package_name": "dbt_octafx", "path": "XNGUSD_random.csv", "original_file_path": "seeds/XNGUSD_random.csv", "unique_id": "seed.dbt_octafx.XNGUSD_random", "fqn": ["dbt_octafx", "XNGUSD_random"], "alias": "XNGUSD_random", "checksum": {"name": "sha256", "checksum": "0df6f1a236b79869834e093cfae9fc6119052c80bb5288087ce23b94f62cb63f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072382.418862, "relation_name": "`analytics-147612`.`dev_gsokolov`.`XNGUSD_random`", "raw_code": "", "root_path": "/Users/gsokolov/Library/CloudStorage/Dropbox/dbt_octafx", "depends_on": {"macros": []}}, "seed.dbt_octafx.ETHUSD_random": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "ETHUSD_random", "resource_type": "seed", "package_name": "dbt_octafx", "path": "ETHUSD_random.csv", "original_file_path": "seeds/ETHUSD_random.csv", "unique_id": "seed.dbt_octafx.ETHUSD_random", "fqn": ["dbt_octafx", "ETHUSD_random"], "alias": "ETHUSD_random", "checksum": {"name": "sha256", "checksum": "86b9c06ece51e774cd344277efad196a6c40bf7f960770d2760384be60ac18ea"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072382.42006, "relation_name": "`analytics-147612`.`dev_gsokolov`.`ETHUSD_random`", "raw_code": "", "root_path": "/Users/gsokolov/Library/CloudStorage/Dropbox/dbt_octafx", "depends_on": {"macros": []}}, "operation.dbt_octafx.dbt_octafx-on-run-end-0": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "dbt_octafx-on-run-end-0", "resource_type": "operation", "package_name": "dbt_octafx", "path": "hooks/dbt_octafx-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.dbt_octafx.dbt_octafx-on-run-end-0", "fqn": ["dbt_octafx", "hooks", "dbt_octafx-on-run-end-0"], "alias": "dbt_octafx-on-run-end-0", "checksum": {"name": "sha256", "checksum": "3e4a17e0c1a161218e3e7071fe87c4772c39c72f1335bfb6437f40b358c4e9d6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "dbt-osmosis": "{model}.yml"}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714072382.432298, "relation_name": null, "raw_code": "{{ dq_tools.store_test_results(results) }}", "language": "sql", "refs": [{"name": "dq_issue_log", "package": "dq_tools", "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dq_tools.store_test_results"], "nodes": ["model.dq_tools.dq_issue_log"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "model.amplitude_source.stg_amplitude__event": {"database": "analytics-147612", "schema": "dev_gsokolov__source_amplitude", "name": "stg_amplitude__event", "resource_type": "model", "package_name": "amplitude_source", "path": "stg_amplitude__event.sql", "original_file_path": "models/stg_amplitude__event.sql", "unique_id": "model.amplitude_source.stg_amplitude__event", "fqn": ["amplitude_source", "stg_amplitude__event"], "alias": "stg_amplitude__event", "checksum": {"name": "sha256", "checksum": "088af21c198b83e032458cc2179b2a35b6d8bed9961376023f2d4b0b2f2901e2"}, "config": {"enabled": true, "alias": null, "schema": "_source_amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table of all events tracked by Amplitude. Definitions are sourced from the Amplitude documentation [here](https://www.docs.developers.amplitude.com/analytics/apis/http-v2-api/#upload-request-body-parameters).", "columns": {"unique_event_id": {"name": "unique_event_id", "description": "A unique key for each event, concatenating event_id, device_id, client_event_time, and amplitude_user_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "A counter that distinguishes events.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unique_session_id": {"name": "unique_session_id", "description": "A unique key for each session, concatenating user_id and session_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amplitude_id": {"name": "amplitude_id", "description": "An internal ID used to identify unique users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amplitude_user_id": {"name": "amplitude_user_id", "description": "Unique key for each user, which is user_id by default. If user_id does not exist, the package will use amplitude_id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "(Android) Google Play Services advertising ID (AdID). This usually is wiped after ingestion and therefore will be blank.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app": {"name": "app", "description": "Project ID found in your project's Settings page.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "City where the event was registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "client_event_time": {"name": "client_event_time", "description": "Local timestamp (UTC) of when the device logged the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "client_upload_time": {"name": "client_upload_time", "description": "The local timestamp (UTC) of when the device uploaded the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Country where event was registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "Dictionary where certain fields such as first_event and merged_amplitude_id are stored. Ex, {\"first_event\":true}.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_brand": {"name": "device_brand", "description": "Brand of device where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_carrier": {"name": "device_carrier", "description": "Carrier of device where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_family": {"name": "device_family", "description": "Device family. Ex, Apple iPhone.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "The device specific identifier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_manufacturer": {"name": "device_manufacturer", "description": "Manufacturer of device where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_model": {"name": "device_model", "description": "The model of device where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "Type of device where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dma": {"name": "dma", "description": "Designated marketing area (DMA).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_properties": {"name": "event_properties", "description": "Event properties are attributes of the events your users fire, and which you then send to Amplitude. Each event will have its own set of event properties. The nature of these properties depends on both the type of product you have, and the specific information you're most interested in discovering. For instance, if Swipe is an event you're tracking, the event property Direction could have the values Left or Right. Some example event properties are description, category, type, duration, level, percent completed, count, source, status, number, lives, authenticated, error number, rank, action, and mode. \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_time": {"name": "event_time", "description": "Amplitude timestamp (UTC) which is the client_event_time adjusted by the difference between server_received_time and client_upload_time, specifically: event_time = client_event_time + (server_received_time - client_upload_time) 2015-08-10T12:00:00.000000 We use this timestamp to organize events on Amplitude charts. Note: If the difference between server_received_time and client_upload_time is less than 60 seconds, the event_time will not be adjusted and will equal the client_event_time.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_day": {"name": "event_day", "description": "The day of the event time, in date format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The assigned type of event. Example 'Add Friend'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type_id": {"name": "event_type_id", "description": "Internal identifier on Amplitude.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_properties": {"name": "group_properties", "description": "A dictionary of key-value pairs that represent data tied to the group. Each distinct value appears as a group segment on the Amplitude dashboard. You can store property values in an array, and date values are transformed into string values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_types": {"name": "group_types", "description": "Group types. \"Groups\" in the source table, renamed here. See the [Accounts documentation](https://help.amplitude.com/hc/en-us/articles/115001765532-Accounts) for more information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "idfa": {"name": "idfa", "description": "(iOS) Identifier for Advertiser. This usually is wiped after ingestion and therefore will be blank.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_insert_id": {"name": "_insert_id", "description": "A unique identifier for the event. Amplitude deduplicates subsequent events sent with the same device_id and insert_id within the past 7 days. Amplitude recommends generating a UUID or using some combination of device_id, user_id, event_type, event_id, and time.  \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "The IP address of the device which triggered the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_attribution_event": {"name": "is_attribution_event", "description": "Boolean of boolean of whether event was an attribution event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "The language set by the user.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "library": {"name": "library", "description": "Library being used to send the event data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_lat": {"name": "location_lat", "description": "Latitude where event was registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_lng": {"name": "location_lng", "description": "Longitude where event was registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_name": {"name": "os_name", "description": "OS name where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_version": {"name": "os_version", "description": "OS version where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_paying": {"name": "is_paying", "description": "Boolean of boolean of whether the user has ever logged any revenue, otherwise '(none)'. Note the property value can be modified via the\\_Identify API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "Platform of the device where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "processed_time": {"name": "processed_time", "description": "Time of when event was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "The identifier of the project.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "Region where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "The schema ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "server_received_time": {"name": "server_received_time", "description": "Amplitude timestamp (UTC) of when servers received the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "server_upload_time": {"name": "server_upload_time", "description": "Amplitude timestamp (UTC) of when the event data was uploaded to Amplitude servers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "The session start time in milliseconds since epoch.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_version": {"name": "start_version", "description": "App version the user was first tracked on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_creation_time": {"name": "user_creation_time", "description": "Event_time (UTC) of the user's first event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "A readable ID specified by you. Amplitude uses a combination of three different methods to identify your users: device IDs, Amplitude ID, and user IDs. The first comes directly from your users' devices, while the second is an ID that Amplitude automatically creates once it has enough information to conclusively identify a unique user. The user ID, however, is something you'd set up. In Amplitude, a user ID is a unique identifier applied to individual users. Using them is optional, but recommended: your product should set a user ID once a user has created an account, logged in, or is otherwise identified in your product. Amplitude can use a user ID to reconcile events across multiple devices under the same user ID. Additionally, a user's event data will be merged on the backend so that all anonymous events prior to the assignment of a user ID will be connected to the correct user. For this reason, you can wait to assign user IDs if that makes sense for your product. Conversely, this is also why you should not set user IDs for anonymous users. Once set, user IDs in Amplitude cannot be changed.Once set, user IDs in Amplitude cannot be changed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_properties": {"name": "user_properties", "description": "An attribute that describes a useful detail about the user it's attached to. Amplitude sends user properties with every event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "A unique identifier per row (event sent).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "version_name": {"name": "version_name", "description": "The app version name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amplitude_source://models/stg_amplitude.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "_source_amplitude", "materialized": "table"}, "created_at": 1714072383.923711, "relation_name": "`analytics-147612`.`dev_gsokolov__source_amplitude`.`stg_amplitude__event`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_amplitude__event_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amplitude__event_tmp')),\n                staging_columns=get_event_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        id as event_id,\n        cast(event_time as {{ dbt.type_timestamp() }}) as event_time,\n        cast({{ dbt.date_trunc('day', 'event_time') }} as date) as event_day,\n        {{ dbt_utils.generate_surrogate_key(['user_id','session_id']) }} as unique_session_id,\n        coalesce(cast(user_id as {{ dbt.type_string() }}), (cast(amplitude_id as {{ dbt.type_string() }}))) as amplitude_user_id,\n        event_properties,\n        event_type,\n        event_type_id,\n        group_types,\n        group_properties,\n        session_id,\n        cast(user_id as {{ dbt.type_string() }}) as user_id, \n        user_properties,\n        cast(amplitude_id as {{ dbt.type_string() }}) as amplitude_id,\n        _insert_id,\n        ad_id,\n        app,\n        project_name,\n        cast(client_event_time as {{ dbt.type_timestamp() }}) as client_event_time,\n        cast(client_upload_time as {{ dbt.type_timestamp() }}) as client_upload_time,\n        city,\n        country,\n        data,\n        device_brand,\n        device_carrier,\n        device_family,\n        device_id,\n        device_manufacturer,\n        device_model,\n        device_type,\n        dma,\n        idfa,\n        ip_address,\n        language,\n        location_lat,\n        location_lng,\n        os_name,\n        os_version,\n        is_attribution_event,\n        library,\n        paying as is_paying,\n        platform,\n        cast(processed_time as {{ dbt.type_timestamp() }}) as processed_time,\n        region,\n        schema,\n        cast(server_received_time as {{ dbt.type_timestamp() }}) as server_received_time,\n        cast(server_upload_time as {{ dbt.type_timestamp() }}) as server_upload_time,\n        start_version,\n        cast(user_creation_time as {{ dbt.type_timestamp() }}) as user_creation_time,\n        uuid,\n        version_name,\n        _fivetran_synced\n    from fields\n\n    where cast({{ dbt.date_trunc('day', 'event_time') }} as date) >= {{ \"cast('\" ~ var('amplitude__date_range_start',  '2020-01-01') ~ \"' as date)\" }} -- filter to records past a specific date\n    and cast({{ dbt.date_trunc('day', 'event_time') }} as date) <= cast({{ \"'\" ~ var('amplitude__date_range_end',[]) ~ \"'\" if var('amplitude__date_range_end',[]) else dbt.dateadd('month', 1, dbt.date_trunc('day', dbt.current_timestamp_backcompat())) }} as date) -- filter to records before a specific date\n\n),\n\nsurrogate as (\n\n    select\n        *,\n        {{ dbt_utils.generate_surrogate_key(['event_id','device_id','client_event_time','amplitude_user_id']) }} as unique_event_id\n    from final\n)\n\nselect *\nfrom surrogate", "language": "sql", "refs": [{"name": "stg_amplitude__event_tmp", "package": null, "version": null}, {"name": "stg_amplitude__event_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amplitude_source.get_event_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt.type_timestamp", "macro.dbt.date_trunc", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.type_string", "macro.dbt.current_timestamp_backcompat", "macro.dbt.dateadd"], "nodes": ["model.amplitude_source.stg_amplitude__event_tmp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.amplitude_source.stg_amplitude__event_type": {"database": "analytics-147612", "schema": "dev_gsokolov__source_amplitude", "name": "stg_amplitude__event_type", "resource_type": "model", "package_name": "amplitude_source", "path": "stg_amplitude__event_type.sql", "original_file_path": "models/stg_amplitude__event_type.sql", "unique_id": "model.amplitude_source.stg_amplitude__event_type", "fqn": ["amplitude_source", "stg_amplitude__event_type"], "alias": "stg_amplitude__event_type", "checksum": {"name": "sha256", "checksum": "3c8e154e7810c2c2913068aa6be97948b3fb1e9de17278584b4535169969319d"}, "config": {"enabled": true, "alias": null, "schema": "_source_amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table of all events types. Definitions are sourced from the Amplitude documentation [here](https://www.docs.developers.amplitude.com/analytics/apis/dashboard-rest-api/?h=flow_hidden).", "columns": {"unique_event_type_id": {"name": "unique_event_type_id", "description": "A unique key for each event, concatenating event_type_id and project_name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type_id": {"name": "event_type_id", "description": "Event type ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_autohidden": {"name": "is_autohidden", "description": "Boolean of whether event type is hidden.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Boolean of whether event type is deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display": {"name": "display", "description": "The display name of the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_flow_hidden": {"name": "is_flow_hidden", "description": "Boolean of whether the event is hidden from Pathfinder/Pathfinder Users or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_hidden": {"name": "is_hidden", "description": "Boolean of whether the event is hidden or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_in_waitroom": {"name": "is_in_waitroom", "description": "Boolean of whether event type is in waitroom.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type_name": {"name": "event_type_name", "description": "Event type name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_non_active": {"name": "is_non_active", "description": "Boolean of whether the event is marked inactive or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Project name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_timeline_hidden": {"name": "is_timeline_hidden", "description": "Boolean of whether the event is hidden or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "totals": {"name": "totals", "description": "The total number of times the event has happened this week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "totals_delta": {"name": "totals_delta", "description": "Represents the change in event volume from the previous week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "Name of the event in the raw data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_waitroom_approved": {"name": "is_waitroom_approved", "description": "Boolean of whether is waitroom approved.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amplitude_source://models/stg_amplitude.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "_source_amplitude", "materialized": "table"}, "created_at": 1714072383.92412, "relation_name": "`analytics-147612`.`dev_gsokolov__source_amplitude`.`stg_amplitude__event_type`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_amplitude__event_type_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_amplitude__event_type_tmp')),\n                staging_columns=get_event_type_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select\n        id as event_type_id,\n        name as event_type_name,\n        project_name,\n        display,\n        totals,\n        totals_delta,\n        value,\n        flow_hidden as is_flow_hidden,\n        hidden as is_hidden,\n        in_waitroom as is_in_waitroom,\n        non_active as is_non_active,\n        autohidden as is_autohidden,\n        deleted as is_deleted,\n        timeline_hidden as is_timeline_hidden,\n        waitroom_approved as is_waitroom_approved,\n        _fivetran_deleted,\n        _fivetran_synced\n    from fields\n),\n\nsurrogate as (\n\n    select\n        *,\n        {{ dbt_utils.generate_surrogate_key(['event_type_id','project_name']) }} as unique_event_type_id\n    from final\n)\n\nselect *\nfrom surrogate", "language": "sql", "refs": [{"name": "stg_amplitude__event_type_tmp", "package": null, "version": null}, {"name": "stg_amplitude__event_type_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.amplitude_source.get_event_type_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.amplitude_source.stg_amplitude__event_type_tmp"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.amplitude_source.stg_amplitude__event_tmp": {"database": "analytics-147612", "schema": "dev_gsokolov__source_amplitude", "name": "stg_amplitude__event_tmp", "resource_type": "model", "package_name": "amplitude_source", "path": "tmp/stg_amplitude__event_tmp.sql", "original_file_path": "models/tmp/stg_amplitude__event_tmp.sql", "unique_id": "model.amplitude_source.stg_amplitude__event_tmp", "fqn": ["amplitude_source", "tmp", "stg_amplitude__event_tmp"], "alias": "stg_amplitude__event_tmp", "checksum": {"name": "sha256", "checksum": "6ad43717502fb55c95be8a00eb132a0002a9b0021ce33fe301345069b44e9bb5"}, "config": {"enabled": true, "alias": null, "schema": "_source_amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "_source_amplitude", "materialized": "view"}, "created_at": 1714072382.739024, "relation_name": "`analytics-147612`.`dev_gsokolov__source_amplitude`.`stg_amplitude__event_tmp`", "raw_code": "select * \nfrom {{ var('event') }}", "language": "sql", "refs": [], "sources": [["amplitude", "event"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.amplitude_source.amplitude.event"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.amplitude_source.stg_amplitude__event_type_tmp": {"database": "analytics-147612", "schema": "dev_gsokolov__source_amplitude", "name": "stg_amplitude__event_type_tmp", "resource_type": "model", "package_name": "amplitude_source", "path": "tmp/stg_amplitude__event_type_tmp.sql", "original_file_path": "models/tmp/stg_amplitude__event_type_tmp.sql", "unique_id": "model.amplitude_source.stg_amplitude__event_type_tmp", "fqn": ["amplitude_source", "tmp", "stg_amplitude__event_type_tmp"], "alias": "stg_amplitude__event_type_tmp", "checksum": {"name": "sha256", "checksum": "73af32e3d898e70fb7219bf4c017a6ab7feedfb78d7ce07f80ccb1f67a6ca7df"}, "config": {"enabled": true, "alias": null, "schema": "_source_amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "_source_amplitude", "materialized": "view"}, "created_at": 1714072382.744171, "relation_name": "`analytics-147612`.`dev_gsokolov__source_amplitude`.`stg_amplitude__event_type_tmp`", "raw_code": "select * \nfrom {{ var('event_type') }}", "language": "sql", "refs": [], "sources": [["amplitude", "event_type"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.amplitude_source.amplitude.event_type"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowplow_normalize.snowplow_normalize_incremental_manifest": {"database": "analytics-147612", "schema": "dev_gsokolov_snowplow_manifest", "name": "snowplow_normalize_incremental_manifest", "resource_type": "model", "package_name": "snowplow_normalize", "path": "base/manifest/snowplow_normalize_incremental_manifest.sql", "original_file_path": "models/base/manifest/snowplow_normalize_incremental_manifest.sql", "unique_id": "model.snowplow_normalize.snowplow_normalize_incremental_manifest", "fqn": ["snowplow_normalize", "base", "manifest", "snowplow_normalize_incremental_manifest"], "alias": "snowplow_normalize_incremental_manifest", "checksum": {"name": "sha256", "checksum": "1517f7221b03698c78c1417a0582697480ecb371fa25682952c00b20bd7d4218"}, "config": {"enabled": true, "alias": null, "schema": "snowplow_manifest", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta", "bind": false}, "tags": [], "description": "This incremental table is a manifest of the timestamp of the latest event consumed per model within the `snowplow-normalize` package as well as any models leveraging the incremental framework provided by the package. The latest event's timestamp is based off `collector_tstamp`. This table is used to determine what events should be processed in the next run of the model.", "columns": {"model": {"name": "model", "description": "The name of the model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": ["primary-key"]}, "last_success": {"name": "last_success", "description": "The latest event consumed by the model, based on `collector_tstamp`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_normalize://models/base/manifest/base_manifest.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "file_format": "delta", "bind": false, "schema": "snowplow_manifest", "full_refresh": null}, "created_at": 1714072383.9850738, "relation_name": "`analytics-147612`.`dev_gsokolov_snowplow_manifest`.`snowplow_normalize_incremental_manifest`", "raw_code": "{#\nCopyright (c) 2022-present Snowplow Analytics Ltd. All rights reserved.\nThis program is licensed to you under the Snowplow Personal and Academic License Version 1.0,\nand you may not use this file except in compliance with the Snowplow Personal and Academic License Version 1.0.\nYou may obtain a copy of the Snowplow Personal and Academic License Version 1.0 at https://docs.snowplow.io/personal-and-academic-license-1.0/\n#}\n\n{{\n  config(\n    materialized='incremental',\n    full_refresh=snowplow_normalize.allow_refresh()\n  )\n}}\n\n-- Boilerplate to generate table.\n-- Table updated as part of end-run hook\n\n{{ snowplow_utils.base_create_snowplow_incremental_manifest() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowplow_normalize.allow_refresh", "macro.snowplow_utils.base_create_snowplow_incremental_manifest"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowplow_normalize.snowplow_normalize_base_events_this_run": {"database": "analytics-147612", "schema": "dev_gsokolov_scratch", "name": "snowplow_normalize_base_events_this_run", "resource_type": "model", "package_name": "snowplow_normalize", "path": "base/scratch/snowplow_normalize_base_events_this_run.sql", "original_file_path": "models/base/scratch/snowplow_normalize_base_events_this_run.sql", "unique_id": "model.snowplow_normalize.snowplow_normalize_base_events_this_run", "fqn": ["snowplow_normalize", "base", "scratch", "snowplow_normalize_base_events_this_run"], "alias": "snowplow_normalize_base_events_this_run", "checksum": {"name": "sha256", "checksum": "bb593dca9f2976be0d12321e9be2aa49687a296a88546c2e4f7a9dd8f6cc67cd"}, "config": {"enabled": true, "alias": null, "schema": "scratch", "database": null, "tags": ["scratch", "this_run"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta", "bind": false, "sql_header": "\n\n"}, "tags": ["scratch", "this_run"], "description": "For any given run, this table contains all required events to be consumed by subsequent nodes in the Snowplow dbt normalize package. This is a cleaned, deduped dataset, containing all columns from the raw events table.\n\n**Note: This table should be used as the input to any custom modules that require event level data, rather than selecting straight from `atomic.events`**", "columns": {"app_id": {"name": "app_id", "description": "Application ID e.g. \u2018angry-birds\u2019 is used to distinguish different applications that are being tracked by the same Snowplow stack, e.g. production versus dev.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "Platform e.g. \u2018web\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "etl_tstamp": {"name": "etl_tstamp", "description": "Timestamp event began ETL e.g. \u20182017-01-26 00:01:25.292\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collector_tstamp": {"name": "collector_tstamp", "description": "Time stamp for the event recorded by the collector e.g. \u20182013-11-26 00:02:05\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_created_tstamp": {"name": "dvce_created_tstamp", "description": "Timestamp event was recorded on the client device e.g. \u20182013-11-26 00:03:57.885\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event": {"name": "event", "description": "The type of event recorded e.g. \u2018page_view\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "A UUID for each event e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": ["primary-key"]}, "txn_id": {"name": "txn_id", "description": "Transaction ID set client-side, used to de-dupe records e.g. 421828", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name_tracker": {"name": "name_tracker", "description": "Tracker namespace e.g. \u2018sp1\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "v_tracker": {"name": "v_tracker", "description": "Tracker version e.g. \u2018js-3.0.0\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "v_collector": {"name": "v_collector", "description": "Collector version e.g. \u2018ssc-2.1.0-kinesis\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "v_etl": {"name": "v_etl", "description": "ETL version e.g. \u2018snowplow-micro-1.1.0-common-1.4.2\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Unique ID set by business e.g. \u2018jon.doe@email.com\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_ipaddress": {"name": "user_ipaddress", "description": "User IP address e.g. \u201892.231.54.234\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_fingerprint": {"name": "user_fingerprint", "description": "A user fingerprint generated by looking at the individual browser features e.g. 2161814971", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "domain_sessionidx": {"name": "domain_sessionidx", "description": "A visit / session index e.g. 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "network_userid": {"name": "network_userid", "description": "User ID set by Snowplow using 3rd party cookie e.g. \u2018ecdff4d0-9175-40ac-a8bb-325c49733607\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_country": {"name": "geo_country", "description": "ISO 3166-1 code for the country the visitor is located in e.g. \u2018GB\u2019, \u2018US\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_region": {"name": "geo_region", "description": "ISO-3166-2 code for country region the visitor is in e.g. \u2018I9\u2019, \u2018TX\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_city": {"name": "geo_city", "description": "City the visitor is in e.g. \u2018New York\u2019, \u2018London\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_zipcode": {"name": "geo_zipcode", "description": "Postcode the visitor is in e.g. \u201894109\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_latitude": {"name": "geo_latitude", "description": "Visitor location latitude e.g. 37.443604", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_longitude": {"name": "geo_longitude", "description": "Visitor location longitude e.g. -122.4124", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_region_name": {"name": "geo_region_name", "description": "Visitor region name e.g. \u2018Florida\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_isp": {"name": "ip_isp", "description": "Visitor\u2019s ISP e.g. \u2018FDN Communications\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_organization": {"name": "ip_organization", "description": "Organization associated with the visitor\u2019s IP address \u2013 defaults to ISP name if none is found e.g. \u2018Bouygues Telecom\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_domain": {"name": "ip_domain", "description": "Second level domain name associated with the visitor\u2019s IP address e.g. \u2018nuvox.net\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_netspeed": {"name": "ip_netspeed", "description": "Visitor\u2019s connection type e.g. \u2018Cable/DSL\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_url": {"name": "page_url", "description": "The page URL e.g. \u2018http://www.example.com\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_title": {"name": "page_title", "description": "Web page title e.g. \u2018Snowplow Docs \u2013 Understanding the structure of Snowplow data\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_referrer": {"name": "page_referrer", "description": "URL of the referrer e.g. \u2018http://www.referrer.com\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlscheme": {"name": "page_urlscheme", "description": "Scheme aka protocol e.g. \u2018https\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlhost": {"name": "page_urlhost", "description": "Host aka domain e.g. \u2018\u201cwww.snowplow.io\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlport": {"name": "page_urlport", "description": "Port if specified, 80 if not 80", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlpath": {"name": "page_urlpath", "description": "Path to page e.g. \u2018/product/index.html\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlquery": {"name": "page_urlquery", "description": "Querystring e.g. \u2018id=GTM-DLRG\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlfragment": {"name": "page_urlfragment", "description": "Fragment aka anchor e.g. \u20184-conclusion\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlscheme": {"name": "refr_urlscheme", "description": "Referer scheme e.g. \u2018http\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlhost": {"name": "refr_urlhost", "description": "Referer host e.g. \u2018www.bing.com\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlport": {"name": "refr_urlport", "description": "Referer port e.g. 80", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlpath": {"name": "refr_urlpath", "description": "Referer page path e.g. \u2018/images/search\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlquery": {"name": "refr_urlquery", "description": "Referer URL querystring e.g. \u2018q=psychic+oracle+cards\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlfragment": {"name": "refr_urlfragment", "description": "Referer URL fragment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_medium": {"name": "refr_medium", "description": "Type of referer e.g. \u2018search\u2019, \u2018internal\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_source": {"name": "refr_source", "description": "Name of referer if recognised e.g. \u2018Bing images\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_term": {"name": "refr_term", "description": "Keywords if source is a search engine e.g. \u2018psychic oracle cards\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_medium": {"name": "mkt_medium", "description": "Type of traffic source e.g. \u2018cpc\u2019, \u2018affiliate\u2019, \u2018organic\u2019, \u2018social\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_source": {"name": "mkt_source", "description": "The company / website where the traffic came from e.g. \u2018Google\u2019, \u2018Facebook\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_term": {"name": "mkt_term", "description": "Any keywords associated with the referrer e.g. \u2018new age tarot decks\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_content": {"name": "mkt_content", "description": "The content of the ad. (Or an ID so that it can be looked up.) e.g. 13894723", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_campaign": {"name": "mkt_campaign", "description": "The campaign ID e.g. \u2018diageo-123\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "se_category": {"name": "se_category", "description": "Category of event e.g. \u2018ecomm\u2019, \u2018video\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "se_action": {"name": "se_action", "description": "Action performed / event name e.g. \u2018add-to-basket\u2019, \u2018play-video\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "se_label": {"name": "se_label", "description": "The object of the action e.g. the ID of the video played or SKU of the product added-to-basket e.g. \u2018pbz00123\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "se_property": {"name": "se_property", "description": "A property associated with the object of the action e.g. \u2018HD\u2019, \u2018large\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "se_value": {"name": "se_value", "description": "A value associated with the event / action e.g. the value of goods added-to-basket e.g. 9.99", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_orderid": {"name": "tr_orderid", "description": "Order ID e.g. \u2018#134\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_affiliation": {"name": "tr_affiliation", "description": "Transaction affiliation (e.g. store where sale took place) e.g. \u2018web\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_total": {"name": "tr_total", "description": "Total transaction value e.g. 12.99", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_tax": {"name": "tr_tax", "description": "Total tax included in transaction value e.g. 3.00", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_shipping": {"name": "tr_shipping", "description": "Delivery cost charged e.g. 0.00", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_city": {"name": "tr_city", "description": "Delivery address, city e.g. \u2018London\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_state": {"name": "tr_state", "description": "Delivery address, state e.g. \u2018Washington\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_country": {"name": "tr_country", "description": "Delivery address, country e.g. \u2018France\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_orderid": {"name": "ti_orderid", "description": "Order ID e.g. \u2018#134\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_sku": {"name": "ti_sku", "description": "Product SKU e.g. \u2018pbz00123\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_name": {"name": "ti_name", "description": "Product name e.g. \u2018Cone pendulum\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_category": {"name": "ti_category", "description": "Product category e.g. \u2018New Age\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_price": {"name": "ti_price", "description": "Product unit price e.g. 9.99", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_quantity": {"name": "ti_quantity", "description": "Number of product in transaction e.g. 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pp_xoffset_min": {"name": "pp_xoffset_min", "description": "Minimum page x offset seen in the last ping period e.g. 0", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pp_xoffset_max": {"name": "pp_xoffset_max", "description": "Maximum page x offset seen in the last ping period e.g. 100", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pp_yoffset_min": {"name": "pp_yoffset_min", "description": "Minimum page y offset seen in the last ping period e.g. 0", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pp_yoffset_max": {"name": "pp_yoffset_max", "description": "Maximum page y offset seen in the last ping period e.g. 200", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "useragent": {"name": "useragent", "description": "Raw useragent", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_name": {"name": "br_name", "description": "Browser name e.g. \u2018Firefox 12\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_family": {"name": "br_family", "description": "Browser family e.g. \u2018Firefox\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_version": {"name": "br_version", "description": "Browser version e.g. \u201812.0\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_type": {"name": "br_type", "description": "Browser type e.g. \u2018Browser\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_renderengine": {"name": "br_renderengine", "description": "Browser rendering engine e.g. \u2018GECKO\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_lang": {"name": "br_lang", "description": "Language the browser is set to e.g. \u2018en-GB\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_pdf": {"name": "br_features_pdf", "description": "Whether the browser recognizes PDFs e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_flash": {"name": "br_features_flash", "description": "Whether Flash is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_java": {"name": "br_features_java", "description": "Whether Java is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_director": {"name": "br_features_director", "description": "Whether Adobe Shockwave is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_quicktime": {"name": "br_features_quicktime", "description": "Whether QuickTime is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_realplayer": {"name": "br_features_realplayer", "description": "Whether RealPlayer is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_windowsmedia": {"name": "br_features_windowsmedia", "description": "Whether mplayer2 is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_gears": {"name": "br_features_gears", "description": "Whether Google Gears is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_silverlight": {"name": "br_features_silverlight", "description": "Whether Microsoft Silverlight is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_cookies": {"name": "br_cookies", "description": "Whether cookies are enabled e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_colordepth": {"name": "br_colordepth", "description": "Bit depth of the browser color palette e.g. 24", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_viewwidth": {"name": "br_viewwidth", "description": "Viewport width e.g. 1000", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_viewheight": {"name": "br_viewheight", "description": "Viewport height e.g. 1000", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_name": {"name": "os_name", "description": "Name of operating system e.g. \u2018Android\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_family": {"name": "os_family", "description": "Operating system family e.g. \u2018Linux\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_manufacturer": {"name": "os_manufacturer", "description": "Company responsible for OS e.g. \u2018Apple\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_timezone": {"name": "os_timezone", "description": "Client operating system timezone e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_type": {"name": "dvce_type", "description": "Type of device e.g. \u2018Computer\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_ismobile": {"name": "dvce_ismobile", "description": "Is the device mobile? e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_screenwidth": {"name": "dvce_screenwidth", "description": "Screen width in pixels e.g. 1900", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_screenheight": {"name": "dvce_screenheight", "description": "Screen height in pixels e.g. 1024", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_charset": {"name": "doc_charset", "description": "The page\u2019s character encoding e.g. , \u2018UTF-8\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_width": {"name": "doc_width", "description": "The page\u2019s width in pixels e.g. 1024", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_height": {"name": "doc_height", "description": "The page\u2019s height in pixels e.g. 3000", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_currency": {"name": "tr_currency", "description": "Currency e.g. \u2018USD\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_total_base": {"name": "tr_total_base", "description": "Total in base currency e.g. 12.99", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_tax_base": {"name": "tr_tax_base", "description": "Total tax in base currency e.g. 3.00", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_shipping_base": {"name": "tr_shipping_base", "description": "decimal  Delivery cost in base currency e.g. 0.00", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_currency": {"name": "ti_currency", "description": "Currency e.g. \u2018EUR\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_price_base": {"name": "ti_price_base", "description": "decimal Price in base currency e.g. 9.99", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "base_currency": {"name": "base_currency", "description": "Reporting currency e.g. \u2018GBP\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_timezone": {"name": "geo_timezone", "description": "Visitor timezone name e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_clickid": {"name": "mkt_clickid", "description": "The click ID e.g. \u2018ac3d8e459\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_network": {"name": "mkt_network", "description": "The ad network to which the click ID belongs e.g. \u2018DoubleClick\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "etl_tags": {"name": "etl_tags", "description": "JSON of tags for this ETL run e.g. \u201c[\u2018prod\u2019]\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_sent_tstamp": {"name": "dvce_sent_tstamp", "description": "When the event was sent by the client device e.g. \u20182013-11-26 00:03:58.032\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_domain_userid": {"name": "refr_domain_userid", "description": "The Snowplow domain_userid of the referring website e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_dvce_tstamp": {"name": "refr_dvce_tstamp", "description": "The time of attaching the domain_userid to the inbound link e.g. \u20182013-11-26 00:02:05\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "domain_sessionid": {"name": "domain_sessionid", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "derived_tstamp": {"name": "derived_tstamp", "description": "Timestamp making allowance for innaccurate device clock e.g. \u20182013-11-26 00:02:04\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_vendor": {"name": "event_vendor", "description": "Who defined the event e.g. \u2018com.acme\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "Event name e.g. \u2018link_click\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_format": {"name": "event_format", "description": "Format for event e.g. \u2018jsonschema\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_version": {"name": "event_version", "description": "Version of event schema e.g. \u20181-0-2\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_fingerprint": {"name": "event_fingerprint", "description": "Hash client-set event fields e.g. AADCE520E20C2899F4CED228A79A3083", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "true_tstamp": {"name": "true_tstamp", "description": "User-set \u201ctrue timestamp\u201d for the event e.g. \u20182013-11-26 00:02:04\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_view_id": {"name": "page_view_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_normalize://models/base/scratch/base_scratch.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "file_format": "delta", "bind": false, "schema": "scratch", "tags": ["this_run"], "enabled": "{{ target.type in ['bigquery', 'databricks', 'spark', 'snowflake'] | as_bool() }}", "sql_header": "\n\n"}, "created_at": 1714072383.990067, "relation_name": "`analytics-147612`.`dev_gsokolov_scratch`.`snowplow_normalize_base_events_this_run`", "raw_code": "{#\nCopyright (c) 2022-present Snowplow Analytics Ltd. All rights reserved.\nThis program is licensed to you under the Snowplow Personal and Academic License Version 1.0,\nand you may not use this file except in compliance with the Snowplow Personal and Academic License Version 1.0.\nYou may obtain a copy of the Snowplow Personal and Academic License Version 1.0 at https://docs.snowplow.io/personal-and-academic-license-1.0/\n#}\n\n{{\n  config(\n    tags=[\"this_run\"],\n    sql_header=snowplow_utils.set_query_tag(var('snowplow__query_tag', 'snowplow_dbt'))\n  )\n}}\n\n{%- set lower_limit, upper_limit, session_start_limit = snowplow_utils.return_base_new_event_limits(ref('snowplow_normalize_base_new_event_limits')) %}\n\nselect\n    a.*\n\nfrom {{ var('snowplow__events') }} as a\n\nwhere\n  {# dvce_sent_tstamp is an optional field and not all trackers/webhooks populate it, this means this filter needs to be optional #}\n  {% if var(\"snowplow__days_late_allowed\") == -1 %}\n    1 = 1\n  {% else %}\n    a.dvce_sent_tstamp <= {{ snowplow_utils.timestamp_add('day', var(\"snowplow__days_late_allowed\", 3), 'a.dvce_created_tstamp') }}\n  {% endif %}\n  and a.{{ var('snowplow__session_timestamp', 'collector_tstamp') }} >= {{ lower_limit }}\n  and a.{{ var('snowplow__session_timestamp', 'collector_tstamp') }} <= {{ upper_limit }}\n  {% if var('snowplow__derived_tstamp_partitioned', true) and target.type == 'bigquery' | as_bool() %}\n    and a.derived_tstamp >= {{ snowplow_utils.timestamp_add('hour', -1, lower_limit) }}\n    and a.derived_tstamp <= {{ upper_limit }}\n  {% endif %}\n  and {{ snowplow_utils.app_id_filter(var(\"snowplow__app_id\",[])) }}\n\nqualify row_number() over (partition by a.event_id order by a.collector_tstamp{% if target.type in ['databricks', 'spark'] -%}, a.etl_tstamp {%- endif %}) = 1", "language": "sql", "refs": [{"name": "snowplow_normalize_base_new_event_limits", "package": null, "version": null}], "sources": [["atomic", "events"]], "metrics": [], "depends_on": {"macros": ["macro.snowplow_utils.set_query_tag", "macro.snowplow_utils.return_base_new_event_limits", "macro.snowplow_utils.timestamp_add", "macro.snowplow_utils.app_id_filter"], "nodes": ["source.snowplow_normalize.atomic.events", "model.snowplow_normalize.snowplow_normalize_base_new_event_limits"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.snowplow_normalize.snowplow_normalize_base_new_event_limits": {"database": "analytics-147612", "schema": "dev_gsokolov_scratch", "name": "snowplow_normalize_base_new_event_limits", "resource_type": "model", "package_name": "snowplow_normalize", "path": "base/scratch/snowplow_normalize_base_new_event_limits.sql", "original_file_path": "models/base/scratch/snowplow_normalize_base_new_event_limits.sql", "unique_id": "model.snowplow_normalize.snowplow_normalize_base_new_event_limits", "fqn": ["snowplow_normalize", "base", "scratch", "snowplow_normalize_base_new_event_limits"], "alias": "snowplow_normalize_base_new_event_limits", "checksum": {"name": "sha256", "checksum": "69fcdce206f3ea78b4f5bbe77c8cdfd2f10fb550e7930f2eac5dddd44b6c2851"}, "config": {"enabled": true, "alias": null, "schema": "scratch", "database": null, "tags": ["scratch"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{snowplow_utils.print_run_limits(this)}}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "file_format": "delta", "bind": false, "sql_header": "\n\n"}, "tags": ["scratch"], "description": "This table contains the lower and upper timestamp limits for the given run of the normalize model. These limits are used to select new events from the events table.", "columns": {"lower_limit": {"name": "lower_limit", "description": "The lower `collector_tstamp` limit for the run", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "upper_limit": {"name": "upper_limit", "description": "The upper `collector_tstamp` limit for the run", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_normalize://models/base/scratch/base_scratch.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "file_format": "delta", "bind": false, "schema": "scratch", "tags": "scratch", "enabled": "{{ target.type in ['bigquery', 'databricks', 'spark', 'snowflake'] | as_bool() }}", "sql_header": "\n\n", "post-hook": ["{{snowplow_utils.print_run_limits(this)}}"]}, "created_at": 1714072383.987164, "relation_name": "`analytics-147612`.`dev_gsokolov_scratch`.`snowplow_normalize_base_new_event_limits`", "raw_code": "{#\nCopyright (c) 2022-present Snowplow Analytics Ltd. All rights reserved.\nThis program is licensed to you under the Snowplow Personal and Academic License Version 1.0,\nand you may not use this file except in compliance with the Snowplow Personal and Academic License Version 1.0.\nYou may obtain a copy of the Snowplow Personal and Academic License Version 1.0 at https://docs.snowplow.io/personal-and-academic-license-1.0/\n#}\n\n{{ config(\n   post_hook=[\"{{snowplow_utils.print_run_limits(this)}}\"],\n   sql_header=snowplow_utils.set_query_tag(var('snowplow__query_tag', 'snowplow_dbt'))\n   )\n}}\n\n\n{%- set models_in_run = snowplow_utils.get_enabled_snowplow_models('snowplow_normalize') -%}\n\n{% set min_last_success,\n         max_last_success,\n         models_matched_from_manifest,\n         has_matched_all_models = snowplow_utils.get_incremental_manifest_status(ref('snowplow_normalize_incremental_manifest'),\n                                                                                 models_in_run) -%}\n\n\n{% set run_limits_query = snowplow_utils.get_run_limits(min_last_success,\n                                                         max_last_success,\n                                                         models_matched_from_manifest,\n                                                         has_matched_all_models,\n                                                         var(\"snowplow__start_date\",\"2020-01-01\")) -%}\n\n\n{{ run_limits_query }}", "language": "sql", "refs": [{"name": "snowplow_normalize_incremental_manifest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowplow_utils.set_query_tag", "macro.snowplow_utils.get_enabled_snowplow_models", "macro.snowplow_utils.get_incremental_manifest_status", "macro.snowplow_utils.get_run_limits", "macro.snowplow_utils.print_run_limits"], "nodes": ["model.snowplow_normalize.snowplow_normalize_incremental_manifest"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "operation.snowplow_normalize.snowplow_normalize-on-run-start-0": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "snowplow_normalize-on-run-start-0", "resource_type": "operation", "package_name": "snowplow_normalize", "path": "hooks/snowplow_normalize-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.snowplow_normalize.snowplow_normalize-on-run-start-0", "fqn": ["snowplow_normalize", "hooks", "snowplow_normalize-on-run-start-0"], "alias": "snowplow_normalize-on-run-start-0", "checksum": {"name": "sha256", "checksum": "ddbb762f2010398b0e20d4e16670a3ee19156ad3f3d181b79df02ff40ae87035"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "file_format": "delta", "bind": false}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "file_format": "delta", "bind": false}, "created_at": 1714072382.898509, "relation_name": null, "raw_code": "{{ snowplow_utils.snowplow_delete_from_manifest(var('models_to_remove',[]), ref('snowplow_normalize_incremental_manifest')) }}", "language": "sql", "refs": [{"name": "snowplow_normalize_incremental_manifest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowplow_utils.snowplow_delete_from_manifest"], "nodes": ["model.snowplow_normalize.snowplow_normalize_incremental_manifest"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.snowplow_normalize.snowplow_normalize-on-run-end-0": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "snowplow_normalize-on-run-end-0", "resource_type": "operation", "package_name": "snowplow_normalize", "path": "hooks/snowplow_normalize-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.snowplow_normalize.snowplow_normalize-on-run-end-0", "fqn": ["snowplow_normalize", "hooks", "snowplow_normalize-on-run-end-0"], "alias": "snowplow_normalize-on-run-end-0", "checksum": {"name": "sha256", "checksum": "ddbb762f2010398b0e20d4e16670a3ee19156ad3f3d181b79df02ff40ae87035"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "file_format": "delta", "bind": false}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "file_format": "delta", "bind": false}, "created_at": 1714072382.902931, "relation_name": null, "raw_code": "{{ snowplow_utils.snowplow_incremental_post_hook('snowplow_normalize', 'snowplow_normalize_incremental_manifest', 'snowplow_normalize_base_events_this_run', var('snowplow__session_timestamp')) }}", "language": "sql", "refs": [{"name": "snowplow_normalize_incremental_manifest", "package": null, "version": null}, {"name": "snowplow_normalize_base_events_this_run", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowplow_utils.snowplow_incremental_post_hook"], "nodes": ["model.snowplow_normalize.snowplow_normalize_incremental_manifest", "model.snowplow_normalize.snowplow_normalize_base_events_this_run"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.snowplow_normalize.snowplow_normalize-on-run-end-1": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "snowplow_normalize-on-run-end-1", "resource_type": "operation", "package_name": "snowplow_normalize", "path": "hooks/snowplow_normalize-on-run-end-1.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.snowplow_normalize.snowplow_normalize-on-run-end-1", "fqn": ["snowplow_normalize", "hooks", "snowplow_normalize-on-run-end-1"], "alias": "snowplow_normalize-on-run-end-1", "checksum": {"name": "sha256", "checksum": "ddbb762f2010398b0e20d4e16670a3ee19156ad3f3d181b79df02ff40ae87035"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "file_format": "delta", "bind": false}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "file_format": "delta", "bind": false}, "created_at": 1714072382.9072, "relation_name": null, "raw_code": "{{ snowplow_utils.grant_usage_on_schemas_built_into(var('snowplow__grant_schemas', true)) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.snowplow_utils.grant_usage_on_schemas_built_into"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 1}, "model.amplitude.amplitude__user_enhanced": {"database": "analytics-147612", "schema": "dev_gsokolov_amplitude", "name": "amplitude__user_enhanced", "resource_type": "model", "package_name": "amplitude", "path": "amplitude__user_enhanced.sql", "original_file_path": "models/amplitude__user_enhanced.sql", "unique_id": "model.amplitude.amplitude__user_enhanced", "fqn": ["amplitude", "amplitude__user_enhanced"], "alias": "amplitude__user_enhanced", "checksum": {"name": "sha256", "checksum": "e2e4e087970c14aa6468e407eb4dda433fbac76aeff9a481f18ca043374b5ca5"}, "config": {"enabled": true, "alias": null, "schema": "amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a distinct user with aggregated metrics for that user.", "columns": {"amplitude_user_id": {"name": "amplitude_user_id", "description": "Unique key for each user, which is user_id by default. If user_id does not exist, use amplitude_id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_created_at": {"name": "user_created_at", "description": "Event_time (UTC) of the user's first event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_session_at": {"name": "first_session_at", "description": "Timestamp of user's first recorded activity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_session_at": {"name": "last_session_at", "description": "Timestamp of user's most recent activity", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_events_per_user": {"name": "total_events_per_user", "description": "The total number of events for a certain user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_sessions_per_user": {"name": "total_sessions_per_user", "description": "The total number of sessions for a certain user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_session_length": {"name": "average_session_length", "description": "Average length of sessions, in seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_seconds_in_between_sessions": {"name": "average_seconds_in_between_sessions", "description": "Average time in between sessions for a user, in seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_minutes_in_between_sessions": {"name": "average_minutes_in_between_sessions", "description": "Average time in between sessions for a user, in minutes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_days_in_between_sessions": {"name": "average_days_in_between_sessions", "description": "Average time in between sessions for a user, in days", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amplitude://models/amplitude_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "amplitude"}, "created_at": 1714072384.040483, "relation_name": "`analytics-147612`.`dev_gsokolov_amplitude`.`amplitude__user_enhanced`", "raw_code": "with event_enhanced as (\n\n    select * \n    from {{ ref('amplitude__event_enhanced') }}\n),\n\nsession_data as (\n\n    select *\n    from {{ ref('amplitude__sessions') }}\n)\n\nselect\n    event_enhanced.amplitude_user_id,\n    min(event_enhanced.user_creation_time) as user_created_at,\n    min(event_enhanced.session_started_at) as first_session_at,\n    max(event_enhanced.session_ended_at) as last_session_at,\n    count(distinct event_enhanced.unique_event_id) as total_events_per_user,\n    count(distinct session_data.unique_session_id) as total_sessions_per_user,\n    avg(session_data.session_length_in_minutes) as average_session_length_in_minutes,\n    avg(session_data.minutes_in_between_sessions) as average_minutes_in_between_sessions\n\nfrom event_enhanced\nleft join session_data\n    on event_enhanced.unique_session_id = session_data.unique_session_id\ngroup by 1", "language": "sql", "refs": [{"name": "amplitude__event_enhanced", "package": null, "version": null}, {"name": "amplitude__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.amplitude.amplitude__event_enhanced", "model.amplitude.amplitude__sessions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.amplitude.amplitude__event_enhanced": {"database": "analytics-147612", "schema": "dev_gsokolov_amplitude", "name": "amplitude__event_enhanced", "resource_type": "model", "package_name": "amplitude", "path": "amplitude__event_enhanced.sql", "original_file_path": "models/amplitude__event_enhanced.sql", "unique_id": "model.amplitude.amplitude__event_enhanced", "fqn": ["amplitude", "amplitude__event_enhanced"], "alias": "amplitude__event_enhanced", "checksum": {"name": "sha256", "checksum": "f3e09b2e709c8442aebb74d6eae057d6657869806e419f1a8768aca1222e9919"}, "config": {"enabled": true, "alias": null, "schema": "amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "event_day", "data_type": "date"}, "file_format": "delta"}, "tags": [], "description": "Each record represents event data, enhanced with event type data and unnested event, group, and user properties.", "columns": {"unique_event_id": {"name": "unique_event_id", "description": "A unique key for each event, concatenating event_id, device_id, and client_event_time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unique_session_id": {"name": "unique_session_id", "description": "Unique key of each session, concatenating user_id and session_id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amplitude_user_id": {"name": "amplitude_user_id", "description": "Unique key for each user, which is user_id by default. If user_id does not exist, use amplitude_id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "A counter that distinguishes events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The assigned type of event. Example 'Add Friend'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_time": {"name": "event_time", "description": "Amplitude timestamp (UTC) which is the client_event_time adjusted by the difference between server_received_time and client_upload_time, specifically: event_time = client_event_time + (server_received_time - client_upload_time) 2015-08-10T12:00:00.000000 We use this timestamp to organize events on Amplitude charts. Note: If the difference between server_received_time and client_upload_time is less than 60 seconds, the event_time will not be adjusted and will equal the client_event_time\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_day": {"name": "event_day", "description": "Day of event time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "The session start time in milliseconds since epoch. All events within the same session share the same session ID. By default, the setting in Amplitude for the session property is session ID. All events with the same session ID and the same user ID will be grouped into the same session. The session ID does not have to be unique across multiple users. Session IDs for events sent via the Amplitude SDKs are automatically generated and managed. However, for events sent via the HTTP API, Amplitude defaults to a session ID of -1. This means the event is excluded from all session metrics.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amplitude_id": {"name": "amplitude_id", "description": "An internal ID used to count unique users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app": {"name": "app", "description": "Project ID found in your project's Settings page", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Project ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "version_name": {"name": "version_name", "description": "The app version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "client_event_time": {"name": "client_event_time", "description": "Local timestamp (UTC) of when the device logged the event.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "client_upload_time": {"name": "client_upload_time", "description": "The local timestamp (UTC) of when the device uploaded the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "server_received_time": {"name": "server_received_time", "description": "Amplitude timestamp (UTC) of when servers received the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "server_upload_time": {"name": "server_upload_time", "description": "Amplitude timestamp (UTC) of when the event data was uploaded to Amplitude servers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "City", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Country", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "Region", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "Dictionary where certain fields such as first_event and merged_amplitude_id are stored.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_lat": {"name": "location_lat", "description": "Latitude", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_lng": {"name": "location_lng", "description": "Longitude", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_brand": {"name": "device_brand", "description": "Device brand", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_carrier": {"name": "device_carrier", "description": "Device carrier.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_family": {"name": "device_family", "description": "Device family. Apple iPhone", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "The device specific identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_manufacturer": {"name": "device_manufacturer", "description": "Device manufacturer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_model": {"name": "device_model", "description": "The device model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "Device type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "IP address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_name": {"name": "os_name", "description": "OS name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_version": {"name": "os_version", "description": "OS version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "Platform of the device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "The language set by the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dma": {"name": "dma", "description": "Designated marketing area (DMA)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Schema ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_version": {"name": "start_version", "description": "App version the user was first tracked on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_creation_time": {"name": "user_creation_time", "description": "Event_time (UTC) of the user's first event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_event_number": {"name": "session_event_number", "description": "The number of the event within the session, ordered by time of event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_types": {"name": "group_types", "description": "Group types. \"Groups\" in the source table, renamed here. See the Accounts documentation for more information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "A readable ID specified by you. Amplitude uses a combination of three different methods to identify your users: device IDs, Amplitude ID, and user IDs. The first comes directly from your users' devices, while the second is an ID that Amplitude automatically creates once it has enough information to conclusively identify a unique user. The user ID, however, is something you'd set up. In Amplitude, a user ID is a unique identifier applied to individual users. Using them is optional, but recommended: your product should set a user ID once a user has created an account, logged in, or is otherwise identified in your product. Amplitude can use a user ID to reconcile events across multiple devices under the same user ID. Additionally, a user's event data will be merged on the backend so that all anonymous events prior to the assignment of a user ID will be connected to the correct user. For this reason, you can wait to assign user IDs if that makes sense for your product. Conversely, this is also why you should not set user IDs for anonymous users. Once set, user IDs in Amplitude cannot be changed.Once set, user IDs in Amplitude cannot be changed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type_id": {"name": "event_type_id", "description": "Event type ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type_name": {"name": "event_type_name", "description": "Event type name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "totals": {"name": "totals", "description": "The total number of times the event has happened this week", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "Name of the event in the raw data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "events_per_session": {"name": "events_per_session", "description": "The count of events in a session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_started_at": {"name": "session_started_at", "description": "The time of the first event in a session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_ended_at": {"name": "session_ended_at", "description": "The time of the last event in a session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_length": {"name": "session_length", "description": "The length of the session, in seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_first_user_session": {"name": "is_first_user_session", "description": "Boolean of whether or not a session is the user's first session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amplitude://models/amplitude_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "amplitude", "materialized": "incremental", "unique_key": "unique_key", "partition_by": {"field": "event_day", "data_type": "date"}, "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1714072384.039892, "relation_name": "`analytics-147612`.`dev_gsokolov_amplitude`.`amplitude__event_enhanced`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='unique_key',\n        partition_by={\"field\": \"event_day\", \"data_type\": \"date\"} if target.type not in ('spark','databricks') else ['event_day'],\n        incremental_strategy = 'merge' if target.type not in ('postgres', 'redshift') else 'delete+insert',\n        file_format = 'delta' \n        )\n}}\n\nwith \n\n{% if is_incremental() %}\n    \nmax_date as (\n\n    select max(event_day) as max_event_day\n    from {{ this }} \n\n),\n\n{% endif %}\n\nevent_data_raw as (\n\n    select events.*\n    from {{ var('event') }} as events\n\n    {% if is_incremental() %}\n        , max_date\n        where event_day >= max_date.max_event_day\n\n    {% endif %}\n),\n\n-- deduplicate\nevent_data as (\n    \n    select * \n    from (\n        select \n            *,\n            case when _insert_id is not null\n                then row_number() over (partition by _insert_id order by client_upload_time desc)\n                else row_number() over (partition by event_id, device_id, client_event_time, amplitude_user_id order by client_upload_time desc)\n            end as nth_event_record\n\n        from event_data_raw\n        ) as duplicates\n    where nth_event_record = 1\n),\n\nevent_type as (\n\n    select * \n    from {{ var('event_type') }}\n),\n\nsession_data as (\n\n    select *\n    from {{ ref('amplitude__sessions') }}\n),\n\nevent_enhanced as (\n\n    select\n        event_data.unique_event_id\n        , event_data.unique_session_id\n        , cast(event_data.amplitude_user_id as {{ dbt.type_string() }}) as amplitude_user_id\n        , event_data.event_id\n        , event_data.event_type\n        , event_data.event_time\n        , event_data.event_day\n\n        {% if var('event_properties_to_pivot') %},\n        {{ fivetran_utils.pivot_json_extract(string = 'event_properties', list_of_properties = var('event_properties_to_pivot')) }}\n        {% endif %}\n\n        , event_type.event_type_id\n        , event_type.event_type_name\n        , event_data.session_id\n        , row_number() over (partition by session_id order by event_time asc) as session_event_number\n        , row_number() over (partition by amplitude_user_id order by event_time asc) as user_event_number\n        , event_data.group_types\n\n        {% if var('group_properties_to_pivot') %},\n        {{ fivetran_utils.pivot_json_extract(string = 'group_properties', list_of_properties = var('group_properties_to_pivot')) }}\n        {% endif %}\n\n        , cast(event_data.user_id as {{ dbt.type_string() }}) as user_id\n        , event_data.user_creation_time\n\n        {% if var('user_properties_to_pivot') %},\n        {{ fivetran_utils.pivot_json_extract(string = 'user_properties', list_of_properties = var('user_properties_to_pivot')) }}\n        {% endif %}\n\n        , event_data.amplitude_id\n        , event_data.app\n        , event_data.project_name\n        , event_data.version_name\n        , event_data.client_event_time\n        , event_data.client_upload_time\n        , event_data.server_received_time\n        , event_data.server_upload_time\n        , event_data.city\n        , event_data.country\n        , event_data.region\n        , event_data.data\n        , event_data.location_lat\n        , event_data.location_lng\n        , event_data.device_brand\n        , event_data.device_carrier\n        , event_data.device_family\n        , event_data.device_id\n        , event_data.device_manufacturer\n        , event_data.device_model\n        , event_data.device_type\n        , event_data.ip_address\n        , event_data.os_name\n        , event_data.os_version\n        , event_data.platform\n        , event_data.language\n        , event_data.dma\n        , event_data.schema\n        , event_data.start_version\n        , event_type.totals\n        , event_type.value\n        , session_data.events_per_session\n        , session_data.session_started_at\n        , session_data.session_ended_at\n        , session_data.user_session_number\n        , session_data.session_started_at_day\n        , session_data.session_ended_at_day\n        , session_data.session_length_in_minutes\n        , session_data.is_first_user_session\n        , session_data.minutes_in_between_sessions\n\n    from event_data\n    left join event_type\n        on event_data.event_type_id = event_type.event_type_id\n    left join session_data\n        on event_data.unique_session_id = session_data.unique_session_id\n),\n\nfinal as (\n\n    select \n        *,\n        {{ dbt_utils.generate_surrogate_key(['unique_event_id','event_day']) }} as unique_key\n    from event_enhanced\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_amplitude__event", "package": null, "version": null}, {"name": "stg_amplitude__event_type", "package": null, "version": null}, {"name": "amplitude__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.type_string", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.amplitude_source.stg_amplitude__event", "model.amplitude_source.stg_amplitude__event_type", "model.amplitude.amplitude__sessions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.amplitude.amplitude__daily_performance": {"database": "analytics-147612", "schema": "dev_gsokolov_amplitude", "name": "amplitude__daily_performance", "resource_type": "model", "package_name": "amplitude", "path": "amplitude__daily_performance.sql", "original_file_path": "models/amplitude__daily_performance.sql", "unique_id": "model.amplitude.amplitude__daily_performance", "fqn": ["amplitude", "amplitude__daily_performance"], "alias": "amplitude__daily_performance", "checksum": {"name": "sha256", "checksum": "adf8cd0ff7c1e838451f7e6783eebc59a4bc2e7058432a8a221d694f8dd07654"}, "config": {"enabled": true, "alias": null, "schema": "amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "daily_unique_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "event_day", "data_type": "date"}, "file_format": "delta"}, "tags": [], "description": "Each record represents performance metrics for each distinct day and event type.", "columns": {"event_day": {"name": "event_day", "description": "Day of event time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The assigned type of event. Example 'Add Friend'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_events": {"name": "number_events", "description": "Count of distinct events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_sessions": {"name": "number_sessions", "description": "Count of distinct sessions", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_users": {"name": "number_users", "description": "Count of distinct visitors", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_new_users": {"name": "number_new_users", "description": "Count of distinct new visitors for that day", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amplitude://models/amplitude_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "amplitude", "materialized": "incremental", "unique_key": "daily_unique_key", "partition_by": {"field": "event_day", "data_type": "date"}, "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1714072384.040672, "relation_name": "`analytics-147612`.`dev_gsokolov_amplitude`.`amplitude__daily_performance`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='daily_unique_key',\n        partition_by={\"field\": \"event_day\", \"data_type\": \"date\"} if target.type not in ('spark','databricks') else ['event_day'],\n        incremental_strategy = 'merge' if target.type not in ('postgres', 'redshift') else 'delete+insert',\n        file_format = 'delta' \n    )\n}}\n\nwith event_enhanced as (\n\n    select * \n    from {{ ref('amplitude__event_enhanced') }}\n),\n\n{% if is_incremental() %}\n    \nmax_date as (\n\n    select max(event_day) as max_event_day\n    from {{ this }} \n\n),\n\n{% endif %}\n\ndate_spine as (\n    \n    select spine.*\n    from {{ ref('int_amplitude__date_spine') }} as spine\n\n    {% if is_incremental() %}\n        , max_date\n        where event_day >= max_date.max_event_day\n\n    {% endif %}\n), \n\nagg_event_data as (\n\n    select\n        event_day,\n        event_type,\n        count(distinct unique_event_id) as number_events,\n        count(distinct unique_session_id) as number_sessions,\n        count(distinct amplitude_user_id) as number_users,\n        count(distinct \n                (case when cast( {{ dbt.date_trunc('day', 'user_creation_time') }} as date) = event_day\n            then amplitude_user_id end)) as number_new_users \n    from event_enhanced\n    group by 1,2\n),\n\nspine_joined as (\n\n    select\n        date_spine.event_day,\n        date_spine.event_type,\n        agg_event_data.number_events,\n        agg_event_data.number_sessions,\n        agg_event_data.number_users,\n        agg_event_data.number_new_users\n    from date_spine\n    left join agg_event_data\n        on date_spine.event_day = agg_event_data.event_day\n        and date_spine.event_type = agg_event_data.event_type\n),\n\nfinal as (\n\n    select\n        event_day,\n        event_type,\n        coalesce(number_events,0) as number_events,\n        coalesce(number_sessions,0) as number_sessions,\n        coalesce(number_users,0) as number_users,\n        coalesce(number_new_users,0) as number_new_users,\n        {{ dbt_utils.generate_surrogate_key(['event_day', 'event_type']) }} as daily_unique_key\n    from spine_joined\n\n    {% if is_incremental() %}\n    -- only return the most recent day of data\n    where event_day >= coalesce( (select max(event_day)  from {{ this }} ), '2020-01-01')\n\n    {% endif %}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "amplitude__event_enhanced", "package": null, "version": null}, {"name": "int_amplitude__date_spine", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.date_trunc", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.amplitude.amplitude__event_enhanced", "model.amplitude.int_amplitude__date_spine"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.amplitude.amplitude__sessions": {"database": "analytics-147612", "schema": "dev_gsokolov_amplitude", "name": "amplitude__sessions", "resource_type": "model", "package_name": "amplitude", "path": "amplitude__sessions.sql", "original_file_path": "models/amplitude__sessions.sql", "unique_id": "model.amplitude.amplitude__sessions", "fqn": ["amplitude", "amplitude__sessions"], "alias": "amplitude__sessions", "checksum": {"name": "sha256", "checksum": "827e466ecaea70c7dbcf70aa5cadff50175152994744a217b1a105ae186bd8e1"}, "config": {"enabled": true, "alias": null, "schema": "amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_session_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "session_started_at_day", "data_type": "timestamp"}, "file_format": "delta"}, "tags": [], "description": "Each record represents a distinct session with aggregated metrics for that session.", "columns": {"unique_session_id": {"name": "unique_session_id", "description": "Unique key of each session, concatenating user_id and session_id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "A readable ID specified by you. Amplitude uses a combination of three different methods to identify your users: device IDs, Amplitude ID, and user IDs. The first comes directly from your users' devices, while the second is an ID that Amplitude automatically creates once it has enough information to conclusively identify a unique user. The user ID, however, is something you'd set up. In Amplitude, a user ID is a unique identifier applied to individual users. Using them is optional, but recommended: your product should set a user ID once a user has created an account, logged in, or is otherwise identified in your product. Amplitude can use a user ID to reconcile events across multiple devices under the same user ID. Additionally, a user's event data will be merged on the backend so that all anonymous events prior to the assignment of a user ID will be connected to the correct user. For this reason, you can wait to assign user IDs if that makes sense for your product. Conversely, this is also why you should not set user IDs for anonymous users. Once set, user IDs in Amplitude cannot be changed.Once set, user IDs in Amplitude cannot be changed.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "events_per_session": {"name": "events_per_session", "description": "The count of events in a session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_started_at": {"name": "session_started_at", "description": "The time of the first event in a session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_ended_at": {"name": "session_ended_at", "description": "The time of the last event in a session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_length": {"name": "session_length", "description": "The length of the session, in seconds", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_started_at_day": {"name": "session_started_at_day", "description": "The day the session started", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_ended_at_day": {"name": "session_ended_at_day", "description": "The day the session ended", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_session_number": {"name": "user_session_number", "description": "The number of the session, within a user's lifetime", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_session_ended_at": {"name": "last_session_ended_at", "description": "The time the prior session ended at", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_session_ended_at_day": {"name": "last_session_ended_at_day", "description": "The day the prior session ended", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_first_user_session": {"name": "is_first_user_session", "description": "Boolean of whether or not a session is the user's first session", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "seconds_in_between_sessions": {"name": "seconds_in_between_sessions", "description": "The seconds in between sessions of a user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minutes_in_between_sessions": {"name": "minutes_in_between_sessions", "description": "The minutes in between sessions of a user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_in_between_sessions": {"name": "days_in_between_sessions", "description": "The days in between sessions of a user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "amplitude://models/amplitude_models.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "amplitude", "materialized": "incremental", "unique_key": "unique_session_id", "partition_by": {"field": "session_started_at_day", "data_type": "timestamp"}, "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1714072384.040237, "relation_name": "`analytics-147612`.`dev_gsokolov_amplitude`.`amplitude__sessions`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='unique_session_id',\n        partition_by={\"field\": \"session_started_at_day\", \"data_type\": \"timestamp\"} if target.type not in ('spark','databricks') else ['session_started_at_day'],\n        incremental_strategy = 'merge' if target.type not in ('postgres', 'redshift') else 'delete+insert',\n        file_format = 'delta'\n        )\n}}\n\nwith \n\n{% if is_incremental() %}\n    \nmax_date as (\n\n    select max(session_started_at) as max_session_started_at\n    from {{ this }} \n\n),\n\n{% endif %}\n    \nevent_data_raw as (\n\n    select events.*\n    from {{ var('event') }} as events\n\n    {% if is_incremental() %}\n        , max_date\n        where event_time >= max_date.max_session_started_at\n\n    {% endif %}\n),\n\n-- deduplicate\nevent_data as (\n    \n    select * \n    from (\n        select \n            *,\n            case when _insert_id is not null\n                then row_number() over (partition by _insert_id order by client_upload_time desc)\n                else row_number() over (partition by event_id, device_id, client_event_time, amplitude_user_id order by client_upload_time desc)\n            end as nth_event_record\n\n        from event_data_raw\n        ) as duplicates\n    where nth_event_record = 1\n),\n\nsession_agg as (\n\n    select\n        unique_session_id,\n        user_id,\n        count(event_id) as events_per_session,\n        min(event_time) as session_started_at,\n        max(event_time) as session_ended_at,\n        {{ dbt.datediff('min(event_time)', 'max(event_time)', 'second') }} / 60 as session_length_in_minutes\n    from event_data\n    {{ dbt_utils.group_by(2) }}\n),\n\nsession_ranking as (\n\n    select \n        unique_session_id,\n        user_id,\n        events_per_session,\n        session_started_at,\n        session_ended_at,\n        session_length_in_minutes,\n        {{ dbt.date_trunc('day', 'session_started_at') }} as session_started_at_day,\n        {{ dbt.date_trunc('day', 'session_ended_at') }} as session_ended_at_day,\n        case \n            when user_id is not null then row_number() over (partition by user_id order by session_started_at) \n            else null\n        end as user_session_number\n    from session_agg\n),\n\nsession_lag as (\n    select\n        *, \n        -- determine prior sessions' end time, then in the following cte calculate the difference between current session's start time and last session's end time to determine the time in between sessions\n        case \n            when user_id is not null then lag(session_ended_at,1) over (partition by user_id order by session_ended_at) \n            else null\n        end as last_session_ended_at,\n        case \n            when user_id is not null then lag(session_ended_at_day,1) over (partition by user_id order by session_ended_at_day) \n            else null\n        end as last_session_ended_at_day\n    from session_ranking\n)\n\nselect \n    *,\n    case\n        when user_session_number = 1 then 1\n        else 0\n    end as is_first_user_session,\n    case\n        when user_id is not null then {{ dbt.datediff('last_session_ended_at', 'session_started_at', 'second') }} / 60\n        else null\n    end as minutes_in_between_sessions\nfrom session_lag", "language": "sql", "refs": [{"name": "stg_amplitude__event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.datediff", "macro.dbt_utils.group_by", "macro.dbt.date_trunc"], "nodes": ["model.amplitude_source.stg_amplitude__event"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.amplitude.int_amplitude__date_spine": {"database": "analytics-147612", "schema": "dev_gsokolov_int_amplitude", "name": "int_amplitude__date_spine", "resource_type": "model", "package_name": "amplitude", "path": "intermediate/int_amplitude__date_spine.sql", "original_file_path": "models/intermediate/int_amplitude__date_spine.sql", "unique_id": "model.amplitude.int_amplitude__date_spine", "fqn": ["amplitude", "intermediate", "int_amplitude__date_spine"], "alias": "int_amplitude__date_spine", "checksum": {"name": "sha256", "checksum": "cca771943a2151eda6c3cfb1f60200abd41e4cddfad826c5ee9d2c28ab7ea052"}, "config": {"enabled": true, "alias": null, "schema": "int_amplitude", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "date_spine_unique_key", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "partition_by": {"field": "event_day", "data_type": "date"}, "file_format": "delta"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "int_amplitude", "materialized": "incremental", "unique_key": "date_spine_unique_key", "partition_by": {"field": "event_day", "data_type": "date"}, "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1714072382.9830241, "relation_name": "`analytics-147612`.`dev_gsokolov_int_amplitude`.`int_amplitude__date_spine`", "raw_code": "{{\n    config(\n        materialized='incremental',\n        unique_key='date_spine_unique_key',\n        partition_by={\"field\": \"event_day\", \"data_type\": \"date\"} if target.type not in ('spark','databricks') else ['event_day'],\n        incremental_strategy = 'merge' if target.type not in ('postgres', 'redshift') else 'delete+insert',\n        file_format = 'delta' \n        )\n}}\n\nwith event_data as (\n\n    select * \n    from {{ ref('amplitude__event_enhanced') }}\n),\n\n-- create end_date_adjust variable\n{% if execute %}\n{% set end_date_query %}\n    -- select one day past current day\n    select  {{ dbt.dateadd(\"day\", 1, dbt.date_trunc(\"day\", dbt.current_timestamp_backcompat())) }}\n{% endset %}\n\n{% set end_date = run_query(end_date_query).columns[0][0]|string %}\n\n        {% set end_date_adjust =  end_date[0:10]  %}\n\n{% endif %}\n\n\n{% if is_incremental() %}\n    \nmax_date as (\n\n    select max(event_day) as max_event_day\n    from {{ this }} \n\n),\n\n{% endif %}\n\n\nspine as (\n\n    select spine.* \n\n    from (\n        {{ dbt_utils.date_spine(\n            datepart = \"day\", \n            start_date =  \"cast('\" ~ var('amplitude__date_range_start',  '2020-01-01') ~ \"' as date)\", \n            end_date = \"cast('\" ~ var('amplitude__date_range_end',  end_date_adjust) ~ \"' as date)\" \n            )\n        }} \n    ) as spine\n\n    {% if is_incremental() %} \n        , max_date\n        where date_day > max_date.max_event_day\n    \n    {% endif %}\n),\n\ndate_spine as (\n\n\n    select\n        distinct event_data.event_type,\n        cast(spine.date_day as date) as event_day,\n        {{ dbt_utils.generate_surrogate_key(['spine.date_day','event_data.event_type']) }} as date_spine_unique_key\n    from spine \n    join event_data\n        on spine.date_day >= event_data.event_day -- each event_type will have a record for every day since their first day\n)\n\nselect * \nfrom date_spine", "language": "sql", "refs": [{"name": "amplitude__event_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.date_spine", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.amplitude.amplitude__event_enhanced"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dq_tools.dq_issue_log": {"database": "analytics-147612", "schema": "dev_gsokolov_AUDIT", "name": "dq_issue_log", "resource_type": "model", "package_name": "dq_tools", "path": "01_lake/dq_issue_log.sql", "original_file_path": "models/01_lake/dq_issue_log.sql", "unique_id": "model.dq_tools.dq_issue_log", "fqn": ["dq_tools", "01_lake", "dq_issue_log"], "alias": "dq_issue_log", "checksum": {"name": "sha256", "checksum": "6965a9c331f420b907796842f7e7736d189dadc074f323af7c5f50976a6ea522"}, "config": {"enabled": true, "alias": null, "schema": "AUDIT", "database": "analytics-147612", "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Log table contains test results.\n\nPrimary Keys:\n- invocation_id\n- test_unique_id\n", "columns": {"check_timestamp": {"name": "check_timestamp", "description": "Test run timestamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "table_name": {"name": "table_name", "description": "table scope which test runs against", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "column_name": {"name": "column_name", "description": "column scope which test runs against. can be empty as the test can run against multiple columns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ref_table": {"name": "ref_table", "description": "ref table when test runs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ref_column": {"name": "ref_column", "description": "ref table.column when test runs", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dq_issue_type": {"name": "dq_issue_type", "description": "data quality issue type - normally generated from test functionality name\n\nlist of common values:\n  - accepted value\n  - expression\n  - null value\n  - reference integrity\n  - recency\n  - equal row count\n  - equality\n  - uniqueness\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invocation_id": {"name": "invocation_id", "description": "invocation uuid generated by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dq_model": {"name": "dq_model", "description": "the dbt model name or its sub query if having `where` parameter", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "severity": {"name": "severity", "description": "test severity level, values are `warn` or `error`", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kpi_category": {"name": "kpi_category", "description": "data quality kpis\n\nlist of values:\n  - other (will not be counted)\n  - validity\n  - completeness\n  - timeliness\n  - consistency\n  - uniqueness\n  - accuracy\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "no_of_records": {"name": "no_of_records", "description": "total number of rows of the model attached to the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "no_of_records_scanned": {"name": "no_of_records_scanned", "description": "number of rows scanned by the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "no_of_records_failed": {"name": "no_of_records_failed", "description": "number of rows failed by the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "no_of_table_columns": {"name": "no_of_table_columns", "description": "number of columns of the tested model", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "no_of_tables": {"name": "no_of_tables", "description": "number of models of the tested project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_unique_id": {"name": "test_unique_id", "description": "unique id of a test generated by dbt", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://models/01_lake/dq_issue_log.yml", "build_path": null, "deferred": false, "unrendered_config": {"database": "analytics-147612", "schema": "AUDIT", "materialized": "incremental", "on_schema_change": "append_new_columns", "full_refresh": false}, "created_at": 1714072384.254855, "relation_name": "`analytics-147612`.`dev_gsokolov_AUDIT`.`dq_issue_log`", "raw_code": "{{\n  config(\n    database = var('dbt_dq_tool_database', target.database),\n    schema = var('dbt_dq_tool_schema', target.schema),\n    materialized = 'incremental',\n    on_schema_change = 'append_new_columns',\n    full_refresh = var('dbt_dq_tool_full_refresh', false)\n  )\n}}\n\n{#-\n  - append new column\n  - disabled full refresh --> full refresh required manual droping \n-#}\n\nwith    dummy as (select 1 as col)\n\nselect   cast(null as {{ dbt.type_timestamp() }}) as check_timestamp\n        ,cast(null as {{ dbt.type_string() }}) as table_name\n        ,cast(null as {{ dbt.type_string() }}) as table_query\n        ,cast(null as {{ dbt.type_string() }}) as column_name\n        ,cast(null as {{ dbt.type_string() }}) as ref_table\n        ,cast(null as {{ dbt.type_string() }}) as ref_column\n        ,cast(null as {{ dbt.type_string() }}) as dq_issue_type\n        ,cast(null as {{ dbt.type_string() }}) as invocation_id\n        ,cast(null as {{ dbt.type_string() }}) as dq_model\n        ,cast(null as {{ dbt.type_string() }}) as severity\n        ,cast(null as {{ dbt.type_string() }}) as kpi_category\n        ,cast(null as {{ dbt.type_int() }}) as no_of_records\n        ,cast(null as {{ dbt.type_int() }}) as no_of_records_scanned\n        ,cast(null as {{ dbt.type_int() }}) as no_of_records_failed\n        ,cast(null as {{ dbt.type_int() }}) as no_of_table_columns\n        ,cast(null as {{ dbt.type_int() }}) as no_of_tables\n        ,cast(null as {{ dbt.type_string() }}) as test_unique_id\n\nfrom    dummy\n\nwhere   1=0", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dq_tools.metricflow_time_spine": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "metricflow_time_spine", "resource_type": "model", "package_name": "dq_tools", "path": "04_metric/metricflow_time_spine.sql", "original_file_path": "models/04_metric/metricflow_time_spine.sql", "unique_id": "model.dq_tools.metricflow_time_spine", "fqn": ["dq_tools", "04_metric", "metricflow_time_spine"], "alias": "metricflow_time_spine", "checksum": {"name": "sha256", "checksum": "fd90680f98efe8781e74561633b081fca029d9106674eaae96c124a3f1e51824"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["semantic", "metricflow"], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["semantic", "metricflow"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["semantic", "metricflow"]}, "created_at": 1714072383.021087, "relation_name": "`analytics-147612`.`dev_gsokolov`.`metricflow_time_spine`", "raw_code": "{{\n  config(\n    materialized = 'table',\n    tags = ['semantic', 'metricflow']\n  )\n}}\n\n--Check https://docs.getdbt.com/docs/build/metricflow-time-spine\n{% set start_date = var(\"dbt_dq_tool_start_date\", \"to_date('01/01/2000','mm/dd/yyyy')\") -%}\n{% set end_date = var(\"dbt_dq_tool_end_date\", \"to_date('01/01/2030','mm/dd/yyyy')\") -%}\n\n{%- if target.type == \"bigquery\" %}\n\n  {% set start_date = var(\"dbt_dq_tool_start_date\", \"DATE(2000,01,01)\") %}\n  {% set end_date = var(\"dbt_dq_tool_end_date\", \"DATE(2030,01,01)\") %}\n\n{%- endif %}\n\nwith days as (\n\n  {{ dbt_utils.date_spine('day', start_date, end_date) }}\n\n),\n\nfinal as (\n    select cast(date_day as date) as date_day\n    from days\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dq_tools.bi_column_analysis": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "bi_column_analysis", "resource_type": "model", "package_name": "dq_tools", "path": "03_mart/data-quality-score/bi_column_analysis.sql", "original_file_path": "models/03_mart/data-quality-score/bi_column_analysis.sql", "unique_id": "model.dq_tools.bi_column_analysis", "fqn": ["dq_tools", "03_mart", "data-quality-score", "bi_column_analysis"], "alias": "bi_column_analysis", "checksum": {"name": "sha256", "checksum": "b56c30fdac880798642f2ea3e63398ab852a5184fbe13378d05c0fb673227d15"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dq"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["dq"], "description": "Providing some analysis as per column level.", "columns": {"run_time": {"name": "run_time", "description": "Test running timestamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "analysis_name": {"name": "analysis_name", "description": "Analysis name, will be used to build the Data quality KPI name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "table_name": {"name": "table_name", "description": "The model name of the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "column_name": {"name": "column_name", "description": "The column name of the test (if the test is at model's column level)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "kpi_category": {"name": "kpi_category", "description": "KPI categories:\n- Validity\n- Timeliness\n- Accuracy\n- Uniqueness\n- Completeness\n- Consistency\n- Other\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "indicator_category": {"name": "indicator_category", "description": "Indicator category, currently support only 'Simple Statistics'. We might add more in the future e.g. Pattern Matching", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_processed": {"name": "rows_processed", "description": "Row proceeded in the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "indicator_value": {"name": "indicator_value", "description": "Indicator value, currenly it is row failed in the test in the category of Simple Statistics", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://models/03_mart/data-quality-score/bi_column_analysis.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["dq"]}, "created_at": 1714072384.277313, "relation_name": "`analytics-147612`.`dev_gsokolov`.`bi_column_analysis`", "raw_code": "{{\n  config(\n    tags = ['dq'],\n  )\n}}\n\nselect  check_timestamp         as run_time,\n        dq_issue_type           as analysis_name,\n        table_name              as table_name,\n        column_name             as column_name,\n        kpi_category            as kpi_category,\n        'Simple Statistics'     as indicator_category,\n        no_of_records           as rows_processed,\n        no_of_records_failed    as indicator_value\n\nfrom    {{ ref('dq_tools', 'dq_issue_log') }}\n\nqualify row_number() over (\n  partition by  table_name,\n                column_name,\n                ref_table,\n                ref_column,\n                dq_issue_type,\n                {{ dq_tools.date_trunc('day', 'check_timestamp') }}\n  order by check_timestamp desc\n) = 1", "language": "sql", "refs": [{"name": "dq_issue_log", "package": "dq_tools", "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dq_tools.date_trunc"], "nodes": ["model.dq_tools.dq_issue_log"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dq_tools.bi_dq_metrics": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "bi_dq_metrics", "resource_type": "model", "package_name": "dq_tools", "path": "03_mart/data-quality-score/bi_dq_metrics.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.sql", "unique_id": "model.dq_tools.bi_dq_metrics", "fqn": ["dq_tools", "03_mart", "data-quality-score", "bi_dq_metrics"], "alias": "bi_dq_metrics", "checksum": {"name": "sha256", "checksum": "2e6dd14b16e58905f6ffde6e042c28d182df36435653a610797521fa8496c313"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dq"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["dq"], "description": "View containing the data quality metrics, and is used to build the dashboard.\n```\ndq_score = sum(rows_passed) * 1.00 / sum(rows_processed) * 100\nby dimensions:\n  - dq_dimension\n```\n", "columns": {"run_time": {"name": "run_time", "description": "Test running timestamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rule_name": {"name": "rule_name", "description": "Rules will be used to build the Data quality KPI name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_concept": {"name": "data_concept", "description": "The data concept e.g. table/view, a subquery, etc", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data_element": {"name": "data_element", "description": "The data concept's element e.g. column", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "indicator_category": {"name": "indicator_category", "description": "Currently just support Simple Statistics", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dq_dimension": {"name": "dq_dimension", "description": "Data Quayliy KPI name - 6 values\n- Validity\n- Timeliness\n- Accuracy\n- Uniqueness\n- Completeness\n- Consistency\n- Other\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_processed": {"name": "rows_processed", "description": "Number of rows were proceeded", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rows_failed": {"name": "rows_failed", "description": "Number of rows failed by the test", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://models/03_mart/data-quality-score/bi_dq_metrics.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["dq"]}, "created_at": 1714072384.2577422, "relation_name": "`analytics-147612`.`dev_gsokolov`.`bi_dq_metrics`", "raw_code": "{{\n  config(\n    tags = ['dq']\n  )\n}}\n\nwith dq_metrics_only as (\n\n  select  run_time,\n          analysis_name as rule_name,\n          table_name as data_concept,\n          column_name as data_element,\n          indicator_category,\n          case\n            when coalesce(kpi_category,'') != '' then kpi_category\n            when lower(analysis_name) like '%expression%'        then 'Validity'\n            when lower(analysis_name) like '%recency%'           then 'Timeliness'\n            when lower(analysis_name) like '%accuracy%'\n              or lower(analysis_name) like '%accepted values%'   then 'Accuracy'\n            when lower(analysis_name) like '%uniqueness%'\n              or lower(analysis_name) like '%unique%'            then 'Uniqueness'\n            when lower(analysis_name) like '%null value%'\n              or lower(analysis_name) like '%not null%'          then 'Completeness'\n            when lower(analysis_name) like '%reference integrity%'\n              or lower(analysis_name) like '%relationships%'     then 'Consistency'\n            else 'Other'\n          end as dq_dimension,\n          rows_processed,\n          case\n            when indicator_category in ('Simple Statistics') then indicator_value\n            when indicator_category in ('Pattern Matching') then rows_processed - indicator_value\n            else indicator_value\n          end as rows_failed\n\n  from    {{ ref('bi_column_analysis') }}\n\n)\n\nselect  *, rows_processed - rows_failed as rows_passed\nfrom    dq_metrics_only", "language": "sql", "refs": [{"name": "bi_column_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dq_tools.bi_column_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dq_tools.test_coverage": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "test_coverage", "resource_type": "model", "package_name": "dq_tools", "path": "03_mart/test-coverage/test_coverage.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.sql", "unique_id": "model.dq_tools.test_coverage", "fqn": ["dq_tools", "03_mart", "test-coverage", "test_coverage"], "alias": "test_coverage", "checksum": {"name": "sha256", "checksum": "362ae0e2cfa9d74f6ed4e6503e1b666df09593f5728e484511d193c72d3cc35e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["dq"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["dq"], "description": "Providing test coverage metrics by each dbt invocation \n(because of that, in order to get correct coverage value, it is recommended to perform `dbt build` in a single dbt job)\n", "columns": {"invocation_id": {"name": "invocation_id", "description": "dbt invocation id", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "check_timestamp": {"name": "check_timestamp", "description": "dbt test timestamp", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_tested_columns": {"name": "all_tested_columns", "description": "Total number of columns which having at least 1 test case", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_columns": {"name": "all_columns", "description": "Total number of columns (inc tested & non-tested) catpured at the invocation time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_tested_tables": {"name": "all_tested_tables", "description": "Total number of tables which having at least 1 tested column", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "all_tables": {"name": "all_tables", "description": "Total number of tables (inc tested & non-tested) catpured at the invocation time", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_count": {"name": "test_count", "description": "Total number of test cases", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "column_record_coverage_pct": {"name": "column_record_coverage_pct", "description": "Percentage of row scanned per all rows", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "column_coverage_pct": {"name": "column_coverage_pct", "description": "Percentage of number of tested columns per all columns", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "model_coverage_pct": {"name": "model_coverage_pct", "description": "Percentage of number of tested table per all tables", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "coverage_pct": {"name": "coverage_pct", "description": "Test coverage per invocation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_to_column_ratio": {"name": "test_to_column_ratio", "description": "Test to Column ratio per invocation", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://models/03_mart/test-coverage/test_coverage.yml", "build_path": null, "deferred": false, "unrendered_config": {"tags": ["dq"]}, "created_at": 1714072384.291517, "relation_name": "`analytics-147612`.`dev_gsokolov`.`test_coverage`", "raw_code": "{{\n  config(\n    tags = ['dq'],\n  )\n}}\n\nwith\n\ntest_result as (\n\n  select  *\n          ,concat(table_name, column_name) as column_id\n          ,row_number() over (\n            partition by invocation_id, table_name \n            order by no_of_table_columns desc) as table_column_rn\n\n  from    {{ ref('dq_tools', 'dq_issue_log') }}\n\n  where   coalesce(table_name, '') != ''\n\n),\n\ntest_result_w_coverage_exclusion as (\n\n  select  *\n  from    test_result\n  where   1=1\n    and   {{ dq_tools.__get_test_coverage_exclusion_sql(table_name='table_name') }}\n\n),\n\npre_final as (\n\n  select      invocation_id\n              ,min(check_timestamp) as check_timestamp\n\n              --intermediate measure\n              ,count(distinct column_id) as all_tested_columns\n              ,sum(case when table_column_rn = 1 then no_of_table_columns else 0 end) as all_columns\n              ,count(distinct table_name) as all_tested_tables\n              ,max(no_of_tables) - max(ce.no_of_tables_excluded) as all_tables\n              ,count(distinct test_unique_id) as test_count\n\n              --intermediate pct measure\n              ,avg(no_of_records_scanned) * 100.0 / nullif(avg(no_of_records), 0) as column_record_coverage_pct\n            \n  from        test_result\n  cross join  (\n                --to minus the excluded count to total count of tables\n                select  count(distinct table_name) no_of_tables_excluded\n                from    test_result_w_coverage_exclusion\n              ) as ce\n\n  where     1=1\n    and     column_name is not null\n\n    --coverage exclude by table names\n    and     table_name not in (select table_name from test_result_w_coverage_exclusion)\n\n  group by  1\n\n),\n\nfinal as (\n\n  select  *\n          --intermediate pct measure (cont)\n          ,all_tested_columns * 100.0 / nullif(all_columns, 0) as column_coverage_pct\n          ,all_tested_tables * 100.0 / nullif(all_tables, 0) as model_coverage_pct\n\n          --final measure\n          ,column_record_coverage_pct \n            * (all_tested_columns * 1.0 / nullif(all_columns, 0)) \n            * (all_tested_tables * 1.0 / nullif(all_tables, 0)) as coverage_pct\n          ,test_count * 1.0 / all_columns as test_to_column_ratio\n\n  from    pre_final\n\n)\n\nselect  *\nfrom    final", "language": "sql", "refs": [{"name": "dq_issue_log", "package": "dq_tools", "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dq_tools.__get_test_coverage_exclusion_sql"], "nodes": ["model.dq_tools.dq_issue_log"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_segment.segment_web_user_stitching": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "segment_web_user_stitching", "resource_type": "model", "package_name": "dbt_segment", "path": "sessionization/segment_web_user_stitching.sql", "original_file_path": "models/sessionization/segment_web_user_stitching.sql", "unique_id": "model.dbt_segment.segment_web_user_stitching", "fqn": ["dbt_segment", "sessionization", "segment_web_user_stitching"], "alias": "segment_web_user_stitching", "checksum": {"name": "sha256", "checksum": "a04ab6c8f09618c0c7ed59eb5f6ad8b52e7350967befdcb146e85d3c4f20ed5b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model performs \"user stitching\" on top of web event data. User stitching is the process of tying all events associated with a cookie to the same user_id, and solves a common problem in event analytics that users are only identified part way through their activity stream. This model returns a single user_id for every anonymous_id, and is later joined in to build a `blended_user_id` field, that acts as the primary user identifier for all sessions.", "columns": {"anonymous_id": {"name": "anonymous_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_segment://models/sessionization/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.336661, "relation_name": "`analytics-147612`.`dev_gsokolov`.`segment_web_user_stitching`", "raw_code": "{{config(materialized = 'table')}}\n\nwith events as (\n\n    select * from {{ref('segment_web_page_views')}}\n\n),\n\nmapping as (\n\n    select distinct\n\n        anonymous_id,\n        \n        /* \n            Postgres doesn't have \"ignore nulls\", so instead we partition over\n            anonymous_id and order the user_ids within it such that non-null\n            values come up last, sorted secondarily by increasing tstamp.\n        */\n\n        last_value(user_id {% if target.type != \"postgres\" -%} ignore nulls {%- endif -%}) over (\n            partition by anonymous_id\n            order by\n                {% if target.type == \"postgres\" -%}\n                case when user_id is not null then 1 else 0 end asc, \n                {%- endif %}\n                tstamp\n            rows between unbounded preceding and unbounded following\n        ) as user_id,\n\n        min(tstamp) over (\n            partition by anonymous_id\n        ) as first_seen_at,\n\n        max(tstamp) over (\n            partition by anonymous_id\n        ) as last_seen_at\n\n    from events\n\n)\n\nselect * from mapping", "language": "sql", "refs": [{"name": "segment_web_page_views", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_segment.segment_web_page_views"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_segment.segment_web_sessions": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "segment_web_sessions", "resource_type": "model", "package_name": "dbt_segment", "path": "sessionization/segment_web_sessions.sql", "original_file_path": "models/sessionization/segment_web_sessions.sql", "unique_id": "model.dbt_segment.segment_web_sessions", "fqn": ["dbt_segment", "sessionization", "segment_web_sessions"], "alias": "segment_web_sessions", "checksum": {"name": "sha256", "checksum": "ec103c742a2116a104fe07bda2bc3ac8c0211f4fe808539d28889925bb061eee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "session_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": "session_id", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "sort": "session_start_tstamp", "dist": "session_id"}, "tags": [], "description": "The purpose of this model is to expose a single web session, derived from Segment web events. Sessions are the most common way that analysis of web visitor behavior is conducted, and although Segment doesn't natively output session data, this model uses standard logic to create sessions out of page view events.\n\nA session is meant to represent a single instance of web activity where a user is actively browsing a website. In this case, we are demarcating sessions by 30 minute windows of inactivity: if there is 30 minutes of inactivity between two page views, the second page view begins a new session. Additionally, page views across different devices will always be tied to different sessions.\n\nThe logic implemented in this particular model is responsible for incrementally calculating a user's session number; the core sessionization logic is done in upstream models.", "columns": {"session_id": {"name": "session_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_segment://models/sessionization/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "session_id", "sort": "session_start_tstamp", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "dist": "session_id", "cluster_by": "session_id"}, "created_at": 1714072384.33725, "relation_name": "`analytics-147612`.`dev_gsokolov`.`segment_web_sessions`", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'session_id',\n    sort = 'session_start_tstamp',\n    partition_by = {'field': 'session_start_tstamp', 'data_type': 'timestamp', 'granularity': var('segment_bigquery_partition_granularity')},\n    dist = 'session_id',\n    cluster_by = 'session_id'\n    )}}\n\n{#\nWindow functions are challenging to make incremental. This approach grabs\nexisting values from the existing table and then adds the value of session_number\non top of that seed. During development, this decreased the model runtime\nby 25x on 2 years of data (from 600 to 25 seconds), so even though the code is\nmore complicated, the performance tradeoff is worth it.\n#}\n\nwith sessions as (\n\n    select * from {{ref('segment_web_sessions__stitched')}}\n\n    {% if is_incremental() %}\n    {{\n        generate_sessionization_incremental_filter( this, 'session_start_tstamp', 'session_start_tstamp', '>' )\n    }}\n    {% endif %}\n\n),\n\n{% if is_incremental() %}\n\nagg as (\n\n    select\n        blended_user_id,\n        count(*) as starting_session_number\n    from {{this}}\n\n    -- only include sessions that are not going to be resessionized in this run\n    {{\n        generate_sessionization_incremental_filter( this, 'session_start_tstamp', 'session_start_tstamp', '<=' )\n    }}\n\n    group by 1\n\n),\n\n{% endif %}\n\nwindowed as (\n\n    select\n\n        *,\n\n        row_number() over (\n            partition by blended_user_id\n            order by sessions.session_start_tstamp\n            )\n            {% if is_incremental() %}+ coalesce(agg.starting_session_number, 0) {% endif %}\n            as session_number\n\n    from sessions\n\n    {% if is_incremental() %}\n    left join agg using (blended_user_id)\n    {% endif %}\n\n\n)\n\nselect * from windowed", "language": "sql", "refs": [{"name": "segment_web_sessions__stitched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_segment.segment_web_sessions__stitched"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_segment.segment_web_sessions__stitched": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "segment_web_sessions__stitched", "resource_type": "model", "package_name": "dbt_segment", "path": "sessionization/segment_web_sessions__stitched.sql", "original_file_path": "models/sessionization/segment_web_sessions__stitched.sql", "unique_id": "model.dbt_segment.segment_web_sessions__stitched", "fqn": ["dbt_segment", "sessionization", "segment_web_sessions__stitched"], "alias": "segment_web_sessions__stitched", "checksum": {"name": "sha256", "checksum": "28ab97d1bf1986d13e5719ad43eedfa63f6a13465588c8e24ae0450f0870b514"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "session_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": "session_id", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "sort": "session_start_tstamp", "dist": "session_id"}, "tags": [], "description": "This model joins initial session data with user stitching to get the field `blended_user_id`, the id for a user across all devices that they can be identified on. This logic is broken out from other models because, while incremental, it will frequently need to be rebuilt from scratch: this is because the user stitching process can change the `blended_user_id` values for historical sessions.\n\nIt is recommended to typically run this model in its default configuration (incrementally) but on some regular basis to do a `dbt run --full-refresh --models segment_web_sessions__stitched+` so that this model and downstream models get rebuilt.", "columns": {"session_id": {"name": "session_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_segment://models/sessionization/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "session_id", "sort": "session_start_tstamp", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "dist": "session_id", "cluster_by": "session_id"}, "created_at": 1714072384.337152, "relation_name": "`analytics-147612`.`dev_gsokolov`.`segment_web_sessions__stitched`", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'session_id',\n    sort = 'session_start_tstamp',\n    partition_by = {'field': 'session_start_tstamp', 'data_type': 'timestamp', 'granularity': var('segment_bigquery_partition_granularity')},\n    dist = 'session_id',\n    cluster_by = 'session_id'\n    )}}\n\nwith sessions as (\n\n    select * from {{ref('segment_web_sessions__initial')}}\n\n    {% if is_incremental() %}\n    {{\n        generate_sessionization_incremental_filter( this, 'session_start_tstamp', 'session_start_tstamp', '>' )\n    }}\n    {% endif %}\n\n),\n\nid_stitching as (\n\n    select * from {{ref('segment_web_user_stitching')}}\n\n),\n\njoined as (\n\n    select\n\n        sessions.*,\n\n        coalesce(id_stitching.user_id, sessions.anonymous_id)\n            as blended_user_id\n\n    from sessions\n    left join id_stitching using (anonymous_id)\n\n)\n\nselect * from joined", "language": "sql", "refs": [{"name": "segment_web_sessions__initial", "package": null, "version": null}, {"name": "segment_web_user_stitching", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_segment.segment_web_sessions__initial", "model.dbt_segment.segment_web_user_stitching"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_segment.segment_web_sessions__initial": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "segment_web_sessions__initial", "resource_type": "model", "package_name": "dbt_segment", "path": "sessionization/segment_web_sessions__initial.sql", "original_file_path": "models/sessionization/segment_web_sessions__initial.sql", "unique_id": "model.dbt_segment.segment_web_sessions__initial", "fqn": ["dbt_segment", "sessionization", "segment_web_sessions__initial"], "alias": "segment_web_sessions__initial", "checksum": {"name": "sha256", "checksum": "6d2163f98939fb7217db5ccfb16f9f1b8207bef40f33e463eaa74544ace8ad98"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "session_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": "session_id", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "sort": "session_start_tstamp", "dist": "session_id"}, "tags": [], "description": "This model performs the aggregation of page views into sessions. The `session_id` having already been calculated in `segment_web_page_views__sessionized`, this model simply calls a bunch of window functions to grab the first or last value of a given field and store it at the session level.", "columns": {"session_id": {"name": "session_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_segment://models/sessionization/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "session_id", "sort": "session_start_tstamp", "partition_by": {"field": "session_start_tstamp", "data_type": "timestamp", "granularity": "day"}, "dist": "session_id", "cluster_by": "session_id"}, "created_at": 1714072384.337049, "relation_name": "`analytics-147612`.`dev_gsokolov`.`segment_web_sessions__initial`", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'session_id',\n    sort = 'session_start_tstamp',\n    partition_by = {'field': 'session_start_tstamp', 'data_type': 'timestamp', 'granularity': var('segment_bigquery_partition_granularity')},\n    dist = 'session_id',\n    cluster_by = 'session_id'\n    )}}\n\n{% set partition_by = \"partition by source_name, session_id\" %}\n\n{% set window_clause = \"\n    partition by source_name, session_id\n    order by page_view_number\n    rows between unbounded preceding and unbounded following\n    \" %}\n\n{% set first_values = {\n    'utm_source' : 'utm_source',\n    'utm_content' : 'utm_content',\n    'utm_medium' : 'utm_medium',\n    'utm_campaign' : 'utm_campaign',\n    'utm_term' : 'utm_term',\n    'gclid' : 'gclid',\n    'page_url' : 'first_page_url',\n    'page_url_host' : 'first_page_url_host',\n    'page_url_path' : 'first_page_url_path',\n    'page_url_query' : 'first_page_url_query',\n    'referrer' : 'referrer',\n    'referrer_host' : 'referrer_host',\n    'device' : 'device',\n    'device_category' : 'device_category'\n    } %}\n\n{% set last_values = {\n    'page_url' : 'last_page_url',\n    'page_url_host' : 'last_page_url_host',\n    'page_url_path' : 'last_page_url_path',\n    'page_url_query' : 'last_page_url_query'\n    } %}\n\n{% for col in var('segment_pass_through_columns') %}\n    {% do first_values.update({col: 'first_' ~ col}) %}\n    {% do last_values.update({col: 'last_' ~ col}) %}\n{% endfor %}\n\nwith pageviews_sessionized as (\n\n    select * from {{ref('segment_web_page_views__sessionized')}}\n\n    {% if is_incremental() %}\n    {{\n        generate_sessionization_incremental_filter( this, 'tstamp', 'session_start_tstamp', '>' )\n    }}\n    {% endif %}\n\n),\n\nreferrer_mapping as (\n\n    select * from {{ ref('referrer_mapping') }}\n\n),\n\nagg as (\n\n    select distinct\n\n        source_name,\n        session_id,\n        anonymous_id,\n        min(tstamp) over ( {{partition_by}} ) as session_start_tstamp,\n        max(tstamp) over ( {{partition_by}} ) as session_end_tstamp,\n        count(*) over ( {{partition_by}} ) as page_views,\n\n        {% for (key, value) in first_values.items() %}\n        first_value({{key}}) over ({{window_clause}}) as {{value}},\n        {% endfor %}\n\n        {% for (key, value) in last_values.items() %}\n        last_value({{key}}) over ({{window_clause}}) as {{value}}{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from pageviews_sessionized\n\n),\n\ndiffs as (\n\n    select\n\n        *,\n\n        {{ dbt.datediff('session_start_tstamp', 'session_end_tstamp', 'second') }} as duration_in_s\n\n    from agg\n\n),\n\ntiers as (\n\n    select\n\n        *,\n\n        case\n            when duration_in_s between 0 and 9 then '0s to 9s'\n            when duration_in_s between 10 and 29 then '10s to 29s'\n            when duration_in_s between 30 and 59 then '30s to 59s'\n            when duration_in_s > 59 then '60s or more'\n            else null\n        end as duration_in_s_tier\n\n    from diffs\n\n),\n\nmapped as (\n\n    select\n        tiers.*,\n        referrer_mapping.medium as referrer_medium,\n        referrer_mapping.source as referrer_source\n\n    from tiers\n\n    left join referrer_mapping on tiers.referrer_host = referrer_mapping.host\n\n)\n\nselect * from mapped", "language": "sql", "refs": [{"name": "segment_web_page_views__sessionized", "package": null, "version": null}, {"name": "referrer_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.datediff"], "nodes": ["model.dbt_segment.segment_web_page_views__sessionized", "seed.dbt_segment.referrer_mapping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_segment.segment_web_page_views__sessionized": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "segment_web_page_views__sessionized", "resource_type": "model", "package_name": "dbt_segment", "path": "sessionization/segment_web_page_views__sessionized.sql", "original_file_path": "models/sessionization/segment_web_page_views__sessionized.sql", "unique_id": "model.dbt_segment.segment_web_page_views__sessionized", "fqn": ["dbt_segment", "sessionization", "segment_web_page_views__sessionized"], "alias": "segment_web_page_views__sessionized", "checksum": {"name": "sha256", "checksum": "2127f8a7333b856b56fb5f7f749d2b17f3983c450534a3cee8e437d7da1c8524"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "page_view_id", "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "cluster_by": "page_view_id", "partition_by": {"field": "tstamp", "data_type": "timestamp", "granularity": "day"}, "sort": "tstamp", "dist": "page_view_id"}, "tags": [], "description": "The purpose of this model is to assign a `session_id` to page views. The business logic of how this is done is that any period of inactivity of 30 minutes or more resets the session, and any subsequent page views are assigned a new `session_id`.\n\nThe implementation of this logic is rather involved, and requires multiple CTEs. Comments have been added to the source to describe the purpose of the CTEs that are more esoteric.", "columns": {"page_view_id": {"name": "page_view_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_segment://models/sessionization/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "page_view_id", "sort": "tstamp", "partition_by": {"field": "tstamp", "data_type": "timestamp", "granularity": "day"}, "dist": "page_view_id", "cluster_by": "page_view_id"}, "created_at": 1714072384.33677, "relation_name": "`analytics-147612`.`dev_gsokolov`.`segment_web_page_views__sessionized`", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'page_view_id',\n    sort = 'tstamp',\n    partition_by = {'field': 'tstamp', 'data_type': 'timestamp', 'granularity': var('segment_bigquery_partition_granularity')},\n    dist = 'page_view_id',\n    cluster_by = 'page_view_id'\n    )}}\n\n{#\nthe initial CTE in this model is unusually complicated; its function is to\nselect all pageviews (for all time) for users who have pageviews since the\nmodel was most recently run. there are many window functions in this model so\nin order to appropriately calculate all of them we need each users entire\npage view history, but we only want to grab that for users who have page view\nevents we need to calculate.\n#}\n\nwith pageviews as (\n\n    select * from {{ref('segment_web_page_views')}}\n\n    {% if is_incremental() %}\n    where anonymous_id in (\n        select distinct anonymous_id\n        from {{ref('segment_web_page_views')}}\n        {{\n            generate_sessionization_incremental_filter( this, 'tstamp', 'tstamp', '>' )\n        }}\n    )\n    {% endif %}\n\n),\n\nnumbered as (\n\n    --This CTE is responsible for assigning an all-time page view number for a\n    --given anonymous_id. We don't need to do this across devices because the\n    --whole point of this field is for sessionization, and sessions can't span\n    --multiple devices.\n\n    select\n\n        *,\n\n        row_number() over (\n            partition by source_name, anonymous_id\n            order by tstamp\n            ) as page_view_number\n\n    from pageviews\n\n),\n\nlagged as (\n\n    --This CTE is responsible for simply grabbing the last value of `tstamp`.\n    --We'll use this downstream to do timestamp math--it's how we determine the\n    --period of inactivity.\n\n    select\n\n        *,\n\n        lag(tstamp) over (\n            partition by source_name, anonymous_id\n            order by page_view_number\n            ) as previous_tstamp\n\n    from numbered\n\n),\n\ndiffed as (\n\n    --This CTE simply calculates `period_of_inactivity`.\n\n    select\n        *,\n        {{ dbt.datediff('previous_tstamp', 'tstamp', 'second') }} as period_of_inactivity\n    from lagged\n\n),\n\nnew_sessions as (\n\n    --This CTE calculates a single 1/0 field--if the period of inactivity prior\n    --to this page view was greater than 30 minutes, the value is 1, otherwise\n    --it's 0. We'll use this to calculate the user's session #.\n\n    select\n        *,\n        case\n            when period_of_inactivity <= {{var('segment_inactivity_cutoff')}} then 0\n            else 1\n        end as new_session\n    from diffed\n\n),\n\nsession_numbers as (\n\n    --This CTE calculates a user's session (1, 2, 3) number from `new_session`.\n    --This single field is the entire point of the entire prior series of\n    --calculations.\n\n    select\n\n        *,\n\n        sum(new_session) over (\n            partition by source_name, anonymous_id\n            order by page_view_number\n            rows between unbounded preceding and current row\n            ) as session_number\n\n    from new_sessions\n\n),\n\nsession_ids as (\n\n    --This CTE assigns a globally unique session id based on the combination of\n    --`anonymous_id` and `session_number`.\n\n    select\n\n        {{dbt_utils.star(ref('segment_web_page_views'))}},\n        page_view_number,\n        {{dbt_utils.generate_surrogate_key(['anonymous_id', 'session_number', 'source_name'])}} as session_id\n\n    from session_numbers\n\n)\n\nselect * from session_ids", "language": "sql", "refs": [{"name": "segment_web_page_views", "package": null, "version": null}, {"name": "segment_web_page_views", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.datediff", "macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_segment.segment_web_page_views"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_segment.segment_web_page_views": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "segment_web_page_views", "resource_type": "model", "package_name": "dbt_segment", "path": "base/segment_web_page_views.sql", "original_file_path": "models/base/segment_web_page_views.sql", "unique_id": "model.dbt_segment.segment_web_page_views", "fqn": ["dbt_segment", "base", "segment_web_page_views"], "alias": "segment_web_page_views", "checksum": {"name": "sha256", "checksum": "312ae6d2042fb9320085f28c1c158403deea8008c381042f8a4df8730a1d7c93"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This is a base model for Segment's web page views table. It does some straightforward renaming and parsing of Segment raw data in this table.\nIf a page view id has multiple entries in the source table then deduplication is done to keep the row with the earliest `received_at` timestamp.", "columns": {"page_view_id": {"name": "page_view_id", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_segment://models/base/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.347147, "relation_name": "`analytics-147612`.`dev_gsokolov`.`segment_web_page_views`", "raw_code": "with\n\n{#\nThe if statement below checks to see if segment_page_views_table is a string or a list, and then builds the model accordingly\n#}\n\n{% if var('segment_page_views_table') is string %}\n    \n    unioned_sources AS (\n        select cast('segment_page_views_table' as text) as source_name, * from {{var('segment_page_views_table')}}\n    ),\n\n\n{% elif var('segment_page_views_table') is iterable %}\n\n    {#\n    The section below takes each of the items listed for the segment_page_views_table variable, creates CTEs for them,\n    and then adds a field to note the name of the source table that the records are related to.\n    #}\n\n    unioned_sources as (\n        {% for table_ref in var('segment_page_views_table', default=[]) %}\n            SELECT\n                '{{ table_ref }}' as source_name\n                , *\n            FROM\n                {{ ref(table_ref) }}\n            {%- if not loop.last %}\n                UNION ALL\n            {%- endif %}  \n        {% endfor %}\n        ),\n\n{% endif %}\n\n\nrow_numbering as (\n\n    select\n        *,\n        row_number() over (partition by source_name, id order by received_at asc) as row_num\n    from unioned_sources\n\n),\n\ndeduped as (\n\n    select\n        *\n    from row_numbering\n    where row_num = 1\n\n),\n\nrenamed as (\n\n    select\n\n        source_name,\n        id as page_view_id,\n        anonymous_id,\n        user_id,\n\n        received_at as received_at_tstamp,\n        sent_at as sent_at_tstamp,\n        timestamp as tstamp,\n\n        url as page_url,\n        {{ dbt_utils.get_url_host('url') }} as page_url_host,\n        path as page_url_path,\n        title as page_title,\n        search as page_url_query,\n\n        referrer,\n        replace(\n            {{ dbt_utils.get_url_host('referrer') }},\n            'www.',\n            ''\n        ) as referrer_host,\n\n        context_campaign_source as utm_source,\n        context_campaign_medium as utm_medium,\n        context_campaign_name as utm_campaign,\n        context_campaign_term as utm_term,\n        context_campaign_content as utm_content,\n        {{ dbt_utils.get_url_parameter('url', 'gclid') }} as gclid,\n        context_ip as ip,\n        context_user_agent as user_agent,\n        case\n            when lower(context_user_agent) like '%android%' then 'Android'\n            else replace(\n                {{ dbt.split_part(dbt.split_part('context_user_agent', \"'('\", 2), \"' '\", 1) }},\n                ';', '')\n        end as device\n\n        {% if var('segment_pass_through_columns') != [] %}\n        ,\n        {{ var('segment_pass_through_columns') | join (\", \")}}\n\n        {% endif %}\n\n    from deduped\n\n),\n\nfinal as (\n\n    select\n        *,\n        case\n            when device = 'iPhone' then 'iPhone'\n            when device = 'Android' then 'Android'\n            when device in ('iPad', 'iPod') then 'Tablet'\n            when device in ('Windows', 'Macintosh', 'X11') then 'Desktop'\n            else 'Uncategorized'\n        end as device_category\n    from renamed\n\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.get_url_host", "macro.dbt_utils.get_url_parameter", "macro.dbt.split_part"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.dbt_segment.referrer_mapping": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "referrer_mapping", "resource_type": "seed", "package_name": "dbt_segment", "path": "referrer_mapping.csv", "original_file_path": "seeds/referrer_mapping.csv", "unique_id": "seed.dbt_segment.referrer_mapping", "fqn": ["dbt_segment", "referrer_mapping"], "alias": "referrer_mapping", "checksum": {"name": "sha256", "checksum": "289ec2259616273eedb156667e5fec756f5bdd3e7330b67539469fa71c4a109e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "This is a CSV version of Snowplow's [referer parser database](https://github.com/snowplow-referer-parser/referer-parser)", "columns": {"medium": {"name": "medium", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "host": {"name": "host", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_segment://seeds/seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.3325608, "relation_name": "`analytics-147612`.`dev_gsokolov`.`referrer_mapping`", "raw_code": "", "root_path": "/Users/gsokolov/Library/CloudStorage/Dropbox/dbt_octafx/dbt_packages/dbt_segment", "depends_on": {"macros": []}}, "model.dbt_project_evaluator.stg_columns": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_columns.sql", "original_file_path": "models/staging/graph/stg_columns.sql", "unique_id": "model.dbt_project_evaluator.stg_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_columns"], "alias": "stg_columns", "checksum": {"name": "sha256", "checksum": "c8f3f73b537d183c2b66a143cf4a5bd6f7e0628c091e82b9938183c1d6c8ab71"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072383.351596, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_columns`", "raw_code": "with\n\nfinal as (\n\n    {{ dbt_utils.union_relations([\n        ref('base_node_columns'),\n        ref('base_source_columns')\n    ])}}\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_node_columns", "package": null, "version": null}, {"name": "base_source_columns", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.dbt_project_evaluator.base_node_columns", "model.dbt_project_evaluator.base_source_columns"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_nodes": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_nodes", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_nodes.sql", "original_file_path": "models/staging/graph/stg_nodes.sql", "unique_id": "model.dbt_project_evaluator.stg_nodes", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_nodes"], "alias": "stg_nodes", "checksum": {"name": "sha256", "checksum": "e862e7d894d4bcccdb574dcd2df096d9522cfff01f04652c9f07e4a695977760"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='nodes') }}"]}, "created_at": 1714072383.356472, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_nodes`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt.type_string() }}) as unique_id,\n    cast(null as {{ dbt.type_string() }}) as name,\n    cast(null as {{ dbt.type_string() }}) as resource_type,\n    cast(null as {{ dbt.type_string() }}) as file_path,\n    cast(True as boolean) as is_enabled,\n    cast(null as {{ dbt.type_string() }}) as materialized,\n    cast(null as {{ dbt.type_string() }}) as on_schema_change,\n    cast(null as {{ dbt.type_string() }}) as model_group,\n    cast(null as {{ dbt.type_string() }}) as access,\n    cast(null as {{ dbt.type_string() }}) as latest_version,\n    cast(null as {{ dbt.type_string() }}) as version,\n    cast(null as {{ dbt.type_string() }}) as deprecation_date,\n    cast(True as boolean) as is_contract_enforced,\n    cast(0 as {{ dbt.type_int() }}) as total_defined_columns,\n    cast(0 as {{ dbt.type_int() }}) as total_described_columns,\n    cast(null as {{ dbt.type_string() }}) as database,\n    cast(null as {{ dbt.type_string() }}) as schema,\n    cast(null as {{ dbt.type_string() }}) as package_name,\n    cast(null as {{ dbt.type_string() }}) as alias,\n    cast(True as boolean) as is_described,\n    cast(null as {{ dbt.type_string() }}) as column_name,\n    cast(null as {{ dbt.type_string() }}) as meta,\n    cast(null as {{ dbt.type_string() }}) as hard_coded_references,\n    cast(null as {{ dbt.type_string() }}) as macro_dependencies,\n    cast(True as boolean) as is_generic_test,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt_project_evaluator.insert_resources_from_graph"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_exposure_relationships": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_exposure_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_exposure_relationships.sql", "original_file_path": "models/staging/graph/stg_exposure_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_exposure_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_exposure_relationships"], "alias": "stg_exposure_relationships", "checksum": {"name": "sha256", "checksum": "80d348798f7b7c4a00990729922ccdd248ff8f8b29ee3dbffdd6589315d3930f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072383.3665679, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_exposure_relationships`", "raw_code": "with \n\n_base_exposure_relationships as (\n    select * from {{ ref('base_exposure_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_exposure_relationships\n)\n\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_exposure_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_exposure_relationships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_node_relationships": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_node_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_node_relationships.sql", "original_file_path": "models/staging/graph/stg_node_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_node_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_node_relationships"], "alias": "stg_node_relationships", "checksum": {"name": "sha256", "checksum": "3b1dff9088982b74dc0917adbd9567d164e56b85c9fec26adfc961be2b22ac63"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072383.371711, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_node_relationships`", "raw_code": "with \n\n_base_node_relationships as (\n    select * from {{ ref('base_node_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_node_relationships\n)\n\n-- we need distinct as the graph lists relationships multiple times if they are ref'd multiple times\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_node_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_node_relationships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_sources": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_sources.sql", "original_file_path": "models/staging/graph/stg_sources.sql", "unique_id": "model.dbt_project_evaluator.stg_sources", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_sources"], "alias": "stg_sources", "checksum": {"name": "sha256", "checksum": "fb212f965b115ee0600184ab12e205754211ebf47bc23bcc44285ec5e68e61ff"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='sources') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='sources') }}"]}, "created_at": 1714072383.376123, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_sources`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='sources') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt.type_string() }}) as unique_id,\n    cast(null as {{ dbt.type_string() }}) as name,\n    cast(null as {{ dbt.type_string() }}) as file_path,\n    cast(null as {{ dbt.type_string() }}) as alias,\n    cast(null as {{ dbt.type_string() }}) as resource_type,\n    cast(null as {{ dbt.type_string() }}) as source_name,\n    cast(True as boolean) as is_source_described,\n    cast(True as boolean) as is_described,\n    cast(True as boolean) as is_enabled,\n    cast(null as {{ dbt.type_string() }}) as loaded_at_field,\n    cast(null as {{ dbt.type_string() }}) as database,\n    cast(null as {{ dbt.type_string() }}) as schema,\n    cast(null as {{ dbt.type_string() }}) as package_name,\n    cast(null as {{ dbt.type_string() }}) as loader,\n    cast(null as {{ dbt.type_string() }}) as identifier,\n    cast(null as {{ dbt.type_string() }})  as meta,\n    cast(True as boolean) as is_excluded\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_project_evaluator.insert_resources_from_graph"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_exposures": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_exposures", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_exposures.sql", "original_file_path": "models/staging/graph/stg_exposures.sql", "unique_id": "model.dbt_project_evaluator.stg_exposures", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_exposures"], "alias": "stg_exposures", "checksum": {"name": "sha256", "checksum": "e3d1d84450b9d43a0632aa52fcd8c5e1eecd908119c6e68f79d7be6ecbbadc92"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='exposures') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='exposures') }}"]}, "created_at": 1714072383.385385, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_exposures`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='exposures') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt.type_string() }} ) as unique_id,\n    cast(null as {{ dbt.type_string() }} ) as name,\n    cast(null as {{ dbt.type_string() }} ) as resource_type,\n    cast(null as {{ dbt.type_string() }} ) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as {{ dbt.type_string() }} ) as exposure_type,\n    cast(null as {{ dbt.type_string() }} ) as maturity,\n    cast(null as {{ dbt.type_string() }} ) as package_name,\n    cast(null as {{ dbt.type_string() }} ) as url,\n    cast(null as {{ dbt.type_string() }} ) as owner_name,\n    cast(null as {{ dbt.type_string() }} ) as owner_email,\n    cast(null as {{ dbt.type_string() }} ) as meta\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_project_evaluator.insert_resources_from_graph"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_metric_relationships": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_metric_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_metric_relationships.sql", "original_file_path": "models/staging/graph/stg_metric_relationships.sql", "unique_id": "model.dbt_project_evaluator.stg_metric_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_metric_relationships"], "alias": "stg_metric_relationships", "checksum": {"name": "sha256", "checksum": "0351601c92dd9b5b4b0a4fac69e491f2c6fd568cf38aeb1040947d6b3ecbb9ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072383.39307, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_metric_relationships`", "raw_code": "with \n\n_base_metric_relationships as (\n    select * from {{ ref('base_metric_relationships') }}\n),\n\nfinal as (\n    select \n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id, \n        *\n    from _base_metric_relationships\n)\n\nselect distinct * from final", "language": "sql", "refs": [{"name": "base_metric_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.base_metric_relationships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_metrics": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_metrics", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/stg_metrics.sql", "original_file_path": "models/staging/graph/stg_metrics.sql", "unique_id": "model.dbt_project_evaluator.stg_metrics", "fqn": ["dbt_project_evaluator", "staging", "graph", "stg_metrics"], "alias": "stg_metrics", "checksum": {"name": "sha256", "checksum": "c47021f9a0b97ad2ab8c232fdd1c8bfc969d7bd59f700d37771c8c0de77bbed4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='metrics') }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='metrics') }}"]}, "created_at": 1714072383.3982642, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_metrics`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='metrics') }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n)\n\nselect \n\n    cast(null as {{ dbt.type_string() }}) as unique_id,\n    cast(null as {{ dbt.type_string() }}) as name,\n    cast(null as {{ dbt.type_string() }}) as resource_type,\n    cast(null as {{ dbt.type_string() }}) as file_path,\n    cast(True as boolean) as is_described,\n    cast(null as {{ dbt.type_string() }}) as metric_type,\n    cast(null as {{ dbt.type_string() }}) as label,\n    cast(null as {{ dbt.type_string() }}) as package_name,\n    cast(null as {{ dbt.type_string() }}) as metric_filter,\n    cast(null as {{ dbt.type_string() }}) as metric_measure,\n    cast(null as {{ dbt.type_string() }}) as metric_measure_alias,\n    cast(null as {{ dbt.type_string() }}) as numerator,\n    cast(null as {{ dbt.type_string() }}) as denominator,\n    cast(null as {{ dbt.type_string() }}) as expr,\n    cast(null as {{ dbt.type_string() }}) as metric_window,\n    cast(null as {{ dbt.type_string() }}) as grain_to_date,\n    cast(null as {{ dbt.type_string() }}) as meta\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_project_evaluator.insert_resources_from_graph"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.base_node_relationships": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "base_node_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_node_relationships.sql", "original_file_path": "models/staging/graph/base/base_node_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_node_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_node_relationships"], "alias": "base_node_relationships", "checksum": {"name": "sha256", "checksum": "73abbe4663c2a2672fcb6b8c037522168e07bd6c4e528f0676f765a03028f884"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}"]}, "created_at": 1714072383.4066901, "relation_name": "`analytics-147612`.`dev_gsokolov`.`base_node_relationships`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt.type_string()}}) as resource_id,\n    cast(null as {{ dbt.type_string()}}) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_project_evaluator.insert_resources_from_graph"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.base_source_columns": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "base_source_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_source_columns.sql", "original_file_path": "models/staging/graph/base/base_source_columns.sql", "unique_id": "model.dbt_project_evaluator.base_source_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_source_columns"], "alias": "base_source_columns", "checksum": {"name": "sha256", "checksum": "0361846b5ce4dc64c905001b4d31573810a5ad7b361be8d176e6b3fea4230250"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}"]}, "created_at": 1714072383.412617, "relation_name": "`analytics-147612`.`dev_gsokolov`.`base_source_columns`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='sources', columns=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt.type_string() }}) as node_unique_id,\n    cast(null as {{ dbt.type_string()}}) as name,\n    cast(null as {{ dbt.type_string()}}) as description,\n    cast(null as {{ dbt.type_string()}}) as data_type,\n    cast(null as {{ dbt.type_string()}}) as quote\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_project_evaluator.insert_resources_from_graph"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.base_node_columns": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "base_node_columns", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_node_columns.sql", "original_file_path": "models/staging/graph/base/base_node_columns.sql", "unique_id": "model.dbt_project_evaluator.base_node_columns", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_node_columns"], "alias": "base_node_columns", "checksum": {"name": "sha256", "checksum": "4af156889a1ebfce2de8752e6998bb031617b5fee9a20e352fd9de72e31603bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}"]}, "created_at": 1714072383.4211042, "relation_name": "`analytics-147612`.`dev_gsokolov`.`base_node_columns`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='nodes', columns=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt.type_string() }}) as node_unique_id,\n    cast(null as {{ dbt.type_string()}}) as name,\n    cast(null as {{ dbt.type_string()}}) as description,\n    cast(null as {{ dbt.type_string()}}) as data_type,\n    cast(null as {{ dbt.type_string()}}) as quote\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_project_evaluator.insert_resources_from_graph"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.base_exposure_relationships": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "base_exposure_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_exposure_relationships.sql", "original_file_path": "models/staging/graph/base/base_exposure_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_exposure_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_exposure_relationships"], "alias": "base_exposure_relationships", "checksum": {"name": "sha256", "checksum": "43d70b23da009db4032e146081258b658390c10d8a7443b7f05fa2905bc3972b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}"]}, "created_at": 1714072383.4287481, "relation_name": "`analytics-147612`.`dev_gsokolov`.`base_exposure_relationships`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='exposures', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt.type_string()}}) as resource_id,\n    cast(null as {{ dbt.type_string()}}) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_project_evaluator.insert_resources_from_graph"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.base_metric_relationships": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "base_metric_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/graph/base/base_metric_relationships.sql", "original_file_path": "models/staging/graph/base/base_metric_relationships.sql", "unique_id": "model.dbt_project_evaluator.base_metric_relationships", "fqn": ["dbt_project_evaluator", "staging", "graph", "base", "base_metric_relationships"], "alias": "base_metric_relationships", "checksum": {"name": "sha256", "checksum": "e3433f665162baee1d841f2623208dfda3b741d1419fcbe2b613e810a0fe1016"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [{"sql": "{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}"]}, "created_at": 1714072383.4369202, "relation_name": "`analytics-147612`.`dev_gsokolov`.`base_metric_relationships`", "raw_code": "{{\n    config(\n        materialized='table',\n        post_hook=\"{{ insert_resources_from_graph(this, resource_type='metrics', relationships=True) }}\"\n    )\n}}\n\n{% if execute %}\n    {{ check_model_is_table(model) }}\n{% endif %}\n\n/* Bigquery won't let us `where` without `from` so we use this workaround */\nwith dummy_cte as (\n    select 1 as foo\n) \n\nselect \n    cast(null as {{ dbt.type_string()}}) as resource_id,\n    cast(null as {{ dbt.type_string()}}) as direct_parent_id,\n    cast(True as boolean) as is_primary_relationship\n\nfrom dummy_cte\nwhere false", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_project_evaluator.insert_resources_from_graph"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_naming_convention_folders": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_naming_convention_folders", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/variables/stg_naming_convention_folders.sql", "original_file_path": "models/staging/variables/stg_naming_convention_folders.sql", "unique_id": "model.dbt_project_evaluator.stg_naming_convention_folders", "fqn": ["dbt_project_evaluator", "staging", "variables", "stg_naming_convention_folders"], "alias": "stg_naming_convention_folders", "checksum": {"name": "sha256", "checksum": "269b827916875eb1bdc24c13fd0c33735c86aea2cbb2a978bc3668e5c8cb516f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}"}, "created_at": 1714072383.4438999, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_naming_convention_folders`", "raw_code": "{% set var_model_types = var('model_types') %}\n{% set suffix_folder = '_folder_name' %}\n\n{% set vars_folders = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_folders.append(model_type ~ suffix_folder) %}\n{% endfor %}\n\nwith vars_folders_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_folders) }}\n)\n\nselect\n    var_name as folder_name, \n    {{ dbt.replace('var_name', wrap_string_with_quotes(suffix_folder), \"''\") }} as model_type,\n    var_value as folder_name_value\nfrom vars_folders_table", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.loop_vars", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.replace"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.stg_naming_convention_prefixes": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "stg_naming_convention_prefixes", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "staging/variables/stg_naming_convention_prefixes.sql", "original_file_path": "models/staging/variables/stg_naming_convention_prefixes.sql", "unique_id": "model.dbt_project_evaluator.stg_naming_convention_prefixes", "fqn": ["dbt_project_evaluator", "staging", "variables", "stg_naming_convention_prefixes"], "alias": "stg_naming_convention_prefixes", "checksum": {"name": "sha256", "checksum": "2dccea5430120d7f403c4f57d02227545db604d23925f41b474236a4094d8c04"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type == 'redshift' else 'view' }}"}, "created_at": 1714072383.450297, "relation_name": "`analytics-147612`.`dev_gsokolov`.`stg_naming_convention_prefixes`", "raw_code": "{% set var_model_types = var('model_types') %}\n{% set suffix_model_type = '_prefixes' %}\n\n{% set vars_prefix = [] %}\n\n{% for model_type in var_model_types %}\n  {% do vars_prefix.append(model_type ~ suffix_model_type) %}\n{% endfor %}\n\nwith vars_prefix_table as (\n    {{ dbt_project_evaluator.loop_vars(vars_prefix) }}\n),\n\nparsed as (\n\nselect\n    var_name as prefix_name, \n    {{ dbt.replace('var_name', wrap_string_with_quotes(suffix_model_type) , \"''\") }} as model_type,\n    var_value as prefix_value\nfrom vars_prefix_table\n\n),\n\nfinal as (\n\n    select\n        {{ dbt_utils.generate_surrogate_key(['model_type', 'prefix_value']) }} as unique_id,\n        *\n    from parsed\n\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.loop_vars", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.replace", "macro.dbt_utils.generate_surrogate_key"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_undocumented_models": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_undocumented_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_models.sql", "original_file_path": "models/marts/documentation/fct_undocumented_models.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_models", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_models"], "alias": "fct_undocumented_models", "checksum": {"name": "sha256", "checksum": "c8667f2c44681081d01b644a1cec9f8a0d5d62c1f89d132b5e9fa3e8cace2554"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model contains all models that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.404774, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_undocumented_models`", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name,\n        model_type\n\n    from all_resources\n    where not is_described and resource_type = 'model'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_documentation_coverage": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_documentation_coverage", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_documentation_coverage.sql", "original_file_path": "models/marts/documentation/fct_documentation_coverage.sql", "unique_id": "model.dbt_project_evaluator.fct_documentation_coverage", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_documentation_coverage"], "alias": "fct_documentation_coverage", "checksum": {"name": "sha256", "checksum": "8c7533262412230d48b530bd7c237acf553b666818af0e75d850162ae7087ff5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model calculates the percent of enabled models in the project that have a configured description.  We recommend you describe at least 75 percent of your models. \n", "columns": {"documentation_coverage_pct": {"name": "documentation_coverage_pct", "description": "the number of models in the project with a description divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.404682, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_documentation_coverage`", "raw_code": "with\n\nmodels as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nconversion as (\n    select\n        resource_id,\n        case when is_described then 1 else 0 end as is_described_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when is_described and model_type = '{{ model_type }}' then 1.0 else 0 end as is_described_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n),\n\nfinal as (\n    select\n        {{ dbt.current_timestamp() if target.type != 'trino' else 'current_timestamp(6)' }} as measured_at,\n        count(*) as total_models,\n        sum(is_described_model) as documented_models,\n        round(sum(is_described_model) * 100.00 / count(*), 2) as documentation_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(\n                {{ dbt_utils.safe_divide(\n                    numerator = \"sum(is_described_\" ~ model_type ~ \"_model) * 100\", \n                    denominator = \"count(is_\" ~ model_type ~ \"_model)\"\n                ) }}\n            , 2) as {{ model_type }}_documentation_coverage_pct{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from models\n    left join conversion\n    on models.resource_id = conversion.resource_id\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt_utils.safe_divide"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_undocumented_sources": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_undocumented_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_sources.sql", "original_file_path": "models/marts/documentation/fct_undocumented_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_sources", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_sources"], "alias": "fct_undocumented_sources", "checksum": {"name": "sha256", "checksum": "ca85ce862cbe9416515290c5f7e0b4732394c94caad12a0e6d7e0262ca6410be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model contains all sources that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.404913, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_undocumented_sources`", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select distinct\n        source_name\n\n    from all_resources\n    where not is_source_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_undocumented_source_tables": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_undocumented_source_tables", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/documentation/fct_undocumented_source_tables.sql", "original_file_path": "models/marts/documentation/fct_undocumented_source_tables.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_source_tables", "fqn": ["dbt_project_evaluator", "marts", "documentation", "fct_undocumented_source_tables"], "alias": "fct_undocumented_source_tables", "checksum": {"name": "sha256", "checksum": "ccbde566a67506d88bd664fe2bab505f2736ab003510e6280772b02cc7e20394"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model contains all source tables that do not have a description configured in a YML file. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/documentation/documentation.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.4048462, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_undocumented_source_tables`", "raw_code": "with\n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nfinal as (\n\n    select\n        resource_name\n\n    from all_resources\n    where not is_described and resource_type = 'source'\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.int_direct_relationships": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_direct_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_direct_relationships.sql", "original_file_path": "models/marts/core/int_direct_relationships.sql", "unique_id": "model.dbt_project_evaluator.int_direct_relationships", "fqn": ["dbt_project_evaluator", "marts", "core", "int_direct_relationships"], "alias": "int_direct_relationships", "checksum": {"name": "sha256", "checksum": "2da880c84d8da5c7709b7b073ff320159243b5833a672a2f0fb6adae341b0ca1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks'] else 'view' }}"}, "created_at": 1714072383.480733, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_direct_relationships`", "raw_code": "-- one record for each resource in the graph and its direct parent\nwith \n\nall_graph_resources as (\n    select\n        resource_id,\n        resource_name,\n        resource_type,\n        file_path,\n        directory_path, \n        file_name,\n        model_type,\n        materialized,\n        is_public, \n        access, \n        source_name,\n        is_excluded\n    from {{ ref('int_all_graph_resources') }}\n),\n\ndirect_model_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_node_relationships')}}\n),\n\ndirect_exposure_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_exposure_relationships')}}\n),\n\ndirect_metrics_relationships as (\n    select  \n        resource_id,\n        direct_parent_id,\n        is_primary_relationship\n    from {{ ref('stg_metric_relationships')}}\n),\n\n-- for all resources in the graph, find their direct parent\ndirect_relationships as (\n    select\n        all_graph_resources.*,\n        case \n            when all_graph_resources.resource_type = 'source' then null\n            when all_graph_resources.resource_type = 'exposure' then exposures.direct_parent_id\n            when all_graph_resources.resource_type = 'metric' then metrics.direct_parent_id\n            when all_graph_resources.resource_type in ('model', 'snapshot', 'test') then models.direct_parent_id\n            else null\n        end as direct_parent_id,\n        (\n            all_graph_resources.resource_type = 'test'\n            and models.is_primary_relationship\n        ) as is_primary_test_relationship\n    from all_graph_resources\n    left join direct_model_relationships as models\n        on all_graph_resources.resource_id = models.resource_id\n    left join direct_exposure_relationships as exposures\n        on all_graph_resources.resource_id = exposures.resource_id\n    left join direct_metrics_relationships as metrics\n        on all_graph_resources.resource_id = metrics.resource_id\n),\n\nfinal as (\n    select\n        {{ dbt_utils.generate_surrogate_key(['resource_id', 'direct_parent_id']) }} as unique_id,\n        *\n    from direct_relationships\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_node_relationships", "package": null, "version": null}, {"name": "stg_exposure_relationships", "package": null, "version": null}, {"name": "stg_metric_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_node_relationships", "model.dbt_project_evaluator.stg_exposure_relationships", "model.dbt_project_evaluator.stg_metric_relationships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.int_all_dag_relationships": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_all_dag_relationships", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_all_dag_relationships.sql", "original_file_path": "models/marts/core/int_all_dag_relationships.sql", "unique_id": "model.dbt_project_evaluator.int_all_dag_relationships", "fqn": ["dbt_project_evaluator", "marts", "core", "int_all_dag_relationships"], "alias": "int_all_dag_relationships", "checksum": {"name": "sha256", "checksum": "b4c408aa270f14f715b34649af63bf54609d14d2995c38005e858574b531b731"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['bigquery', 'redshift', 'databricks'] else 'view' }}"}, "created_at": 1714072383.486597, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_all_dag_relationships`", "raw_code": "-- creates a cte called all_relationships that will either use \"with recursive\" or loops depending on the DW\n{{ dbt_project_evaluator.recursive_dag() }}\n\nselect * from all_relationships\norder by parent, distance", "language": "sql", "refs": [{"name": "int_direct_relationships", "package": null, "version": null}, {"name": "int_all_graph_resources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.recursive_dag"], "nodes": ["model.dbt_project_evaluator.int_direct_relationships", "model.dbt_project_evaluator.int_all_graph_resources"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.int_all_graph_resources": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_all_graph_resources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/core/int_all_graph_resources.sql", "original_file_path": "models/marts/core/int_all_graph_resources.sql", "unique_id": "model.dbt_project_evaluator.int_all_graph_resources", "fqn": ["dbt_project_evaluator", "marts", "core", "int_all_graph_resources"], "alias": "int_all_graph_resources", "checksum": {"name": "sha256", "checksum": "8e98d29ddc021e0096a82c3e265c1464ce24337bcdc46bafe0becc90ecf8d9b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072383.496525, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_all_graph_resources`", "raw_code": "-- one row for each resource in the graph\n\n{# flatten the sets of permissable primary key test sets to one level for later iteration #}\n{%- set test_macro_list = [] %}\n{%- for test_set in var('primary_key_test_macros') -%}\n      {%- for test in test_set %}\n        {%- do test_macro_list.append(test) -%}\n      {%- endfor %}\n{%- endfor -%}\n\n{%- set quoted_directory_pattern = wrap_string_with_quotes(get_directory_pattern()) %}\n\nwith unioned as (\n\n    {{ dbt_utils.union_relations([\n        ref('stg_nodes'),\n        ref('stg_exposures'),\n        ref('stg_metrics'),\n        ref('stg_sources')\n    ])}}\n\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n), \n\nnaming_convention_folders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nunioned_with_calc as (\n    select \n        *,\n        case \n            when resource_type = 'source' then  {{ dbt.concat(['source_name',\"'.'\",'name']) }}\n            when version is not null then {{ dbt.concat(['name',\"'.v'\",'version']) }} \n            else name \n        end as resource_name,\n        case\n            when resource_type = 'source' then null\n            else {{ dbt.split_part('name', \"'_'\", 1) }}||'_' \n        end as prefix,\n        {{ get_dbtreplace_directory_pattern() }} as directory_path,\n        regexp_replace(file_path,'.*{{ get_regexp_directory_pattern() }}','') as file_name\n    from unioned\n    where coalesce(is_enabled, True) = True and package_name != 'dbt_project_evaluator'\n), \n\njoined as (\n\n    select\n        unioned_with_calc.unique_id as resource_id, \n        unioned_with_calc.resource_name, \n        unioned_with_calc.prefix, \n        unioned_with_calc.resource_type, \n        unioned_with_calc.file_path, \n        unioned_with_calc.directory_path,\n        unioned_with_calc.is_generic_test,\n        unioned_with_calc.file_name,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            else naming_convention_prefixes.model_type \n        end as model_type_prefix,\n        case \n            when unioned_with_calc.resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            when {{ dbt.position(dbt.concat([quoted_directory_pattern, 'naming_convention_folders.folder_name_value', quoted_directory_pattern]),'unioned_with_calc.directory_path') }} = 0 then null\n            else naming_convention_folders.model_type \n        end as model_type_folder,\n        {{ dbt.position(dbt.concat([quoted_directory_pattern, 'naming_convention_folders.folder_name_value', quoted_directory_pattern]),'unioned_with_calc.directory_path') }} as position_folder,  \n        nullif(unioned_with_calc.column_name, '') as column_name,\n        {% for test in test_macro_list %}\n        unioned_with_calc.macro_dependencies like '%macro.{{ test }}%' and unioned_with_calc.resource_type = 'test' as is_{{ test.split('.')[1] }},  \n        {% endfor %}\n        unioned_with_calc.is_enabled, \n        unioned_with_calc.materialized, \n        unioned_with_calc.on_schema_change, \n        unioned_with_calc.database, \n        unioned_with_calc.schema, \n        unioned_with_calc.package_name, \n        unioned_with_calc.alias, \n        unioned_with_calc.is_described, \n        unioned_with_calc.model_group, \n        unioned_with_calc.access, \n        unioned_with_calc.access = 'public' as is_public, \n        unioned_with_calc.latest_version, \n        unioned_with_calc.version, \n        unioned_with_calc.deprecation_date, \n        unioned_with_calc.is_contract_enforced, \n        unioned_with_calc.total_defined_columns, \n        unioned_with_calc.total_described_columns, \n        unioned_with_calc.exposure_type, \n        unioned_with_calc.maturity, \n        unioned_with_calc.url, \n        unioned_with_calc.owner_name,\n        unioned_with_calc.owner_email,\n        unioned_with_calc.meta,\n        unioned_with_calc.macro_dependencies,\n        unioned_with_calc.metric_type, \n        unioned_with_calc.label, \n        unioned_with_calc.metric_filter,\n        unioned_with_calc.metric_measure,\n        unioned_with_calc.metric_measure_alias,\n        unioned_with_calc.numerator,\n        unioned_with_calc.denominator,\n        unioned_with_calc.expr,\n        unioned_with_calc.metric_window,\n        unioned_with_calc.grain_to_date,\n        unioned_with_calc.source_name, -- NULL for non-source resources\n        unioned_with_calc.is_source_described, \n        unioned_with_calc.loaded_at_field, \n        unioned_with_calc.loader, \n        unioned_with_calc.identifier,\n        unioned_with_calc.hard_coded_references, -- NULL for non-model resources\n        unioned_with_calc.is_excluded -- NULL for metrics and exposures\n\n    from unioned_with_calc\n    left join naming_convention_prefixes\n        on unioned_with_calc.prefix = naming_convention_prefixes.prefix_value\n\n    cross join naming_convention_folders   \n\n), \n\ncalculate_model_type as (\n    select \n        *, \n        case \n            when resource_type in ('test', 'source', 'metric', 'exposure', 'seed') then null\n            -- by default we will define the model type based on its prefix in the case prefix and folder types are different\n            else coalesce(model_type_prefix, model_type_folder, 'other') \n        end as model_type,\n        row_number() over (partition by resource_id order by position_folder desc) as folder_name_rank\n    from joined\n),\n\nfinal as (\n    select\n        *\n    from calculate_model_type\n    where folder_name_rank = 1\n)\n\nselect \n    *\nfrom final", "language": "sql", "refs": [{"name": "stg_nodes", "package": null, "version": null}, {"name": "stg_exposures", "package": null, "version": null}, {"name": "stg_metrics", "package": null, "version": null}, {"name": "stg_sources", "package": null, "version": null}, {"name": "stg_naming_convention_prefixes", "package": null, "version": null}, {"name": "stg_naming_convention_folders", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_utils.union_relations", "macro.dbt.concat", "macro.dbt.split_part", "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern", "macro.dbt_project_evaluator.get_regexp_directory_pattern", "macro.dbt.position"], "nodes": ["model.dbt_project_evaluator.stg_nodes", "model.dbt_project_evaluator.stg_exposures", "model.dbt_project_evaluator.stg_metrics", "model.dbt_project_evaluator.stg_sources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "model.dbt_project_evaluator.stg_naming_convention_folders"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_multiple_sources_joined": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_multiple_sources_joined", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_multiple_sources_joined.sql", "original_file_path": "models/marts/dag/fct_multiple_sources_joined.sql", "unique_id": "model.dbt_project_evaluator.fct_multiple_sources_joined", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_multiple_sources_joined"], "alias": "fct_multiple_sources_joined", "checksum": {"name": "sha256", "checksum": "83eb58c45643770dc386ca0180ec384ff959fced06a692d39edb11670d6a59d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each instance where a model references more than one source.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.421212, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_multiple_sources_joined`", "raw_code": "-- this model finds cases where a model references more than one source\nwith direct_source_relationships as (\n    select distinct\n        child,\n        parent\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nmultiple_sources_joined as (\n    select\n        child,\n        {{ dbt.listagg(\n            measure='parent', \n            delimiter_text=\"', '\", \n            order_by_clause='order by parent' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as source_parents\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from multiple_sources_joined\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_root_models": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_root_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_root_models.sql", "original_file_path": "models/marts/dag/fct_root_models.sql", "unique_id": "model.dbt_project_evaluator.fct_root_models", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_root_models"], "alias": "fct_root_models", "checksum": {"name": "sha256", "checksum": "dcb918a48c00b83c29289a874867c20f5b1d6dbf162cb2d1cc35922a34e8d89b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each model with 0 direct parents.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.421831, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_root_models`", "raw_code": "-- this model finds cases where a model has 0 direct parents, likely due to a lack of source or ref function\n\nwith model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n    -- only filter out excluded children nodes\n        -- filtering parents could result in incorrectly flagging nodes that depend on excluded nodes\n    and not child_is_excluded\n    -- exclude required time spine\n    and child != 'metricflow_time_spine'\n),\n\nfinal as (\n    select\n        child\n    from model_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_model_fanout": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_model_fanout", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_model_fanout.sql", "original_file_path": "models/marts/dag/fct_model_fanout.sql", "unique_id": "model.dbt_project_evaluator.fct_model_fanout", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_model_fanout"], "alias": "fct_model_fanout", "checksum": {"name": "sha256", "checksum": "617945b46280b6270d8f5f0cd39cd82ca2024b09a850e197f348b6b576df177f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows all parents with more direct leaf children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.4211452, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_model_fanout`", "raw_code": "with all_dag_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- find all models without children\nmodels_without_children as (\n    select\n        parent\n    from all_dag_relationships\n    where parent_resource_type = 'model'\n    group by 1\n    having max(distance) = 0\n),\n\n-- all parents with more direct children than the threshold for fanout (determined by variable models_fanout_threshold, default 3)\n    -- Note: only counts \"leaf children\" - direct chilren that are models AND are child-less (are at the right-most-point in the DAG)\nmodel_fanout as (\n    select \n        all_dag_relationships.parent,\n        all_dag_relationships.parent_model_type,\n        all_dag_relationships.child\n    from all_dag_relationships\n    inner join models_without_children\n        on all_dag_relationships.child = models_without_children.parent\n    where all_dag_relationships.distance = 1 and all_dag_relationships.child_resource_type = 'model'\n    group by 1, 2, 3\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2, 3\n),\n\nmodel_fanout_agg as (\n    select\n        parent,\n        parent_model_type,\n        {{ dbt.listagg(\n            measure = 'child', \n            delimiter_text = \"', '\", \n            order_by_clause = 'order by child' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as leaf_children\n    from model_fanout\n    group by 1, 2\n    having count(*) >= {{ var('models_fanout_threshold') }}\n)\n\nselect * from model_fanout_agg\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_unused_sources": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_unused_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_unused_sources.sql", "original_file_path": "models/marts/dag/fct_unused_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_unused_sources", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_unused_sources"], "alias": "fct_unused_sources", "checksum": {"name": "sha256", "checksum": "88929ec8435e38da76fe33265736b8599deca039cb881c0e3e1c1bc9416047df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each source with 0 children.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.4222589, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_unused_sources`", "raw_code": "-- this model finds cases where a source has no children\n\nwith source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type = 'source'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent\n    from source_relationships\n    group by 1\n    having max(distance) = 0\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_duplicate_sources": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_duplicate_sources", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_duplicate_sources.sql", "original_file_path": "models/marts/dag/fct_duplicate_sources.sql", "unique_id": "model.dbt_project_evaluator.fct_duplicate_sources", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_duplicate_sources"], "alias": "fct_duplicate_sources", "checksum": {"name": "sha256", "checksum": "eef33cda125cf6de675c136a274c52dc87afd8e0175e85c887349a11d9a872e0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.4209971, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_duplicate_sources`", "raw_code": "with sources as (\n    select\n        resource_name,\n        case \n            -- if you're using databricks but not the unity catalog, database will be null\n            when database is NULL then {{ dbt.concat([\"schema\", \"'.'\", \"identifier\"]) }} \n            else {{ dbt.concat([\"database\", \"'.'\", \"schema\", \"'.'\", \"identifier\"]) }} \n        end as source_db_location \n    from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'source'\n    and not is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by 1, 2\n),\n\nsource_duplicates as (\n    select\n        source_db_location,\n        {{ dbt.listagg(\n            measure = 'resource_name', \n            delimiter_text = \"', '\", \n            order_by_clause = 'order by resource_name' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as source_names\n    from sources\n    group by source_db_location\n    having count(*) > 1\n)\n\nselect * from source_duplicates", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.concat", "macro.dbt.listagg"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_source_fanout": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_source_fanout", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_source_fanout.sql", "original_file_path": "models/marts/dag/fct_source_fanout.sql", "unique_id": "model.dbt_project_evaluator.fct_source_fanout", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_source_fanout"], "alias": "fct_source_fanout", "checksum": {"name": "sha256", "checksum": "14d519f1f662fce3c381f4605765d18e1543ba1dfd157e304b74c0cb59a918b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each instance where a source is the direct parent of multiple resources in the DAG.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.421911, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_source_fanout`", "raw_code": "-- this model finds cases where a source is used in multiple direct downstream models\nwith direct_source_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by child\n),\n\nsource_fanout as (\n    select\n        parent,\n        {{ dbt.listagg(\n            measure='child', \n            delimiter_text=\"', '\", \n            order_by_clause='order by child' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as model_children\n    from direct_source_relationships\n    group by 1\n    having count(*) > 1\n)\n\nselect * from source_fanout\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_direct_join_to_source": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_direct_join_to_source", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_direct_join_to_source.sql", "original_file_path": "models/marts/dag/fct_direct_join_to_source.sql", "unique_id": "model.dbt_project_evaluator.fct_direct_join_to_source", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_direct_join_to_source"], "alias": "fct_direct_join_to_source", "checksum": {"name": "sha256", "checksum": "41902b1a35281f5f48189c1e3a1f0beb3ecb5512f426bb46e1b7a201b7b59264"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where a model has a reference to both a model and a source.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.420897, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_direct_join_to_source`", "raw_code": "-- this model finds cases where a model has a reference to both a model and a source\n\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where child_resource_type = 'model'\n    and distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nmodel_and_source_joined as (\n    select\n        child,\n        case \n            when (\n                sum(case when parent_resource_type = 'model' then 1 else 0 end) > 0 \n                and sum(case when parent_resource_type = 'source' then 1 else 0 end) > 0\n            ) \n            then true\n            else false \n        end as keep_row \n    from direct_model_relationships\n    group by 1\n),\n\nfinal as (\n    select \n        direct_model_relationships.parent,\n        direct_model_relationships.parent_resource_type,\n        direct_model_relationships.child,\n        direct_model_relationships.child_resource_type,\n        direct_model_relationships.distance\n    from direct_model_relationships\n    inner join model_and_source_joined\n        on direct_model_relationships.child = model_and_source_joined.child\n    where model_and_source_joined.keep_row\n    order by direct_model_relationships.child\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_staging_dependent_on_staging": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_staging_dependent_on_staging", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_staging_dependent_on_staging.sql", "original_file_path": "models/marts/dag/fct_staging_dependent_on_staging.sql", "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_staging_dependent_on_staging"], "alias": "fct_staging_dependent_on_staging", "checksum": {"name": "sha256", "checksum": "3ec2cb7f884acdde9d1753cc3924ea1ee40540b92cb88524b5fe99f40e7707d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the staging layer are dependent on each other.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.422189, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_staging_dependent_on_staging`", "raw_code": "-- check for cases where models in the staging layer are dependent on each other\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type in ('model', 'snapshot')\n    and child_resource_type in ('model', 'snapshot')\n    and not parent_is_excluded\n    and not child_is_excluded\n    and distance = 1\n),\n\nbending_connections as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where parent_model_type = 'staging'\n    and child_model_type = 'staging'\n)\n\nselect * from bending_connections\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_too_many_joins": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_too_many_joins", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_too_many_joins.sql", "original_file_path": "models/marts/dag/fct_too_many_joins.sql", "unique_id": "model.dbt_project_evaluator.fct_too_many_joins", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_too_many_joins"], "alias": "fct_too_many_joins", "checksum": {"name": "sha256", "checksum": "4c49a1daa1a81c2047f76417a4fee57f56f8f21583d1443b068b485c14651d63"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This returns models referencing more than 7 or more dependencies. Per dbt best practices, models should be designed in a way that depend on fewer than 7 joins.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.422455, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_too_many_joins`", "raw_code": "with all_dag_relationships as (\n    select\n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where not child_is_excluded\n    and child_resource_type = 'model'\n),\n\nfinal as (\n    select\n        child as resource_name,\n        child_file_path as file_path,\n        count(distinct parent) as join_count\n    from all_dag_relationships\n    where distance = 1\n    group by 1, 2\n    having count(distinct parent) >= {{ var('too_many_joins_threshold') }}\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_staging_dependent_on_marts_or_intermediate", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "original_file_path": "models/marts/dag/fct_staging_dependent_on_marts_or_intermediate.sql", "unique_id": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_staging_dependent_on_marts_or_intermediate"], "alias": "fct_staging_dependent_on_marts_or_intermediate", "checksum": {"name": "sha256", "checksum": "c8d013ff07426f83d621211293096386fdc508365316947e94bdea3708c786e2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the staging layer are dependent on models in the marts and/or intermediate layer.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.422081, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_staging_dependent_on_marts_or_intermediate`", "raw_code": "-- cases where a staging model depends on a marts/intermediate model\n-- data should flow from raw -> staging -> intermediate -> marts\nwith direct_model_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and parent_resource_type = 'model'\n    and child_resource_type = 'model'\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_model_type,\n        child,\n        child_model_type\n    from direct_model_relationships\n    where child_model_type = 'staging'\n    and parent_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_marts_or_intermediate_dependent_on_source", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "original_file_path": "models/marts/dag/fct_marts_or_intermediate_dependent_on_source.sql", "unique_id": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_marts_or_intermediate_dependent_on_source"], "alias": "fct_marts_or_intermediate_dependent_on_source", "checksum": {"name": "sha256", "checksum": "22b5ae735f394581929a7a1e5c7eaa3adfb844b135cd9da9f1cd645b8365a48b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each parent/child relationship where models in the marts and/or intermediate layer are dependent on source(s).", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.421076, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_marts_or_intermediate_dependent_on_source`", "raw_code": "-- cases where a marts/intermediate model directly references a raw source\nwith direct_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance = 1\n    and not parent_is_excluded\n    and not child_is_excluded\n),\nfinal as (\n    select\n        parent,\n        parent_resource_type,\n        child,\n        child_model_type\n    from direct_relationships\n    where parent_resource_type = 'source'\n    and child_model_type in ('marts', 'intermediate')\n)\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_hard_coded_references": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_hard_coded_references", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_hard_coded_references.sql", "original_file_path": "models/marts/dag/fct_hard_coded_references.sql", "unique_id": "model.dbt_project_evaluator.fct_hard_coded_references", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_hard_coded_references"], "alias": "fct_hard_coded_references", "checksum": {"name": "sha256", "checksum": "81f70c4d0a9f30cffcf07a0a61b1d213d686f175a1fd919526c83eacc994a4b4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each model that has hard coded references.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.422389, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_hard_coded_references`", "raw_code": "-- this model finds cases where a model has hard coded references\n\nwith models as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where resource_type = 'model'\n    and not is_excluded\n),\n\nfinal as (\n    select\n        resource_name as model,\n        hard_coded_references\n    from models\n    where hard_coded_references is not null\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_rejoining_of_upstream_concepts", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/dag/fct_rejoining_of_upstream_concepts.sql", "original_file_path": "models/marts/dag/fct_rejoining_of_upstream_concepts.sql", "unique_id": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "fqn": ["dbt_project_evaluator", "marts", "dag", "fct_rejoining_of_upstream_concepts"], "alias": "fct_rejoining_of_upstream_concepts", "checksum": {"name": "sha256", "checksum": "9541df55e3f7bef06b942e2ab56fc4640b7d6f770bcfd399f6114093e96245b5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "\"All cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the  parent's direct childen (parent_and_child). Only includes cases where the model \"in between\" the parent and child  has NO other downstream dependencies.\n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1714072384.421692, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_rejoining_of_upstream_concepts`", "raw_code": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where parent_resource_type not in ('exposures', 'metrics')\n    and child_resource_type not in ('exposures', 'metrics')\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\n-- all parent/child relationships where the parent is BOTH the direct parent of the child and the second level parent of the child \nrejoined as (\n    select\n        parent,\n        child\n    from all_relationships\n    group by 1, 2\n    having (sum(case when distance = 1 then 1 else 0 end) >= 1 \n        and sum(case when distance = 2 then 1 else 0 end) >= 1)\n),\n\n-- resources with only one direct child\nsingle_use_resources as (\n    select\n        parent\n    from all_relationships\n    where distance = 1\n    group by 1\n    having count(*) = 1\n),\n\n-- all cases where one of the parent's direct children (child) is ALSO the direct child of ANOTHER one of the parent's direct childen (parent_and_child)\ntriad_relationships as (\n    select \n        rejoined.parent,\n        rejoined.child as child,\n        direct_child.parent as parent_and_child\n    from rejoined\n    left join all_relationships as direct_child\n        on rejoined.child = direct_child.child\n        and direct_child.distance = 1\n    left join all_relationships as direct_parent\n        on rejoined.parent = direct_parent.parent\n        and direct_parent.distance = 1\n    where direct_child.parent = direct_parent.child\n),\n\n-- additionally, only includes cases where the model \"in between\" the parent and parent_and_child has NO other downstream dependencies\n-- Note: when the \"in between\" model DOES have downstream dependencies, it's possible this DAG choice has been made to avoid duplicated code and as such is OKAY\nfinal as (\n    select\n        triad_relationships.*,\n        case \n            when single_use_resources.parent is not null then true \n            else false\n        end as is_loop_independent\n    from triad_relationships\n    left join single_use_resources \n        on triad_relationships.parent_and_child = single_use_resources.parent\n),\n\nfinal_filtered as (\n    select * from final\n    where is_loop_independent\n)\n\nselect * from final_filtered\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_missing_primary_key_tests": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_missing_primary_key_tests", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/fct_missing_primary_key_tests.sql", "original_file_path": "models/marts/tests/fct_missing_primary_key_tests.sql", "unique_id": "model.dbt_project_evaluator.fct_missing_primary_key_tests", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_missing_primary_key_tests"], "alias": "fct_missing_primary_key_tests", "checksum": {"name": "sha256", "checksum": "355794c483e0f8d42f26c2aff9f8a3f8a2398d7bb103b557fd66c8970cbef336"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "this model has one record for every model without unique and not null tests configured on a single column", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.454589, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_missing_primary_key_tests`", "raw_code": "with \n\ntests as (\n    select * from {{ ref('int_model_test_summary') }} \n    where resource_type in\n    (\n        {% for resource_type in var('enforced_primary_key_node_types') %}'{{ resource_type }}'{% if not loop.last %},{% endif %}\n        {% endfor %}\n    )\n),\n\nfinal as (\n\n    select \n        *\n    from tests\n    where not(is_primary_key_tested)\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_model_test_summary", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_model_test_summary", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_test_coverage": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_test_coverage", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/fct_test_coverage.sql", "original_file_path": "models/marts/tests/fct_test_coverage.sql", "unique_id": "model.dbt_project_evaluator.fct_test_coverage", "fqn": ["dbt_project_evaluator", "marts", "tests", "fct_test_coverage"], "alias": "fct_test_coverage", "checksum": {"name": "sha256", "checksum": "a3b1d352c46a32242658d1fa8f5ae98a189c0ae7baed12ac962cebb13596dbe8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "this model shows a few key metrics related to how well tested your dbt project is.", "columns": {"test_to_model_ratio": {"name": "test_to_model_ratio", "description": "the total number of tests in the project divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "test_coverage_pct": {"name": "test_coverage_pct", "description": "the number of models in the project with at least one test configured divided by the total number of models in the project", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/tests/testing.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.454507, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_test_coverage`", "raw_code": "with\n\ntest_counts as (\n    select * from {{ ref('int_model_test_summary') }}\n    where resource_type = 'model'\n),\n\nconversion as (\n    select\n        resource_name,\n        case when number_of_tests_on_model > 0 then 1 else 0 end as is_tested_model,\n        {% for model_type in var('model_types') %}\n            case when model_type = '{{ model_type }}' then 1.0 else NULL end as is_{{ model_type }}_model,\n            case when number_of_tests_on_model > 0 and model_type = '{{ model_type }}' then 1.0 else 0 end as is_tested_{{ model_type }}_model{% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from test_counts\n),\n\nfinal as (\n    select\n        {{ dbt.current_timestamp() if target.type != 'trino' else 'current_timestamp(6)' }} as measured_at,\n        count(*) as total_models,\n        sum(number_of_tests_on_model) as total_tests,\n        sum(is_tested_model) as tested_models,\n        round(sum(is_tested_model) * 100.0 / count(*), 2) as test_coverage_pct,\n        {% for model_type in var('model_types') %}\n            round(\n                {{ dbt_utils.safe_divide(\n                    numerator = \"sum(is_tested_\" ~ model_type ~ \"_model) * 100.0\", \n                    denominator = \"count(is_\" ~ model_type ~ \"_model)\"\n                ) }}\n            , 2) as {{ model_type }}_test_coverage_pct,\n        {% endfor %}\n        round(sum(number_of_tests_on_model) * 1.0000 / count(*), 4) as test_to_model_ratio\n\n    from test_counts\n    left join conversion\n    on test_counts.resource_name = conversion.resource_name\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_model_test_summary", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dbt_utils.safe_divide"], "nodes": ["model.dbt_project_evaluator.int_model_test_summary"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.int_model_test_summary": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_model_test_summary", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/tests/intermediate/int_model_test_summary.sql", "original_file_path": "models/marts/tests/intermediate/int_model_test_summary.sql", "unique_id": "model.dbt_project_evaluator.int_model_test_summary", "fqn": ["dbt_project_evaluator", "marts", "tests", "intermediate", "int_model_test_summary"], "alias": "int_model_test_summary", "checksum": {"name": "sha256", "checksum": "20d8382a57bd9de5fae0d37a7af555767ddfc5ef3f343b546683cc1dee8879b4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072383.5878332, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_model_test_summary`", "raw_code": "with \n\nall_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nrelationships as (\n    select * from {{ ref('int_direct_relationships') }}\n),\n\ncount_column_tests as (\n    \n    select \n        relationships.direct_parent_id, \n        all_graph_resources.column_name,\n        {%- for test_set in var('primary_key_test_macros') %}\n            {%- set outer_loop = loop -%}\n        count(distinct case when \n                {%- for test in test_set %} \n                all_graph_resources.is_{{ test.split('.')[1] }} {%- if not loop.last %} or {% endif %} \n                {%- endfor %}\n            then relationships.resource_id else null end\n        ) as primary_key_method_{{ outer_loop.index }}_count,\n        {%- endfor %}\n        count(distinct relationships.resource_id) as tests_count\n    from all_graph_resources\n    left join relationships\n        on all_graph_resources.resource_id = relationships.resource_id\n    where all_graph_resources.resource_type = 'test'\n    and relationships.is_primary_test_relationship\n    group by 1,2\n),\n\nagg_test_relationships as (\n\n    select \n        direct_parent_id, \n        sum(case \n                when (\n                    {%- for test_set in var('primary_key_test_macros') %}\n                        {%- set compare_value = test_set | length %}\n                    primary_key_method_{{ loop.index }}_count >= {{ compare_value}}\n                        {%- if not loop.last %} or {% endif %}\n                    {%- endfor %} \n                ) then 1 \n                else 0 \n            end\n        ) >= 1 as is_primary_key_tested,\n        sum(tests_count) as number_of_tests_on_model\n    from count_column_tests\n    group by 1\n\n),\n\nfinal as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        coalesce(agg_test_relationships.is_primary_key_tested, FALSE) as is_primary_key_tested,\n        coalesce(agg_test_relationships.number_of_tests_on_model, 0) as number_of_tests_on_model\n    from all_graph_resources\n    left join agg_test_relationships\n        on all_graph_resources.resource_id = agg_test_relationships.direct_parent_id\n    where\n        all_graph_resources.resource_type in ('model', 'seed', 'source', 'snapshot')\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "int_direct_relationships", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_undocumented_public_models": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_undocumented_public_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_undocumented_public_models.sql", "original_file_path": "models/marts/governance/fct_undocumented_public_models.sql", "unique_id": "model.dbt_project_evaluator.fct_undocumented_public_models", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_undocumented_public_models"], "alias": "fct_undocumented_public_models", "checksum": {"name": "sha256", "checksum": "ee476e5f468028cb08f6d0f29adc42829534800da3b524adc2f87c04bd76cef5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each public model that does not have both a model level description, and a description for each of the columns in the model", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.460793, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_undocumented_public_models`", "raw_code": "with \n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfinal as (\n    select \n        resource_name,\n        access, \n        is_described, \n        total_defined_columns,\n        total_described_columns\n    \n    from all_resources\n    where \n        is_public \n        and (\n            -- no model level description\n            not is_described\n            -- not all columns defined have descriptions\n            or total_described_columns < total_defined_columns\n            -- no columns defined at all\n            or total_defined_columns = 0\n        )\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_exposures_dependent_on_private_models", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_exposures_dependent_on_private_models.sql", "original_file_path": "models/marts/governance/fct_exposures_dependent_on_private_models.sql", "unique_id": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_exposures_dependent_on_private_models"], "alias": "fct_exposures_dependent_on_private_models", "checksum": {"name": "sha256", "checksum": "b08d3667b3752cd9b0dd8981ec7e55af29c109e2d590c65ab84b77cb213d5a38"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each direct relationship between a parent resource and a downstream exposure where the parent resource is not a public model", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.4608588, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_exposures_dependent_on_private_models`", "raw_code": "with \n\ndirect_exposure_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and not (\n                parent_resource_type = 'model'\n                and parent_is_public\n            )\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        child as exposure_name,\n        parent as parent_resource_name,\n        parent_access,\n        parent_resource_type\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_public_models_without_contract": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_public_models_without_contract", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/governance/fct_public_models_without_contract.sql", "original_file_path": "models/marts/governance/fct_public_models_without_contract.sql", "unique_id": "model.dbt_project_evaluator.fct_public_models_without_contract", "fqn": ["dbt_project_evaluator", "marts", "governance", "fct_public_models_without_contract"], "alias": "fct_public_models_without_contract", "checksum": {"name": "sha256", "checksum": "76f602dad9bd99ea230d3ecfe7de6503d1d5b0e20ddd1b9f0609d2bfe34244c0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each public model that does not have an enforced contract", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/governance/governance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.460713, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_public_models_without_contract`", "raw_code": "with \n\nall_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfinal as (\n\n    select \n        resource_name,\n        is_public,\n        is_contract_enforced\n        \n    from all_resources\n    where \n        is_public \n        and not is_contract_enforced\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_exposure_parents_materializations": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_exposure_parents_materializations", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/performance/fct_exposure_parents_materializations.sql", "original_file_path": "models/marts/performance/fct_exposure_parents_materializations.sql", "unique_id": "model.dbt_project_evaluator.fct_exposure_parents_materializations", "fqn": ["dbt_project_evaluator", "marts", "performance", "fct_exposure_parents_materializations"], "alias": "fct_exposure_parents_materializations", "checksum": {"name": "sha256", "checksum": "5e3c973f43ea703994fa8cfc427ec015dd5f23441d4592ef023e2174c241c658"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table shows each direct parent of an exposure that is not materialized as a table or incremental.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/dag/dag.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.422325, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_exposure_parents_materializations`", "raw_code": "with \n\ndirect_exposure_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where \n        distance = 1\n        and child_resource_type = 'exposure'\n        and ((\n                parent_resource_type = 'model'\n                and parent_materialized in ('view', 'ephemeral')\n            )\n            or (\n                parent_resource_type = 'source'\n            )\n        )\n        -- no test on child_is_excluded because exposures are never excluded\n        and not parent_is_excluded\n),\n\nfinal as (\n\n    select \n        parent_resource_type,\n        parent as parent_resource_name,\n        child as exposure_name,\n        parent_materialized as parent_model_materialization\n\n    from direct_exposure_relationships\n\n)\n\nselect * from final\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_chained_views_dependencies": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_chained_views_dependencies", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/performance/fct_chained_views_dependencies.sql", "original_file_path": "models/marts/performance/fct_chained_views_dependencies.sql", "unique_id": "model.dbt_project_evaluator.fct_chained_views_dependencies", "fqn": ["dbt_project_evaluator", "marts", "performance", "fct_chained_views_dependencies"], "alias": "fct_chained_views_dependencies", "checksum": {"name": "sha256", "checksum": "aef70a6fecdec6f947f788d52b889e9a7e5e2067e87769c94c30c56d956f2af9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This returns models dependent on chains of \"non-physically-materialized\" models (views and ephemerals), highlighting potential cases for improving performance by switching the materialization of model(s) within  the chain to table or incremental. \n", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/performance/performance.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.467687, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_chained_views_dependencies`", "raw_code": "with all_relationships as (\n    select  \n        *\n    from {{ ref('int_all_dag_relationships') }}\n    where distance <> 0\n    and not parent_is_excluded\n    and not child_is_excluded\n),\n\nfinal as (\n    select\n        parent,\n        child, -- the model with potentially long run time / compilation time, improve performance by breaking the upstream chain of views\n        distance,\n        path\n    from all_relationships\n    where is_dependent_on_chain_of_views\n    and child_resource_type = 'model'\n    and distance > {{ var('chained_views_threshold') }}\n)\n\nselect * from final\n\n{{ filter_exceptions() }}\n\norder by distance desc", "language": "sql", "refs": [{"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_source_directories": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_source_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_source_directories.sql", "original_file_path": "models/marts/structure/fct_source_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_source_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_source_directories"], "alias": "fct_source_directories", "checksum": {"name": "sha256", "checksum": "6f8a1d0d64c5cc3b0a40eef7ab06c914651e74da6c2e52b151e9ade07aee03ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This finds all cases where a source definition is NOT in the appropriate subdirectory.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.470651, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_source_directories`", "raw_code": "-- Because we often work with multiple data sources, in our staging directory, we create one directory per source.\n\n-- This model finds all cases where a source definition is NOT in the appropriate subdirectory.\n\n{% set directory_pattern = get_directory_pattern() %}\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\n-- find all sources that are definied in a .yml file NOT in their subdirectory\ninappropriate_subdirectories_sources as (\n    select \n        resource_name,\n        resource_type,\n        file_path as current_file_path,\n        'models{{ directory_pattern  }}' || '{{ var(\"staging_folder_name\") }}' || '{{ directory_pattern }}' || source_name || '{{ directory_pattern }}' || file_name as change_file_path_to\n    from all_graph_resources\n    where resource_type = 'source'\n    and directory_path not like '%' || source_name || '%'\n)\n\nselect * from inappropriate_subdirectories_sources\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_test_directories": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_test_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_test_directories.sql", "original_file_path": "models/marts/structure/fct_test_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_test_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_test_directories"], "alias": "fct_test_directories", "checksum": {"name": "sha256", "checksum": "036ab595e5844a2e326b03b6f0341dd10f37dbc6250f99397cf0fc30cdcf44d4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This finds all cases where the yml file for model tests is NOT in the same subdirectory as the corresponding model.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.4707148, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_test_directories`", "raw_code": "with\n\nresources as (\n\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n\n),\n\nrelationships as (\n\n    select * from {{ ref('int_direct_relationships') }}\n\n),\n\nmodels_per_test as (\n\n    select\n        resource_name as test_name,\n        resource_id as test_id,\n        direct_parent_id as parent_model_id\n    from relationships\n    where resource_type = 'test'\n    and is_primary_test_relationship\n\n),\n\nmodel_file_paths as (\n\n    select\n        resources.resource_id as model_id,\n        resources.resource_name as model_name,\n        resources.directory_path as model_directory_path,\n        models_per_test.test_id,\n        models_per_test.parent_model_id\n    from resources\n    inner join models_per_test\n    on models_per_test.parent_model_id = resources.resource_id\n    where resource_type = 'model'\n\n),\n\ntest_file_paths as (\n\n    select\n        resource_id as test_id,\n        resource_name as test_name,\n        file_name as test_yml_name,\n        directory_path as test_yml_directory_path\n    from resources\n    where \n        resource_type = 'test'\n        and is_generic_test\n\n),\n\nall_file_paths as (\n\n    select\n        test_file_paths.test_id,\n        test_file_paths.test_name,\n        test_file_paths.test_yml_directory_path,\n        test_file_paths.test_yml_name,\n        model_file_paths.model_id,\n        model_file_paths.model_name,\n        model_file_paths.model_directory_path\n    from model_file_paths\n    inner join test_file_paths\n    on model_file_paths.test_id = test_file_paths.test_id\n\n),\n\ndifferent_directories as (\n\n    select\n        test_name,\n        model_name,\n        test_yml_directory_path as current_test_directory,\n        model_directory_path as change_test_directory_to\n    from all_file_paths\n    where model_directory_path != test_yml_directory_path\n\n)\n\nselect * from different_directories\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "int_direct_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_model_naming_conventions": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_model_naming_conventions", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_model_naming_conventions.sql", "original_file_path": "models/marts/structure/fct_model_naming_conventions.sql", "unique_id": "model.dbt_project_evaluator.fct_model_naming_conventions", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_model_naming_conventions"], "alias": "fct_model_naming_conventions", "checksum": {"name": "sha256", "checksum": "198a5db340a7d57d4333b9fe0d2083c28e8d3bb306794a90e68119eaa0ed5443"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This finds all cases where a model does NOT have the appropriate prefix.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.470586, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_model_naming_conventions`", "raw_code": "-- all models with inappropriate (or lack of) pre-fix\n-- ensure dbt project has consistent naming conventions\n\nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n    -- exclude required metricflow time spine\n    and resource_name != 'metricflow_time_spine'\n),\n\nnaming_convention_prefixes as (\n    select * from {{ ref('stg_naming_convention_prefixes') }}\n    -- we order the CTE so that listagg returns values correctly sorted for some warehouses\n    order by prefix_value\n), \n\nappropriate_prefixes as (\n    select \n        model_type, \n        {{ dbt.listagg(\n            measure='prefix_value', \n            delimiter_text=\"', '\", \n            order_by_clause='order by prefix_value' if target.type in ['snowflake','redshift','duckdb','trino'])\n        }} as appropriate_prefixes\n    from naming_convention_prefixes\n    group by model_type\n), \n\nmodels as (\n    select\n        all_graph_resources.resource_name,\n        all_graph_resources.prefix,\n        all_graph_resources.model_type,\n        naming_convention_prefixes.prefix_value\n    from all_graph_resources \n    left join naming_convention_prefixes\n        on all_graph_resources.model_type = naming_convention_prefixes.model_type\n        and all_graph_resources.prefix = naming_convention_prefixes.prefix_value\n    where resource_type = 'model'\n),\n\ninappropriate_model_names as (\n    select \n        models.resource_name,\n        models.prefix,\n        models.model_type,\n        appropriate_prefixes.appropriate_prefixes\n    from models\n    left join appropriate_prefixes\n        on models.model_type = appropriate_prefixes.model_type\n    where models.prefix_value is null\n\n)\n\nselect * from inappropriate_model_names\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_naming_convention_prefixes", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.listagg", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_project_evaluator.fct_model_directories": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "fct_model_directories", "resource_type": "model", "package_name": "dbt_project_evaluator", "path": "marts/structure/fct_model_directories.sql", "original_file_path": "models/marts/structure/fct_model_directories.sql", "unique_id": "model.dbt_project_evaluator.fct_model_directories", "fqn": ["dbt_project_evaluator", "marts", "structure", "fct_model_directories"], "alias": "fct_model_directories", "checksum": {"name": "sha256", "checksum": "56c25e3298aecc9e1432b197cf0db47eeaf8c86a840d51dd70654a6662324342"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This finds all cases where a model is NOT in the appropriate subdirectory.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/marts/structure/structure.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "{{ 'table' if target.type in ['duckdb'] else 'view' }}"}, "created_at": 1714072384.4705, "relation_name": "`analytics-147612`.`dev_gsokolov`.`fct_model_directories`", "raw_code": "-- This model finds all cases where a model is NOT in the appropriate subdirectory:\n    -- For staging models: The files should be in nested in the staging folder in a subfolder that matches their source parent's name.\n    -- For non-staging models: The files should be nested closest to their appropriate folder.  \n{% set directory_pattern = get_directory_pattern() %}\n \nwith all_graph_resources as (\n    select * from {{ ref('int_all_graph_resources') }}\n    where not is_excluded\n),\n\nfolders as (\n    select * from {{ ref('stg_naming_convention_folders') }}\n), \n\nall_dag_relationships as (\n    select * from {{ ref('int_all_dag_relationships') }}\n    where not child_is_excluded\n),\n\nstaging_models as (\n    select  \n        child,\n        child_resource_type,\n        child_model_type,\n        child_file_path,\n        child_directory_path,\n        child_file_name,\n        parent_source_name\n    from all_dag_relationships\n    where parent_resource_type = 'source'\n    and child_resource_type = 'model'\n    and child_model_type = 'staging'\n),\n\n-- find all staging models that are NOT in their source parent's subdirectory\ninappropriate_subdirectories_staging as (\n    select distinct -- must do distinct to avoid duplicates when staging model has multiple paths to a given source\n        child as resource_name,\n        child_resource_type as resource_type,\n        child_model_type as model_type,\n        child_file_path as current_file_path,\n        'models{{ directory_pattern }}' || '{{ var(\"staging_folder_name\") }}' || '{{ directory_pattern }}' || parent_source_name || '{{ directory_pattern }}' || child_file_name as change_file_path_to\n    from staging_models\n    where child_directory_path not like '%' || parent_source_name || '%'\n),\n\n-- find all non-staging models that are NOT nested closest to their appropriate folder\ninnappropriate_subdirectories_non_staging_models as (\n    select \n        all_graph_resources.resource_name,\n        all_graph_resources.resource_type,\n        all_graph_resources.model_type,\n        all_graph_resources.file_path as current_file_path,\n        'models' || '{{ directory_pattern }}...{{ directory_pattern }}' || folders.folder_name_value || '{{ directory_pattern }}...{{ directory_pattern }}' || all_graph_resources.file_name as change_file_path_to\n    from all_graph_resources\n    left join folders \n        on folders.model_type = all_graph_resources.model_type \n    -- either appropriate folder_name is not in the current_directory_path or a inappropriate folder name is closer to the file_name\n    where all_graph_resources.model_type <> all_graph_resources.model_type_folder \n),\n\nunioned as (\n    select * from inappropriate_subdirectories_staging\n    union all\n    select * from innappropriate_subdirectories_non_staging_models\n)\n\nselect * from unioned\n\n{{ filter_exceptions() }}", "language": "sql", "refs": [{"name": "int_all_graph_resources", "package": null, "version": null}, {"name": "stg_naming_convention_folders", "package": null, "version": null}, {"name": "int_all_dag_relationships", "package": null, "version": null}, {"name": "dbt_project_evaluator_exceptions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern", "macro.dbt_project_evaluator.filter_exceptions"], "nodes": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_folders", "model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "dbt_project_evaluator_exceptions", "resource_type": "seed", "package_name": "dbt_project_evaluator", "path": "dbt_project_evaluator_exceptions.csv", "original_file_path": "seeds/dbt_project_evaluator_exceptions.csv", "unique_id": "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions", "fqn": ["dbt_project_evaluator", "dbt_project_evaluator_exceptions"], "alias": "dbt_project_evaluator_exceptions", "checksum": {"name": "sha256", "checksum": "55374346a29c2ef9f7ac7b8d3f249e818f60dbd9586ab2645c294d3438f094d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"fct_name": "string", "column_name": "string", "id_to_exclude": "string", "comment": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "List of exceptions not to be reported.", "columns": {"fct_name": {"name": "fct_name", "description": "Name of the fact table to define exceptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "column_name": {"name": "column_name", "description": "Column name from fct_name to define exceptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id_to_exclude": {"name": "id_to_exclude", "description": "Values (or like pattern) to exclude for column_name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "Field to document why a given exception is legitimate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://seeds/seeds.yml", "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"fct_name": "string", "column_name": "string", "id_to_exclude": "string", "comment": "string"}}, "created_at": 1714072384.4039009, "relation_name": "`analytics-147612`.`dev_gsokolov`.`dbt_project_evaluator_exceptions`", "raw_code": "", "root_path": "/Users/gsokolov/Library/CloudStorage/Dropbox/dbt_octafx/dbt_packages/dbt_project_evaluator", "depends_on": {"macros": []}}, "test.amplitude_source.unique_stg_amplitude__event_unique_event_id.b4262a0e5e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_amplitude__event')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_stg_amplitude__event_unique_event_id", "resource_type": "test", "package_name": "amplitude_source", "path": "unique_stg_amplitude__event_unique_event_id.sql", "original_file_path": "models/stg_amplitude.yml", "unique_id": "test.amplitude_source.unique_stg_amplitude__event_unique_event_id.b4262a0e5e", "fqn": ["amplitude_source", "unique_stg_amplitude__event_unique_event_id"], "alias": "unique_stg_amplitude__event_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072383.924725, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_amplitude__event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.amplitude_source.stg_amplitude__event"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_event_id", "file_key_name": "models.stg_amplitude__event", "attached_node": "model.amplitude_source.stg_amplitude__event"}, "test.amplitude_source.not_null_stg_amplitude__event_unique_event_id.d32937d071": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_amplitude__event')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_stg_amplitude__event_unique_event_id", "resource_type": "test", "package_name": "amplitude_source", "path": "not_null_stg_amplitude__event_unique_event_id.sql", "original_file_path": "models/stg_amplitude.yml", "unique_id": "test.amplitude_source.not_null_stg_amplitude__event_unique_event_id.d32937d071", "fqn": ["amplitude_source", "not_null_stg_amplitude__event_unique_event_id"], "alias": "not_null_stg_amplitude__event_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072383.925788, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_amplitude__event", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.amplitude_source.stg_amplitude__event"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_event_id", "file_key_name": "models.stg_amplitude__event", "attached_node": "model.amplitude_source.stg_amplitude__event"}, "test.amplitude_source.unique_stg_amplitude__event_type_unique_event_type_id.fcbfdcc721": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_event_type_id", "model": "{{ get_where_subquery(ref('stg_amplitude__event_type')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_stg_amplitude__event_type_unique_event_type_id", "resource_type": "test", "package_name": "amplitude_source", "path": "unique_stg_amplitude__event_type_unique_event_type_id.sql", "original_file_path": "models/stg_amplitude.yml", "unique_id": "test.amplitude_source.unique_stg_amplitude__event_type_unique_event_type_id.fcbfdcc721", "fqn": ["amplitude_source", "unique_stg_amplitude__event_type_unique_event_type_id"], "alias": "unique_stg_amplitude__event_type_unique_event_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072383.926844, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_amplitude__event_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.amplitude_source.stg_amplitude__event_type"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_event_type_id", "file_key_name": "models.stg_amplitude__event_type", "attached_node": "model.amplitude_source.stg_amplitude__event_type"}, "test.amplitude_source.not_null_stg_amplitude__event_type_unique_event_type_id.9921959436": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_event_type_id", "model": "{{ get_where_subquery(ref('stg_amplitude__event_type')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_stg_amplitude__event_type_unique_event_type_id", "resource_type": "test", "package_name": "amplitude_source", "path": "not_null_stg_amplitude__event_type_unique_event_type_id.sql", "original_file_path": "models/stg_amplitude.yml", "unique_id": "test.amplitude_source.not_null_stg_amplitude__event_type_unique_event_type_id.9921959436", "fqn": ["amplitude_source", "not_null_stg_amplitude__event_type_unique_event_type_id"], "alias": "not_null_stg_amplitude__event_type_unique_event_type_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072383.928179, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_amplitude__event_type", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.amplitude_source.stg_amplitude__event_type"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_event_type_id", "file_key_name": "models.stg_amplitude__event_type", "attached_node": "model.amplitude_source.stg_amplitude__event_type"}, "test.snowplow_normalize.unique_snowplow_normalize_incremental_manifest_model.7efd8b15ad": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "model", "model": "{{ get_where_subquery(ref('snowplow_normalize_incremental_manifest')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_snowplow_normalize_incremental_manifest_model", "resource_type": "test", "package_name": "snowplow_normalize", "path": "unique_snowplow_normalize_incremental_manifest_model.sql", "original_file_path": "models/base/manifest/base_manifest.yml", "unique_id": "test.snowplow_normalize.unique_snowplow_normalize_incremental_manifest_model.7efd8b15ad", "fqn": ["snowplow_normalize", "base", "manifest", "unique_snowplow_normalize_incremental_manifest_model"], "alias": "unique_snowplow_normalize_incremental_manifest_model", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["primary-key"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072383.985565, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "snowplow_normalize_incremental_manifest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_normalize.snowplow_normalize_incremental_manifest"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "model", "file_key_name": "models.snowplow_normalize_incremental_manifest", "attached_node": "model.snowplow_normalize.snowplow_normalize_incremental_manifest"}, "test.snowplow_normalize.not_null_snowplow_normalize_incremental_manifest_model.3385cfeed0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "model", "model": "{{ get_where_subquery(ref('snowplow_normalize_incremental_manifest')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_snowplow_normalize_incremental_manifest_model", "resource_type": "test", "package_name": "snowplow_normalize", "path": "not_null_snowplow_normalize_incremental_manifest_model.sql", "original_file_path": "models/base/manifest/base_manifest.yml", "unique_id": "test.snowplow_normalize.not_null_snowplow_normalize_incremental_manifest_model.3385cfeed0", "fqn": ["snowplow_normalize", "base", "manifest", "not_null_snowplow_normalize_incremental_manifest_model"], "alias": "not_null_snowplow_normalize_incremental_manifest_model", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["primary-key"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072383.986528, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "snowplow_normalize_incremental_manifest", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_normalize.snowplow_normalize_incremental_manifest"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "model", "file_key_name": "models.snowplow_normalize_incremental_manifest", "attached_node": "model.snowplow_normalize.snowplow_normalize_incremental_manifest"}, "test.snowplow_normalize.unique_snowplow_normalize_base_events_this_run_event_id.01cd1b4f0f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('snowplow_normalize_base_events_this_run')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_snowplow_normalize_base_events_this_run_event_id", "resource_type": "test", "package_name": "snowplow_normalize", "path": "unique_snowplow_normalize_base_events_this_run_event_id.sql", "original_file_path": "models/base/scratch/base_scratch.yml", "unique_id": "test.snowplow_normalize.unique_snowplow_normalize_base_events_this_run_event_id.01cd1b4f0f", "fqn": ["snowplow_normalize", "base", "scratch", "unique_snowplow_normalize_base_events_this_run_event_id"], "alias": "unique_snowplow_normalize_base_events_this_run_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["primary-key"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072383.990607, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "snowplow_normalize_base_events_this_run", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.snowplow_normalize.snowplow_normalize_base_events_this_run"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_id", "file_key_name": "models.snowplow_normalize_base_events_this_run", "attached_node": "model.snowplow_normalize.snowplow_normalize_base_events_this_run"}, "test.snowplow_normalize.not_null_snowplow_normalize_base_events_this_run_event_id.405ab6c0b2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ get_where_subquery(ref('snowplow_normalize_base_events_this_run')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_snowplow_normalize_base_events_this_run_event_id", "resource_type": "test", "package_name": "snowplow_normalize", "path": "not_null_snowplow_normalize_base_events_this_run_event_id.sql", "original_file_path": "models/base/scratch/base_scratch.yml", "unique_id": "test.snowplow_normalize.not_null_snowplow_normalize_base_events_this_run_event_id.405ab6c0b2", "fqn": ["snowplow_normalize", "base", "scratch", "not_null_snowplow_normalize_base_events_this_run_event_id"], "alias": "not_null_snowplow_normalize_base_events_this_run_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["primary-key"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072383.992055, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "snowplow_normalize_base_events_this_run", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.snowplow_normalize.snowplow_normalize_base_events_this_run"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "event_id", "file_key_name": "models.snowplow_normalize_base_events_this_run", "attached_node": "model.snowplow_normalize.snowplow_normalize_base_events_this_run"}, "test.amplitude.unique_amplitude__event_enhanced_unique_event_id.03dacb012a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('amplitude__event_enhanced')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_amplitude__event_enhanced_unique_event_id", "resource_type": "test", "package_name": "amplitude", "path": "unique_amplitude__event_enhanced_unique_event_id.sql", "original_file_path": "models/amplitude_models.yml", "unique_id": "test.amplitude.unique_amplitude__event_enhanced_unique_event_id.03dacb012a", "fqn": ["amplitude", "unique_amplitude__event_enhanced_unique_event_id"], "alias": "unique_amplitude__event_enhanced_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.041156, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "amplitude__event_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.amplitude.amplitude__event_enhanced"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_event_id", "file_key_name": "models.amplitude__event_enhanced", "attached_node": "model.amplitude.amplitude__event_enhanced"}, "test.amplitude.not_null_amplitude__event_enhanced_unique_event_id.53de42037b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('amplitude__event_enhanced')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_amplitude__event_enhanced_unique_event_id", "resource_type": "test", "package_name": "amplitude", "path": "not_null_amplitude__event_enhanced_unique_event_id.sql", "original_file_path": "models/amplitude_models.yml", "unique_id": "test.amplitude.not_null_amplitude__event_enhanced_unique_event_id.53de42037b", "fqn": ["amplitude", "not_null_amplitude__event_enhanced_unique_event_id"], "alias": "not_null_amplitude__event_enhanced_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.042463, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "amplitude__event_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.amplitude.amplitude__event_enhanced"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_event_id", "file_key_name": "models.amplitude__event_enhanced", "attached_node": "model.amplitude.amplitude__event_enhanced"}, "test.amplitude.unique_amplitude__sessions_unique_session_id.a9b2f3faec": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_session_id", "model": "{{ get_where_subquery(ref('amplitude__sessions')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_amplitude__sessions_unique_session_id", "resource_type": "test", "package_name": "amplitude", "path": "unique_amplitude__sessions_unique_session_id.sql", "original_file_path": "models/amplitude_models.yml", "unique_id": "test.amplitude.unique_amplitude__sessions_unique_session_id.a9b2f3faec", "fqn": ["amplitude", "unique_amplitude__sessions_unique_session_id"], "alias": "unique_amplitude__sessions_unique_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.0435698, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "amplitude__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.amplitude.amplitude__sessions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_session_id", "file_key_name": "models.amplitude__sessions", "attached_node": "model.amplitude.amplitude__sessions"}, "test.amplitude.not_null_amplitude__sessions_unique_session_id.42d35ec70c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_session_id", "model": "{{ get_where_subquery(ref('amplitude__sessions')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_amplitude__sessions_unique_session_id", "resource_type": "test", "package_name": "amplitude", "path": "not_null_amplitude__sessions_unique_session_id.sql", "original_file_path": "models/amplitude_models.yml", "unique_id": "test.amplitude.not_null_amplitude__sessions_unique_session_id.42d35ec70c", "fqn": ["amplitude", "not_null_amplitude__sessions_unique_session_id"], "alias": "not_null_amplitude__sessions_unique_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.044427, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "amplitude__sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.amplitude.amplitude__sessions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_session_id", "file_key_name": "models.amplitude__sessions", "attached_node": "model.amplitude.amplitude__sessions"}, "test.amplitude.unique_amplitude__user_enhanced_amplitude_user_id.56f969f951": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "amplitude_user_id", "model": "{{ get_where_subquery(ref('amplitude__user_enhanced')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_amplitude__user_enhanced_amplitude_user_id", "resource_type": "test", "package_name": "amplitude", "path": "unique_amplitude__user_enhanced_amplitude_user_id.sql", "original_file_path": "models/amplitude_models.yml", "unique_id": "test.amplitude.unique_amplitude__user_enhanced_amplitude_user_id.56f969f951", "fqn": ["amplitude", "unique_amplitude__user_enhanced_amplitude_user_id"], "alias": "unique_amplitude__user_enhanced_amplitude_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.045384, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "amplitude__user_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.amplitude.amplitude__user_enhanced"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amplitude_user_id", "file_key_name": "models.amplitude__user_enhanced", "attached_node": "model.amplitude.amplitude__user_enhanced"}, "test.amplitude.not_null_amplitude__user_enhanced_amplitude_user_id.bb955eeae0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amplitude_user_id", "model": "{{ get_where_subquery(ref('amplitude__user_enhanced')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_amplitude__user_enhanced_amplitude_user_id", "resource_type": "test", "package_name": "amplitude", "path": "not_null_amplitude__user_enhanced_amplitude_user_id.sql", "original_file_path": "models/amplitude_models.yml", "unique_id": "test.amplitude.not_null_amplitude__user_enhanced_amplitude_user_id.bb955eeae0", "fqn": ["amplitude", "not_null_amplitude__user_enhanced_amplitude_user_id"], "alias": "not_null_amplitude__user_enhanced_amplitude_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.046189, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "amplitude__user_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.amplitude.amplitude__user_enhanced"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amplitude_user_id", "file_key_name": "models.amplitude__user_enhanced", "attached_node": "model.amplitude.amplitude__user_enhanced"}, "test.amplitude.dbt_utils_unique_combination_of_columns_amplitude__daily_performance_event_day__event_type.163ae17b19": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["event_day", "event_type"], "model": "{{ get_where_subquery(ref('amplitude__daily_performance')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_amplitude__daily_performance_event_day__event_type", "resource_type": "test", "package_name": "amplitude", "path": "dbt_utils_unique_combination_o_e2e12a3beaea9715cc8743f0acfe2802.sql", "original_file_path": "models/amplitude_models.yml", "unique_id": "test.amplitude.dbt_utils_unique_combination_of_columns_amplitude__daily_performance_event_day__event_type.163ae17b19", "fqn": ["amplitude", "dbt_utils_unique_combination_of_columns_amplitude__daily_performance_event_day__event_type"], "alias": "dbt_utils_unique_combination_o_e2e12a3beaea9715cc8743f0acfe2802", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e2e12a3beaea9715cc8743f0acfe2802", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e2e12a3beaea9715cc8743f0acfe2802"}, "created_at": 1714072384.0470111, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e2e12a3beaea9715cc8743f0acfe2802\") }}", "language": "sql", "refs": [{"name": "amplitude__daily_performance", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.amplitude.amplitude__daily_performance"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.amplitude__daily_performance", "attached_node": "model.amplitude.amplitude__daily_performance"}, "test.dq_tools.not_null_bi_dq_metrics_run_time.5eadc62c21": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "run_time", "model": "{{ get_where_subquery(ref('bi_dq_metrics')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_dq_metrics_run_time", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_dq_metrics_run_time.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.yml", "unique_id": "test.dq_tools.not_null_bi_dq_metrics_run_time.5eadc62c21", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_dq_metrics_run_time"], "alias": "not_null_bi_dq_metrics_run_time", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.25823, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "run_time", "file_key_name": "models.bi_dq_metrics", "attached_node": "model.dq_tools.bi_dq_metrics"}, "test.dq_tools.not_null_bi_dq_metrics_rule_name.3113b4f46c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rule_name", "model": "{{ get_where_subquery(ref('bi_dq_metrics')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_dq_metrics_rule_name", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_dq_metrics_rule_name.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.yml", "unique_id": "test.dq_tools.not_null_bi_dq_metrics_rule_name.3113b4f46c", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_dq_metrics_rule_name"], "alias": "not_null_bi_dq_metrics_rule_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.260393, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rule_name", "file_key_name": "models.bi_dq_metrics", "attached_node": "model.dq_tools.bi_dq_metrics"}, "test.dq_tools.not_null_bi_dq_metrics_data_concept.bf85ad9354": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "data_concept", "model": "{{ get_where_subquery(ref('bi_dq_metrics')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_dq_metrics_data_concept", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_dq_metrics_data_concept.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.yml", "unique_id": "test.dq_tools.not_null_bi_dq_metrics_data_concept.bf85ad9354", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_dq_metrics_data_concept"], "alias": "not_null_bi_dq_metrics_data_concept", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "rule_name != 'business test'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"where": "rule_name != 'business test'"}, "created_at": 1714072384.261451, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"rule_name != 'business test'\") }}", "language": "sql", "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "data_concept", "file_key_name": "models.bi_dq_metrics", "attached_node": "model.dq_tools.bi_dq_metrics"}, "test.dq_tools.not_null_bi_dq_metrics_indicator_category.72456fdbac": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "indicator_category", "model": "{{ get_where_subquery(ref('bi_dq_metrics')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_dq_metrics_indicator_category", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_dq_metrics_indicator_category.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.yml", "unique_id": "test.dq_tools.not_null_bi_dq_metrics_indicator_category.72456fdbac", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_dq_metrics_indicator_category"], "alias": "not_null_bi_dq_metrics_indicator_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.262475, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "indicator_category", "file_key_name": "models.bi_dq_metrics", "attached_node": "model.dq_tools.bi_dq_metrics"}, "test.dq_tools.accepted_values_bi_dq_metrics_indicator_category__Simple_Statistics.cbae39849c": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Simple Statistics"], "column_name": "indicator_category", "model": "{{ get_where_subquery(ref('bi_dq_metrics')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "accepted_values_bi_dq_metrics_indicator_category__Simple_Statistics", "resource_type": "test", "package_name": "dq_tools", "path": "accepted_values_bi_dq_metrics_a2cc32043a00ff06d8f5dabec60bc743.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.yml", "unique_id": "test.dq_tools.accepted_values_bi_dq_metrics_indicator_category__Simple_Statistics.cbae39849c", "fqn": ["dq_tools", "03_mart", "data-quality-score", "accepted_values_bi_dq_metrics_indicator_category__Simple_Statistics"], "alias": "accepted_values_bi_dq_metrics_a2cc32043a00ff06d8f5dabec60bc743", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_bi_dq_metrics_a2cc32043a00ff06d8f5dabec60bc743", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_bi_dq_metrics_a2cc32043a00ff06d8f5dabec60bc743"}, "created_at": 1714072384.2637088, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_bi_dq_metrics_a2cc32043a00ff06d8f5dabec60bc743\") }}", "language": "sql", "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "indicator_category", "file_key_name": "models.bi_dq_metrics", "attached_node": "model.dq_tools.bi_dq_metrics"}, "test.dq_tools.not_null_bi_dq_metrics_dq_dimension.c8dbacdcbb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dq_dimension", "model": "{{ get_where_subquery(ref('bi_dq_metrics')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_dq_metrics_dq_dimension", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_dq_metrics_dq_dimension.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.yml", "unique_id": "test.dq_tools.not_null_bi_dq_metrics_dq_dimension.c8dbacdcbb", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_dq_metrics_dq_dimension"], "alias": "not_null_bi_dq_metrics_dq_dimension", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.266346, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dq_dimension", "file_key_name": "models.bi_dq_metrics", "attached_node": "model.dq_tools.bi_dq_metrics"}, "test.dq_tools.accepted_values_bi_dq_metrics_dq_dimension__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other.b32bee5307": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Validity", "Timeliness", "Accuracy", "Uniqueness", "Completeness", "Consistency", "Other"], "column_name": "dq_dimension", "model": "{{ get_where_subquery(ref('bi_dq_metrics')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "accepted_values_bi_dq_metrics_dq_dimension__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other", "resource_type": "test", "package_name": "dq_tools", "path": "accepted_values_bi_dq_metrics_7ad16ade720b7259a0fb386983ceda8e.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.yml", "unique_id": "test.dq_tools.accepted_values_bi_dq_metrics_dq_dimension__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other.b32bee5307", "fqn": ["dq_tools", "03_mart", "data-quality-score", "accepted_values_bi_dq_metrics_dq_dimension__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other"], "alias": "accepted_values_bi_dq_metrics_7ad16ade720b7259a0fb386983ceda8e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_bi_dq_metrics_7ad16ade720b7259a0fb386983ceda8e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_bi_dq_metrics_7ad16ade720b7259a0fb386983ceda8e"}, "created_at": 1714072384.2673972, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_bi_dq_metrics_7ad16ade720b7259a0fb386983ceda8e\") }}", "language": "sql", "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dq_dimension", "file_key_name": "models.bi_dq_metrics", "attached_node": "model.dq_tools.bi_dq_metrics"}, "test.dq_tools.not_null_bi_dq_metrics_rows_processed.e667fc8211": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rows_processed", "model": "{{ get_where_subquery(ref('bi_dq_metrics')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_dq_metrics_rows_processed", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_dq_metrics_rows_processed.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.yml", "unique_id": "test.dq_tools.not_null_bi_dq_metrics_rows_processed.e667fc8211", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_dq_metrics_rows_processed"], "alias": "not_null_bi_dq_metrics_rows_processed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "rule_name != 'business test'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"where": "rule_name != 'business test'"}, "created_at": 1714072384.269689, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"rule_name != 'business test'\") }}", "language": "sql", "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rows_processed", "file_key_name": "models.bi_dq_metrics", "attached_node": "model.dq_tools.bi_dq_metrics"}, "test.dq_tools.dq_tools_expression_is_true_db_bi_dq_metrics_rows_processed__rows_failed_0.b9d15f8fa8": {"test_metadata": {"name": "expression_is_true_db", "kwargs": {"expression": "rows_failed >= 0", "column_name": "rows_processed", "model": "{{ get_where_subquery(ref('bi_dq_metrics')) }}"}, "namespace": "dq_tools"}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "dq_tools_expression_is_true_db_bi_dq_metrics_rows_processed__rows_failed_0", "resource_type": "test", "package_name": "dq_tools", "path": "dq_tools_expression_is_true_db_ee860e3eaaad7693c8d5ea00a05a8f7a.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.yml", "unique_id": "test.dq_tools.dq_tools_expression_is_true_db_bi_dq_metrics_rows_processed__rows_failed_0.b9d15f8fa8", "fqn": ["dq_tools", "03_mart", "data-quality-score", "dq_tools_expression_is_true_db_bi_dq_metrics_rows_processed__rows_failed_0"], "alias": "dq_tools_expression_is_true_db_ee860e3eaaad7693c8d5ea00a05a8f7a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dq_tools_expression_is_true_db_ee860e3eaaad7693c8d5ea00a05a8f7a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": "rule_name != 'business test'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "where": "rule_name != 'business test'", "alias": "dq_tools_expression_is_true_db_ee860e3eaaad7693c8d5ea00a05a8f7a"}, "created_at": 1714072384.2705438, "relation_name": null, "raw_code": "{{ dq_tools.test_expression_is_true_db(**_dbt_generic_test_kwargs) }}{{ config(where=\"rule_name != 'business test'\",alias=\"dq_tools_expression_is_true_db_ee860e3eaaad7693c8d5ea00a05a8f7a\") }}", "language": "sql", "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dq_tools.test_expression_is_true_db", "macro.dbt.get_where_subquery"], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rows_processed", "file_key_name": "models.bi_dq_metrics", "attached_node": "model.dq_tools.bi_dq_metrics"}, "test.dq_tools.not_null_bi_dq_metrics_rows_failed.b5eb625247": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rows_failed", "model": "{{ get_where_subquery(ref('bi_dq_metrics')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_dq_metrics_rows_failed", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_dq_metrics_rows_failed.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.yml", "unique_id": "test.dq_tools.not_null_bi_dq_metrics_rows_failed.b5eb625247", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_dq_metrics_rows_failed"], "alias": "not_null_bi_dq_metrics_rows_failed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.2736351, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rows_failed", "file_key_name": "models.bi_dq_metrics", "attached_node": "model.dq_tools.bi_dq_metrics"}, "test.dq_tools.dq_tools_expression_is_true_db_bi_dq_metrics_rows_failed__rows_failed_0.f8c11a12fb": {"test_metadata": {"name": "expression_is_true_db", "kwargs": {"expression": "rows_failed >= 0", "column_name": "rows_failed", "model": "{{ get_where_subquery(ref('bi_dq_metrics')) }}"}, "namespace": "dq_tools"}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "dq_tools_expression_is_true_db_bi_dq_metrics_rows_failed__rows_failed_0", "resource_type": "test", "package_name": "dq_tools", "path": "dq_tools_expression_is_true_db_d3c91158c46ba8b6b4c5cc43e6ce5695.sql", "original_file_path": "models/03_mart/data-quality-score/bi_dq_metrics.yml", "unique_id": "test.dq_tools.dq_tools_expression_is_true_db_bi_dq_metrics_rows_failed__rows_failed_0.f8c11a12fb", "fqn": ["dq_tools", "03_mart", "data-quality-score", "dq_tools_expression_is_true_db_bi_dq_metrics_rows_failed__rows_failed_0"], "alias": "dq_tools_expression_is_true_db_d3c91158c46ba8b6b4c5cc43e6ce5695", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dq_tools_expression_is_true_db_d3c91158c46ba8b6b4c5cc43e6ce5695", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "alias": "dq_tools_expression_is_true_db_d3c91158c46ba8b6b4c5cc43e6ce5695"}, "created_at": 1714072384.2744992, "relation_name": null, "raw_code": "{{ dq_tools.test_expression_is_true_db(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dq_tools_expression_is_true_db_d3c91158c46ba8b6b4c5cc43e6ce5695\") }}", "language": "sql", "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dq_tools.test_expression_is_true_db", "macro.dbt.get_where_subquery"], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rows_failed", "file_key_name": "models.bi_dq_metrics", "attached_node": "model.dq_tools.bi_dq_metrics"}, "test.dq_tools.not_null_bi_column_analysis_run_time.f70275d152": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "run_time", "model": "{{ get_where_subquery(ref('bi_column_analysis')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_column_analysis_run_time", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_column_analysis_run_time.sql", "original_file_path": "models/03_mart/data-quality-score/bi_column_analysis.yml", "unique_id": "test.dq_tools.not_null_bi_column_analysis_run_time.f70275d152", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_column_analysis_run_time"], "alias": "not_null_bi_column_analysis_run_time", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.277751, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bi_column_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_column_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "run_time", "file_key_name": "models.bi_column_analysis", "attached_node": "model.dq_tools.bi_column_analysis"}, "test.dq_tools.not_null_bi_column_analysis_analysis_name.eeee671b07": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "analysis_name", "model": "{{ get_where_subquery(ref('bi_column_analysis')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_column_analysis_analysis_name", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_column_analysis_analysis_name.sql", "original_file_path": "models/03_mart/data-quality-score/bi_column_analysis.yml", "unique_id": "test.dq_tools.not_null_bi_column_analysis_analysis_name.eeee671b07", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_column_analysis_analysis_name"], "alias": "not_null_bi_column_analysis_analysis_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.2786481, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bi_column_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_column_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "analysis_name", "file_key_name": "models.bi_column_analysis", "attached_node": "model.dq_tools.bi_column_analysis"}, "test.dq_tools.not_null_bi_column_analysis_table_name.a46dd22350": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "table_name", "model": "{{ get_where_subquery(ref('bi_column_analysis')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_column_analysis_table_name", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_column_analysis_table_name.sql", "original_file_path": "models/03_mart/data-quality-score/bi_column_analysis.yml", "unique_id": "test.dq_tools.not_null_bi_column_analysis_table_name.a46dd22350", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_column_analysis_table_name"], "alias": "not_null_bi_column_analysis_table_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "analysis_name != 'business test'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"where": "analysis_name != 'business test'"}, "created_at": 1714072384.279532, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"analysis_name != 'business test'\") }}", "language": "sql", "refs": [{"name": "bi_column_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_column_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "table_name", "file_key_name": "models.bi_column_analysis", "attached_node": "model.dq_tools.bi_column_analysis"}, "test.dq_tools.not_null_bi_column_analysis_kpi_category.3358d26745": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "kpi_category", "model": "{{ get_where_subquery(ref('bi_column_analysis')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_column_analysis_kpi_category", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_column_analysis_kpi_category.sql", "original_file_path": "models/03_mart/data-quality-score/bi_column_analysis.yml", "unique_id": "test.dq_tools.not_null_bi_column_analysis_kpi_category.3358d26745", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_column_analysis_kpi_category"], "alias": "not_null_bi_column_analysis_kpi_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.280895, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bi_column_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_column_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "kpi_category", "file_key_name": "models.bi_column_analysis", "attached_node": "model.dq_tools.bi_column_analysis"}, "test.dq_tools.accepted_values_bi_column_analysis_kpi_category__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other.66b8cded6e": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Validity", "Timeliness", "Accuracy", "Uniqueness", "Completeness", "Consistency", "Other"], "column_name": "kpi_category", "model": "{{ get_where_subquery(ref('bi_column_analysis')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "accepted_values_bi_column_analysis_kpi_category__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other", "resource_type": "test", "package_name": "dq_tools", "path": "accepted_values_bi_column_anal_dd9326aba12e3b05e17771a8c0b20ca9.sql", "original_file_path": "models/03_mart/data-quality-score/bi_column_analysis.yml", "unique_id": "test.dq_tools.accepted_values_bi_column_analysis_kpi_category__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other.66b8cded6e", "fqn": ["dq_tools", "03_mart", "data-quality-score", "accepted_values_bi_column_analysis_kpi_category__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other"], "alias": "accepted_values_bi_column_anal_dd9326aba12e3b05e17771a8c0b20ca9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_bi_column_anal_dd9326aba12e3b05e17771a8c0b20ca9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_bi_column_anal_dd9326aba12e3b05e17771a8c0b20ca9"}, "created_at": 1714072384.282055, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_bi_column_anal_dd9326aba12e3b05e17771a8c0b20ca9\") }}", "language": "sql", "refs": [{"name": "bi_column_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dq_tools.bi_column_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "kpi_category", "file_key_name": "models.bi_column_analysis", "attached_node": "model.dq_tools.bi_column_analysis"}, "test.dq_tools.not_null_bi_column_analysis_indicator_category.7cabbd7ad4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "indicator_category", "model": "{{ get_where_subquery(ref('bi_column_analysis')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_column_analysis_indicator_category", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_column_analysis_indicator_category.sql", "original_file_path": "models/03_mart/data-quality-score/bi_column_analysis.yml", "unique_id": "test.dq_tools.not_null_bi_column_analysis_indicator_category.7cabbd7ad4", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_column_analysis_indicator_category"], "alias": "not_null_bi_column_analysis_indicator_category", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.284915, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bi_column_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_column_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "indicator_category", "file_key_name": "models.bi_column_analysis", "attached_node": "model.dq_tools.bi_column_analysis"}, "test.dq_tools.accepted_values_bi_column_analysis_indicator_category__Simple_Statistics.ce70296aef": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Simple Statistics"], "column_name": "indicator_category", "model": "{{ get_where_subquery(ref('bi_column_analysis')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "accepted_values_bi_column_analysis_indicator_category__Simple_Statistics", "resource_type": "test", "package_name": "dq_tools", "path": "accepted_values_bi_column_anal_516cd5dc96838608c5b775193f95074c.sql", "original_file_path": "models/03_mart/data-quality-score/bi_column_analysis.yml", "unique_id": "test.dq_tools.accepted_values_bi_column_analysis_indicator_category__Simple_Statistics.ce70296aef", "fqn": ["dq_tools", "03_mart", "data-quality-score", "accepted_values_bi_column_analysis_indicator_category__Simple_Statistics"], "alias": "accepted_values_bi_column_anal_516cd5dc96838608c5b775193f95074c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "accepted_values_bi_column_anal_516cd5dc96838608c5b775193f95074c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_bi_column_anal_516cd5dc96838608c5b775193f95074c"}, "created_at": 1714072384.286239, "relation_name": null, "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_bi_column_anal_516cd5dc96838608c5b775193f95074c\") }}", "language": "sql", "refs": [{"name": "bi_column_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.dq_tools.bi_column_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "indicator_category", "file_key_name": "models.bi_column_analysis", "attached_node": "model.dq_tools.bi_column_analysis"}, "test.dq_tools.not_null_bi_column_analysis_rows_processed.2d9616c8d6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rows_processed", "model": "{{ get_where_subquery(ref('bi_column_analysis')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_column_analysis_rows_processed", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_column_analysis_rows_processed.sql", "original_file_path": "models/03_mart/data-quality-score/bi_column_analysis.yml", "unique_id": "test.dq_tools.not_null_bi_column_analysis_rows_processed.2d9616c8d6", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_column_analysis_rows_processed"], "alias": "not_null_bi_column_analysis_rows_processed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": "analysis_name != 'business test'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"where": "analysis_name != 'business test'"}, "created_at": 1714072384.28914, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"analysis_name != 'business test'\") }}", "language": "sql", "refs": [{"name": "bi_column_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_column_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rows_processed", "file_key_name": "models.bi_column_analysis", "attached_node": "model.dq_tools.bi_column_analysis"}, "test.dq_tools.not_null_bi_column_analysis_indicator_value.bed4c8a078": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "indicator_value", "model": "{{ get_where_subquery(ref('bi_column_analysis')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_bi_column_analysis_indicator_value", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_bi_column_analysis_indicator_value.sql", "original_file_path": "models/03_mart/data-quality-score/bi_column_analysis.yml", "unique_id": "test.dq_tools.not_null_bi_column_analysis_indicator_value.bed4c8a078", "fqn": ["dq_tools", "03_mart", "data-quality-score", "not_null_bi_column_analysis_indicator_value"], "alias": "not_null_bi_column_analysis_indicator_value", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.289988, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bi_column_analysis", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.bi_column_analysis"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "indicator_value", "file_key_name": "models.bi_column_analysis", "attached_node": "model.dq_tools.bi_column_analysis"}, "test.dq_tools.not_null_test_coverage_invocation_id.b3ebf697f8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invocation_id", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_invocation_id", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_invocation_id.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_invocation_id.b3ebf697f8", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_invocation_id"], "alias": "not_null_test_coverage_invocation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.292193, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invocation_id", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.unique_test_coverage_invocation_id.15de3c1f63": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "invocation_id", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_test_coverage_invocation_id", "resource_type": "test", "package_name": "dq_tools", "path": "unique_test_coverage_invocation_id.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.unique_test_coverage_invocation_id.15de3c1f63", "fqn": ["dq_tools", "03_mart", "test-coverage", "unique_test_coverage_invocation_id"], "alias": "unique_test_coverage_invocation_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.293483, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invocation_id", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.not_null_test_coverage_check_timestamp.fd18e654f7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "check_timestamp", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_check_timestamp", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_check_timestamp.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_check_timestamp.fd18e654f7", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_check_timestamp"], "alias": "not_null_test_coverage_check_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.295253, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "check_timestamp", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.not_null_test_coverage_all_tested_columns.f3a497bc54": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "all_tested_columns", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_all_tested_columns", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_all_tested_columns.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_all_tested_columns.f3a497bc54", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_all_tested_columns"], "alias": "not_null_test_coverage_all_tested_columns", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.296533, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "all_tested_columns", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.not_null_test_coverage_all_columns.3262b5e1be": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "all_columns", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_all_columns", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_all_columns.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_all_columns.3262b5e1be", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_all_columns"], "alias": "not_null_test_coverage_all_columns", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.29795, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "all_columns", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.not_null_test_coverage_all_tested_tables.9f7a4d73cd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "all_tested_tables", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_all_tested_tables", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_all_tested_tables.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_all_tested_tables.9f7a4d73cd", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_all_tested_tables"], "alias": "not_null_test_coverage_all_tested_tables", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.2989042, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "all_tested_tables", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.not_null_test_coverage_all_tables.7c396d66bf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "all_tables", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_all_tables", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_all_tables.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_all_tables.7c396d66bf", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_all_tables"], "alias": "not_null_test_coverage_all_tables", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.299766, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "all_tables", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.not_null_test_coverage_test_count.0190aa6ebb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_count", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_test_count", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_test_count.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_test_count.0190aa6ebb", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_test_count"], "alias": "not_null_test_coverage_test_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.300991, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_count", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.not_null_test_coverage_column_record_coverage_pct.95d3dfd0c6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "column_record_coverage_pct", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_column_record_coverage_pct", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_column_record_coverage_pct.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_column_record_coverage_pct.95d3dfd0c6", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_column_record_coverage_pct"], "alias": "not_null_test_coverage_column_record_coverage_pct", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.3020248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "column_record_coverage_pct", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.not_null_test_coverage_column_coverage_pct.e1e1727a93": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "column_coverage_pct", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_column_coverage_pct", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_column_coverage_pct.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_column_coverage_pct.e1e1727a93", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_column_coverage_pct"], "alias": "not_null_test_coverage_column_coverage_pct", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.30304, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "column_coverage_pct", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.not_null_test_coverage_model_coverage_pct.8ff3220b7f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "model_coverage_pct", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_model_coverage_pct", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_model_coverage_pct.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_model_coverage_pct.8ff3220b7f", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_model_coverage_pct"], "alias": "not_null_test_coverage_model_coverage_pct", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.3041432, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "model_coverage_pct", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.not_null_test_coverage_coverage_pct.f67b37d1ae": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "coverage_pct", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_coverage_pct", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_coverage_pct.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_coverage_pct.f67b37d1ae", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_coverage_pct"], "alias": "not_null_test_coverage_coverage_pct", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.3050508, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "coverage_pct", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dq_tools.not_null_test_coverage_test_to_column_ratio.0b5efdf74c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "test_to_column_ratio", "model": "{{ get_where_subquery(ref('test_coverage')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_test_coverage_test_to_column_ratio", "resource_type": "test", "package_name": "dq_tools", "path": "not_null_test_coverage_test_to_column_ratio.sql", "original_file_path": "models/03_mart/test-coverage/test_coverage.yml", "unique_id": "test.dq_tools.not_null_test_coverage_test_to_column_ratio.0b5efdf74c", "fqn": ["dq_tools", "03_mart", "test-coverage", "not_null_test_coverage_test_to_column_ratio"], "alias": "not_null_test_coverage_test_to_column_ratio", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.306129, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dq_tools.test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_to_column_ratio", "file_key_name": "models.test_coverage", "attached_node": "model.dq_tools.test_coverage"}, "test.dbt_segment.not_null_referrer_mapping_medium.df377e3d47": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "medium", "model": "{{ get_where_subquery(ref('referrer_mapping')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_referrer_mapping_medium", "resource_type": "test", "package_name": "dbt_segment", "path": "not_null_referrer_mapping_medium.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.dbt_segment.not_null_referrer_mapping_medium.df377e3d47", "fqn": ["dbt_segment", "not_null_referrer_mapping_medium"], "alias": "not_null_referrer_mapping_medium", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.333229, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "referrer_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_segment.referrer_mapping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "medium", "file_key_name": "seeds.referrer_mapping", "attached_node": "seed.dbt_segment.referrer_mapping"}, "test.dbt_segment.not_null_referrer_mapping_source.b73b2b8cd8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "source", "model": "{{ get_where_subquery(ref('referrer_mapping')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_referrer_mapping_source", "resource_type": "test", "package_name": "dbt_segment", "path": "not_null_referrer_mapping_source.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.dbt_segment.not_null_referrer_mapping_source.b73b2b8cd8", "fqn": ["dbt_segment", "not_null_referrer_mapping_source"], "alias": "not_null_referrer_mapping_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.334244, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "referrer_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_segment.referrer_mapping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "source", "file_key_name": "seeds.referrer_mapping", "attached_node": "seed.dbt_segment.referrer_mapping"}, "test.dbt_segment.unique_referrer_mapping_host.bcb81bd488": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "host", "model": "{{ get_where_subquery(ref('referrer_mapping')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_referrer_mapping_host", "resource_type": "test", "package_name": "dbt_segment", "path": "unique_referrer_mapping_host.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.dbt_segment.unique_referrer_mapping_host.bcb81bd488", "fqn": ["dbt_segment", "unique_referrer_mapping_host"], "alias": "unique_referrer_mapping_host", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.335113, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "referrer_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["seed.dbt_segment.referrer_mapping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "host", "file_key_name": "seeds.referrer_mapping", "attached_node": "seed.dbt_segment.referrer_mapping"}, "test.dbt_segment.not_null_referrer_mapping_host.f7aca82420": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "host", "model": "{{ get_where_subquery(ref('referrer_mapping')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_referrer_mapping_host", "resource_type": "test", "package_name": "dbt_segment", "path": "not_null_referrer_mapping_host.sql", "original_file_path": "seeds/seeds.yml", "unique_id": "test.dbt_segment.not_null_referrer_mapping_host.f7aca82420", "fqn": ["dbt_segment", "not_null_referrer_mapping_host"], "alias": "not_null_referrer_mapping_host", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.335912, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "referrer_mapping", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["seed.dbt_segment.referrer_mapping"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "host", "file_key_name": "seeds.referrer_mapping", "attached_node": "seed.dbt_segment.referrer_mapping"}, "test.dbt_segment.unique_segment_web_user_stitching_anonymous_id.137b837397": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "anonymous_id", "model": "{{ get_where_subquery(ref('segment_web_user_stitching')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_segment_web_user_stitching_anonymous_id", "resource_type": "test", "package_name": "dbt_segment", "path": "unique_segment_web_user_stitching_anonymous_id.sql", "original_file_path": "models/sessionization/schema.yml", "unique_id": "test.dbt_segment.unique_segment_web_user_stitching_anonymous_id.137b837397", "fqn": ["dbt_segment", "sessionization", "unique_segment_web_user_stitching_anonymous_id"], "alias": "unique_segment_web_user_stitching_anonymous_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.337654, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_user_stitching", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_segment.segment_web_user_stitching"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "anonymous_id", "file_key_name": "models.segment_web_user_stitching", "attached_node": "model.dbt_segment.segment_web_user_stitching"}, "test.dbt_segment.not_null_segment_web_user_stitching_anonymous_id.f1454c2a9e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "anonymous_id", "model": "{{ get_where_subquery(ref('segment_web_user_stitching')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_segment_web_user_stitching_anonymous_id", "resource_type": "test", "package_name": "dbt_segment", "path": "not_null_segment_web_user_stitching_anonymous_id.sql", "original_file_path": "models/sessionization/schema.yml", "unique_id": "test.dbt_segment.not_null_segment_web_user_stitching_anonymous_id.f1454c2a9e", "fqn": ["dbt_segment", "sessionization", "not_null_segment_web_user_stitching_anonymous_id"], "alias": "not_null_segment_web_user_stitching_anonymous_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.3386319, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_user_stitching", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_segment.segment_web_user_stitching"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "anonymous_id", "file_key_name": "models.segment_web_user_stitching", "attached_node": "model.dbt_segment.segment_web_user_stitching"}, "test.dbt_segment.unique_segment_web_page_views__sessionized_page_view_id.24778fab16": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "page_view_id", "model": "{{ get_where_subquery(ref('segment_web_page_views__sessionized')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_segment_web_page_views__sessionized_page_view_id", "resource_type": "test", "package_name": "dbt_segment", "path": "unique_segment_web_page_views__sessionized_page_view_id.sql", "original_file_path": "models/sessionization/schema.yml", "unique_id": "test.dbt_segment.unique_segment_web_page_views__sessionized_page_view_id.24778fab16", "fqn": ["dbt_segment", "sessionization", "unique_segment_web_page_views__sessionized_page_view_id"], "alias": "unique_segment_web_page_views__sessionized_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.339524, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_page_views__sessionized", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_segment.segment_web_page_views__sessionized"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "page_view_id", "file_key_name": "models.segment_web_page_views__sessionized", "attached_node": "model.dbt_segment.segment_web_page_views__sessionized"}, "test.dbt_segment.not_null_segment_web_page_views__sessionized_page_view_id.895b268143": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "page_view_id", "model": "{{ get_where_subquery(ref('segment_web_page_views__sessionized')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_segment_web_page_views__sessionized_page_view_id", "resource_type": "test", "package_name": "dbt_segment", "path": "not_null_segment_web_page_views__sessionized_page_view_id.sql", "original_file_path": "models/sessionization/schema.yml", "unique_id": "test.dbt_segment.not_null_segment_web_page_views__sessionized_page_view_id.895b268143", "fqn": ["dbt_segment", "sessionization", "not_null_segment_web_page_views__sessionized_page_view_id"], "alias": "not_null_segment_web_page_views__sessionized_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.34041, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_page_views__sessionized", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_segment.segment_web_page_views__sessionized"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "page_view_id", "file_key_name": "models.segment_web_page_views__sessionized", "attached_node": "model.dbt_segment.segment_web_page_views__sessionized"}, "test.dbt_segment.unique_segment_web_sessions__initial_session_id.3fe796b6ce": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('segment_web_sessions__initial')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_segment_web_sessions__initial_session_id", "resource_type": "test", "package_name": "dbt_segment", "path": "unique_segment_web_sessions__initial_session_id.sql", "original_file_path": "models/sessionization/schema.yml", "unique_id": "test.dbt_segment.unique_segment_web_sessions__initial_session_id.3fe796b6ce", "fqn": ["dbt_segment", "sessionization", "unique_segment_web_sessions__initial_session_id"], "alias": "unique_segment_web_sessions__initial_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.3414478, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_sessions__initial", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_segment.segment_web_sessions__initial"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.segment_web_sessions__initial", "attached_node": "model.dbt_segment.segment_web_sessions__initial"}, "test.dbt_segment.not_null_segment_web_sessions__initial_session_id.59665696e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('segment_web_sessions__initial')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_segment_web_sessions__initial_session_id", "resource_type": "test", "package_name": "dbt_segment", "path": "not_null_segment_web_sessions__initial_session_id.sql", "original_file_path": "models/sessionization/schema.yml", "unique_id": "test.dbt_segment.not_null_segment_web_sessions__initial_session_id.59665696e9", "fqn": ["dbt_segment", "sessionization", "not_null_segment_web_sessions__initial_session_id"], "alias": "not_null_segment_web_sessions__initial_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.34227, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_sessions__initial", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_segment.segment_web_sessions__initial"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.segment_web_sessions__initial", "attached_node": "model.dbt_segment.segment_web_sessions__initial"}, "test.dbt_segment.unique_segment_web_sessions__stitched_session_id.150335b1aa": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('segment_web_sessions__stitched')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_segment_web_sessions__stitched_session_id", "resource_type": "test", "package_name": "dbt_segment", "path": "unique_segment_web_sessions__stitched_session_id.sql", "original_file_path": "models/sessionization/schema.yml", "unique_id": "test.dbt_segment.unique_segment_web_sessions__stitched_session_id.150335b1aa", "fqn": ["dbt_segment", "sessionization", "unique_segment_web_sessions__stitched_session_id"], "alias": "unique_segment_web_sessions__stitched_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.343075, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_sessions__stitched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_segment.segment_web_sessions__stitched"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.segment_web_sessions__stitched", "attached_node": "model.dbt_segment.segment_web_sessions__stitched"}, "test.dbt_segment.not_null_segment_web_sessions__stitched_session_id.9811d69bf1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('segment_web_sessions__stitched')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_segment_web_sessions__stitched_session_id", "resource_type": "test", "package_name": "dbt_segment", "path": "not_null_segment_web_sessions__stitched_session_id.sql", "original_file_path": "models/sessionization/schema.yml", "unique_id": "test.dbt_segment.not_null_segment_web_sessions__stitched_session_id.9811d69bf1", "fqn": ["dbt_segment", "sessionization", "not_null_segment_web_sessions__stitched_session_id"], "alias": "not_null_segment_web_sessions__stitched_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.343874, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_sessions__stitched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_segment.segment_web_sessions__stitched"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.segment_web_sessions__stitched", "attached_node": "model.dbt_segment.segment_web_sessions__stitched"}, "test.dbt_segment.unique_segment_web_sessions_session_id.47d1980cea": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('segment_web_sessions')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_segment_web_sessions_session_id", "resource_type": "test", "package_name": "dbt_segment", "path": "unique_segment_web_sessions_session_id.sql", "original_file_path": "models/sessionization/schema.yml", "unique_id": "test.dbt_segment.unique_segment_web_sessions_session_id.47d1980cea", "fqn": ["dbt_segment", "sessionization", "unique_segment_web_sessions_session_id"], "alias": "unique_segment_web_sessions_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.3446689, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_segment.segment_web_sessions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.segment_web_sessions", "attached_node": "model.dbt_segment.segment_web_sessions"}, "test.dbt_segment.not_null_segment_web_sessions_session_id.3bd43b722f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('segment_web_sessions')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_segment_web_sessions_session_id", "resource_type": "test", "package_name": "dbt_segment", "path": "not_null_segment_web_sessions_session_id.sql", "original_file_path": "models/sessionization/schema.yml", "unique_id": "test.dbt_segment.not_null_segment_web_sessions_session_id.3bd43b722f", "fqn": ["dbt_segment", "sessionization", "not_null_segment_web_sessions_session_id"], "alias": "not_null_segment_web_sessions_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.346187, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_sessions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_segment.segment_web_sessions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "session_id", "file_key_name": "models.segment_web_sessions", "attached_node": "model.dbt_segment.segment_web_sessions"}, "test.dbt_segment.unique_segment_web_page_views_page_view_id.f2b47209c8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "page_view_id", "model": "{{ get_where_subquery(ref('segment_web_page_views')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "unique_segment_web_page_views_page_view_id", "resource_type": "test", "package_name": "dbt_segment", "path": "unique_segment_web_page_views_page_view_id.sql", "original_file_path": "models/base/schema.yml", "unique_id": "test.dbt_segment.unique_segment_web_page_views_page_view_id.f2b47209c8", "fqn": ["dbt_segment", "base", "unique_segment_web_page_views_page_view_id"], "alias": "unique_segment_web_page_views_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.347561, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_page_views", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_segment.segment_web_page_views"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "page_view_id", "file_key_name": "models.segment_web_page_views", "attached_node": "model.dbt_segment.segment_web_page_views"}, "test.dbt_segment.not_null_segment_web_page_views_page_view_id.e39f5df0da": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "page_view_id", "model": "{{ get_where_subquery(ref('segment_web_page_views')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "not_null_segment_web_page_views_page_view_id", "resource_type": "test", "package_name": "dbt_segment", "path": "not_null_segment_web_page_views_page_view_id.sql", "original_file_path": "models/base/schema.yml", "unique_id": "test.dbt_segment.not_null_segment_web_page_views_page_view_id.e39f5df0da", "fqn": ["dbt_segment", "base", "not_null_segment_web_page_views_page_view_id"], "alias": "not_null_segment_web_page_views_page_view_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1714072384.348408, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "segment_web_page_views", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_segment.segment_web_page_views"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "page_view_id", "file_key_name": "models.segment_web_page_views", "attached_node": "model.dbt_segment.segment_web_page_views"}, "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('documentation_coverage_target') }}", "column_name": "documentation_coverage_pct", "model": "{{ get_where_subquery(ref('fct_documentation_coverage')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "valid_documentation_coverage", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "valid_documentation_coverage.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7", "fqn": ["dbt_project_evaluator", "marts", "documentation", "valid_documentation_coverage"], "alias": "valid_documentation_coverage", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1714072384.405449, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_documentation_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_documentation_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "documentation_coverage_pct", "file_key_name": "models.fct_documentation_coverage", "attached_node": "model.dbt_project_evaluator.fct_documentation_coverage"}, "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_models')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_undocumented_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_models_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_models_"], "alias": "is_empty_fct_undocumented_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.411021, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_models"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_models", "attached_node": "model.dbt_project_evaluator.fct_undocumented_models"}, "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_source_tables')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_undocumented_source_tables_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_source_tables_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_source_tables_"], "alias": "is_empty_fct_undocumented_source_tables_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.4154649, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_source_tables", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_source_tables"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_source_tables", "attached_node": "model.dbt_project_evaluator.fct_undocumented_source_tables"}, "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_sources')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_undocumented_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_sources_.sql", "original_file_path": "models/marts/documentation/documentation.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235", "fqn": ["dbt_project_evaluator", "marts", "documentation", "is_empty_fct_undocumented_sources_"], "alias": "is_empty_fct_undocumented_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.4176698, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_sources"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_sources", "attached_node": "model.dbt_project_evaluator.fct_undocumented_sources"}, "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_direct_join_to_source')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_direct_join_to_source_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_direct_join_to_source_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_direct_join_to_source_"], "alias": "is_empty_fct_direct_join_to_source_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.4230871, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_direct_join_to_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_direct_join_to_source"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_direct_join_to_source", "attached_node": "model.dbt_project_evaluator.fct_direct_join_to_source"}, "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_duplicate_sources')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_duplicate_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_duplicate_sources_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_duplicate_sources_"], "alias": "is_empty_fct_duplicate_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.425865, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_duplicate_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_duplicate_sources"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_duplicate_sources", "attached_node": "model.dbt_project_evaluator.fct_duplicate_sources"}, "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_marts_or_intermediate_dependent_on_source')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_marts_or_intermediate_dependent_on_source_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_marts_or_intermediate_dependent_on_source_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_marts_or_intermediate_dependent_on_source_"], "alias": "is_empty_fct_marts_or_intermediate_dependent_on_source_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.427948, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_marts_or_intermediate_dependent_on_source", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_marts_or_intermediate_dependent_on_source", "attached_node": "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"}, "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_fanout')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_model_fanout_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_fanout_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_model_fanout_"], "alias": "is_empty_fct_model_fanout_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.429827, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_fanout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_fanout"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_fanout", "attached_node": "model.dbt_project_evaluator.fct_model_fanout"}, "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_multiple_sources_joined')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_multiple_sources_joined_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_multiple_sources_joined_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_multiple_sources_joined_"], "alias": "is_empty_fct_multiple_sources_joined_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.432091, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_multiple_sources_joined", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_multiple_sources_joined"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_multiple_sources_joined", "attached_node": "model.dbt_project_evaluator.fct_multiple_sources_joined"}, "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_rejoining_of_upstream_concepts')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_rejoining_of_upstream_concepts_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_rejoining_of_upstream_concepts_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_rejoining_of_upstream_concepts_"], "alias": "is_empty_fct_rejoining_of_upstream_concepts_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.434083, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_rejoining_of_upstream_concepts", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_rejoining_of_upstream_concepts", "attached_node": "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"}, "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_root_models')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_root_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_root_models_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_root_models_"], "alias": "is_empty_fct_root_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.4358919, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_root_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_root_models"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_root_models", "attached_node": "model.dbt_project_evaluator.fct_root_models"}, "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_source_fanout')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_source_fanout_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_source_fanout_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_source_fanout_"], "alias": "is_empty_fct_source_fanout_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.4378822, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_source_fanout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_source_fanout"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_source_fanout", "attached_node": "model.dbt_project_evaluator.fct_source_fanout"}, "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_staging_dependent_on_marts_or_intermediate')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_staging_dependent_on_marts_or_intermediate_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_staging_dependent_on_marts_or_intermediate_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_staging_dependent_on_marts_or_intermediate_"], "alias": "is_empty_fct_staging_dependent_on_marts_or_intermediate_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.440595, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_staging_dependent_on_marts_or_intermediate", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_staging_dependent_on_marts_or_intermediate", "attached_node": "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"}, "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_staging_dependent_on_staging')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_staging_dependent_on_staging_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_staging_dependent_on_staging_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_staging_dependent_on_staging_"], "alias": "is_empty_fct_staging_dependent_on_staging_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.443124, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_staging_dependent_on_staging", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_staging_dependent_on_staging"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_staging_dependent_on_staging", "attached_node": "model.dbt_project_evaluator.fct_staging_dependent_on_staging"}, "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_unused_sources')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_unused_sources_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_unused_sources_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_unused_sources_"], "alias": "is_empty_fct_unused_sources_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.445664, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_unused_sources", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_unused_sources"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_unused_sources", "attached_node": "model.dbt_project_evaluator.fct_unused_sources"}, "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_exposure_parents_materializations')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_exposure_parents_materializations_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_exposure_parents_materializations_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_exposure_parents_materializations_"], "alias": "is_empty_fct_exposure_parents_materializations_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.44786, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_exposure_parents_materializations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_exposure_parents_materializations"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_exposure_parents_materializations", "attached_node": "model.dbt_project_evaluator.fct_exposure_parents_materializations"}, "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_hard_coded_references')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_hard_coded_references_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_hard_coded_references_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_hard_coded_references_"], "alias": "is_empty_fct_hard_coded_references_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.4496682, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_hard_coded_references", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_hard_coded_references"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_hard_coded_references", "attached_node": "model.dbt_project_evaluator.fct_hard_coded_references"}, "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_too_many_joins')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_too_many_joins_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_too_many_joins_.sql", "original_file_path": "models/marts/dag/dag.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535", "fqn": ["dbt_project_evaluator", "marts", "dag", "is_empty_fct_too_many_joins_"], "alias": "is_empty_fct_too_many_joins_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.452372, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_too_many_joins", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_too_many_joins"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_too_many_joins", "attached_node": "model.dbt_project_evaluator.fct_too_many_joins"}, "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": {"test_metadata": {"name": "accepted_range", "kwargs": {"min_value": "{{ var('test_coverage_target') }}", "column_name": "test_coverage_pct", "model": "{{ get_where_subquery(ref('fct_test_coverage')) }}"}, "namespace": "dbt_utils"}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "valid_test_coverage", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "valid_test_coverage.sql", "original_file_path": "models/marts/tests/testing.yml", "unique_id": "test.dbt_project_evaluator.valid_test_coverage.df03f31e09", "fqn": ["dbt_project_evaluator", "marts", "tests", "valid_test_coverage"], "alias": "valid_test_coverage", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn"}, "created_at": 1714072384.45504, "relation_name": null, "raw_code": "{{ dbt_utils.test_accepted_range(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_test_coverage", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_accepted_range", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_test_coverage"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "test_coverage_pct", "file_key_name": "models.fct_test_coverage", "attached_node": "model.dbt_project_evaluator.fct_test_coverage"}, "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_missing_primary_key_tests')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_missing_primary_key_tests_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_missing_primary_key_tests_.sql", "original_file_path": "models/marts/tests/testing.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0", "fqn": ["dbt_project_evaluator", "marts", "tests", "is_empty_fct_missing_primary_key_tests_"], "alias": "is_empty_fct_missing_primary_key_tests_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.4580202, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_missing_primary_key_tests", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_missing_primary_key_tests"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_missing_primary_key_tests", "attached_node": "model.dbt_project_evaluator.fct_missing_primary_key_tests"}, "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_public_models_without_contract')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_public_models_without_contract_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_public_models_without_contract_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_public_models_without_contract_"], "alias": "is_empty_fct_public_models_without_contract_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.461278, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_public_models_without_contract", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_public_models_without_contract"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_public_models_without_contract", "attached_node": "model.dbt_project_evaluator.fct_public_models_without_contract"}, "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_undocumented_public_models')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_undocumented_public_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_undocumented_public_models_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_undocumented_public_models_"], "alias": "is_empty_fct_undocumented_public_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.463815, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_undocumented_public_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_undocumented_public_models"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_undocumented_public_models", "attached_node": "model.dbt_project_evaluator.fct_undocumented_public_models"}, "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_exposures_dependent_on_private_models')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_exposures_dependent_on_private_models_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_exposures_dependent_on_private_models_.sql", "original_file_path": "models/marts/governance/governance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e", "fqn": ["dbt_project_evaluator", "marts", "governance", "is_empty_fct_exposures_dependent_on_private_models_"], "alias": "is_empty_fct_exposures_dependent_on_private_models_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.465874, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_exposures_dependent_on_private_models", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_exposures_dependent_on_private_models"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_exposures_dependent_on_private_models", "attached_node": "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models"}, "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_chained_views_dependencies')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_chained_views_dependencies_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_chained_views_dependencies_.sql", "original_file_path": "models/marts/performance/performance.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33", "fqn": ["dbt_project_evaluator", "marts", "performance", "is_empty_fct_chained_views_dependencies_"], "alias": "is_empty_fct_chained_views_dependencies_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.468086, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\") }}", "language": "sql", "refs": [{"name": "fct_chained_views_dependencies", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_chained_views_dependencies"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_chained_views_dependencies", "attached_node": "model.dbt_project_evaluator.fct_chained_views_dependencies"}, "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_directories')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_model_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_model_directories_"], "alias": "is_empty_fct_model_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.471143, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_directories"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_directories", "attached_node": "model.dbt_project_evaluator.fct_model_directories"}, "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_model_naming_conventions')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_model_naming_conventions_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_model_naming_conventions_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_model_naming_conventions_"], "alias": "is_empty_fct_model_naming_conventions_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.473612, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_model_naming_conventions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_model_naming_conventions"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_model_naming_conventions", "attached_node": "model.dbt_project_evaluator.fct_model_naming_conventions"}, "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_source_directories')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_source_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_source_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_source_directories_"], "alias": "is_empty_fct_source_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.475756, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_source_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_source_directories"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_source_directories", "attached_node": "model.dbt_project_evaluator.fct_source_directories"}, "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": {"test_metadata": {"name": "is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('fct_test_directories')) }}"}, "namespace": null}, "database": "analytics-147612", "schema": "dev_gsokolov_dbt_test__audit", "name": "is_empty_fct_test_directories_", "resource_type": "test", "package_name": "dbt_project_evaluator", "path": "is_empty_fct_test_directories_.sql", "original_file_path": "models/marts/structure/structure.yml", "unique_id": "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433", "fqn": ["dbt_project_evaluator", "marts", "structure", "is_empty_fct_test_directories_"], "alias": "is_empty_fct_test_directories_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "n_records", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"severity": "warn", "fail_calc": "n_records"}, "created_at": 1714072384.478333, "relation_name": null, "raw_code": "{{ test_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fct_test_directories", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_project_evaluator.test_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.dbt_project_evaluator.fct_test_directories"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.fct_test_directories", "attached_node": "model.dbt_project_evaluator.fct_test_directories"}, "model.dbt_octafx.event_stream": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "event_stream", "resource_type": "model", "package_name": "dbt_octafx", "path": "funnels/event_stream.sql", "original_file_path": "models/funnels/event_stream.sql", "unique_id": "model.dbt_octafx.event_stream", "fqn": ["dbt_octafx", "funnels", "event_stream"], "alias": "event_stream", "checksum": {"name": "sha256", "checksum": "e2da94b450e8b69eb715a0c68cb8bc85de015aeab2df124f422aeb14467831b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml"}, "tags": [], "description": "", "columns": {"event_type": {"name": "event_type", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {"dimension": {"type": "timestamp"}}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {"dimension": {"type": "number", "primary_key": true}}, "data_type": "INT64", "constraints": [], "quote": null, "tags": [], "primary_key": true}, "event_nature": {"name": "event_nature", "description": "", "meta": {"dimension": {"type": "string"}}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_octafx://models/funnels/event_stream.yml", "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view"}, "created_at": 1714073379.405081, "relation_name": "`analytics-147612`.`dev_gsokolov`.`event_stream`", "raw_code": "{{ dbt_product_analytics.event_stream(\n    from=ref('int_pushes'),\n    event_type_col=\"status\",\n    user_id_col=\"user_id\",\n    date_col=\"timestamp\",\n    start_date=\"2024-01-01\",\n    end_date=\"2024-02-01\") }}", "language": "sql", "refs": [{"name": "int_pushes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_product_analytics.event_stream"], "nodes": ["model.dbt_octafx.int_pushes"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.int_pushes": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "int_pushes", "resource_type": "model", "package_name": "dbt_octafx", "path": "push_problem/int_pushes.sql", "original_file_path": "models/push_problem/int_pushes.sql", "unique_id": "model.dbt_octafx.int_pushes", "fqn": ["dbt_octafx", "push_problem", "int_pushes"], "alias": "int_pushes", "checksum": {"name": "sha256", "checksum": "6fc919a10761e2a383722d8f9a15b03316f15bae29387019497aef192338f708"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml", "partition_by": {"data_type": "timestamp", "granularity": "day", "field": "timestamp"}, "clustering": ["user_id"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view", "partition_by": {"data_type": "timestamp", "granularity": "day", "field": "timestamp"}, "clustering": ["user_id"]}, "created_at": 1714092635.8769972, "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_pushes`", "raw_code": "{{\n    config(\n        materialized=\"view\",\n        partition_by={\n            \"field\": \"timestamp\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": \"day\",\n        },\n        clustering=[\"user_id\"],\n    )\n}}\n\nwith\n    users as (\n\n        select user_id, registered_dt, country\n        from {{ source('wh_raw', 'users') }}\n        where registered_dt >= '2024-01-01'\n\n    ),\n\n    countries as (select * from {{ source('wh_raw', 'countries') }}),\n    \n    tokens as (\n        select internal_id, raw_properties.google_push_notification_id as token\n        from {{source('bloomreach', 'customers_properties')}}\n    ),\n\n    users_countries as (\n\n        select user_id, registered_dt, code\n        from users u\n        left join countries c on u.country = c.country\n    ),\n\n    filtered_events as (\n        select *\n        from {{ref('int_bloomreach_events_enhanced')}}\n        where action_type = 'mobile notification' and status = 'delivered'\n    ),\n\n    installed as (\n        select customer_user_id, event_time_dt from \n        {{source('wh_raw', 'mobile_appsflyer')}} a\n        inner join users_countries u on a.customer_user_id = u.user_id \n        where event_time_dt >= '2024-01-01'\n        AND event_type = 'install'\n    )\n\nSELECT\n    uc.user_id,\n    t.token\nFROM installed", "language": "sql", "refs": [{"name": "int_bloomreach_events_enhanced", "package": null, "version": null}], "sources": [["wh_raw", "mobile_appsflyer"], ["wh_raw", "users"], ["bloomreach", "customers_properties"], ["wh_raw", "countries"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_octafx.wh_raw.mobile_appsflyer", "source.dbt_octafx.wh_raw.users", "source.dbt_octafx.bloomreach.customers_properties", "source.dbt_octafx.wh_raw.countries", "model.dbt_octafx.int_bloomreach_events_enhanced"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_octafx.uninstalls": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "uninstalls", "resource_type": "model", "package_name": "dbt_octafx", "path": "sources/uninstalls.sql", "original_file_path": "models/sources/uninstalls.sql", "unique_id": "model.dbt_octafx.uninstalls", "fqn": ["dbt_octafx", "sources", "uninstalls"], "alias": "uninstalls", "checksum": {"name": "sha256", "checksum": "d4b20c8368b7398aabb088de165fb7d2d4e5d2e3e433ee9a8af698e947a17050"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected", "dbt-osmosis": "{model}.yml", "partition_by": {"data_type": "timestamp", "granularity": "day", "field": "timestamp"}, "clustering": ["user_id"]}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"dbt-osmosis": "{model}.yml", "materialized": "view", "partition_by": {"data_type": "timestamp", "granularity": "day", "field": "timestamp"}, "clustering": ["user_id"]}, "created_at": 1714096593.97412, "relation_name": "`analytics-147612`.`dev_gsokolov`.`uninstalls`", "raw_code": "{{ config(\n        materialized='view',\n        partition_by={\n            \"field\": \"timestamp\",\n            \"data_type\": \"timestamp\",\n            \"granularity\": \"day\"\n        },\n        clustering=[\"user_id\"]\n    ) }}\n\nwith uninstall_events as (\n    select * from {{ ref('appsflyer_uninstall_events_report') }}\n),\n\nusers as (\n    select * from {{ ref('users_cids_all') }}\n),\n\njoined_data as (\n    select u.*, e.appsflyer_id\n    from users u\n    join uninstall_events e\n    on u.cid = e.appsflyer_id\n)\n\nselect *\nfrom joined_data", "language": "sql", "refs": [{"name": "appsflyer_uninstall_events_report", "package": null, "version": null}, {"name": "users_cids_all", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.appsflyer_uninstall_events_report", "model.dbt_octafx.users_cids_all"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}}, "sources": {"source.dbt_octafx.wh_raw.trading_real_raw": {"database": "analytics-147612", "schema": "wh_raw", "name": "trading_real_raw", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.wh_raw.trading_real_raw", "fqn": ["dbt_octafx", "wh_raw", "trading_real_raw"], "source_name": "wh_raw", "source_description": "", "loader": "", "identifier": "trading_real_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"account_created_dt": {"name": "account_created_dt", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "account_created_ut": {"name": "account_created_ut", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "balance_at_close": {"name": "balance_at_close", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "balance_operation_type": {"name": "balance_operation_type", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "close_price": {"name": "close_price", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "close_time": {"name": "close_time", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "close_time_dt": {"name": "close_time_dt", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "close_time_since_acc_open": {"name": "close_time_since_acc_open", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "close_time_since_reg": {"name": "close_time_since_reg", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "cmd": {"name": "cmd", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "commission": {"name": "commission", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "conv_rate1": {"name": "conv_rate1", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "copy_trade_commission": {"name": "copy_trade_commission", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "equity_at_close": {"name": "equity_at_close", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "equity_at_open": {"name": "equity_at_open", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "expiration": {"name": "expiration", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "is_closed_by_hedge": {"name": "is_closed_by_hedge", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "is_pending": {"name": "is_pending", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "leverage_at_open": {"name": "leverage_at_open", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "login": {"name": "login", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "margin_at_open": {"name": "margin_at_open", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "margin_rate": {"name": "margin_rate", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "modify_time": {"name": "modify_time", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "open_price": {"name": "open_price", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "open_time": {"name": "open_time", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "open_time_dt": {"name": "open_time_dt", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "operation_id": {"name": "operation_id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "pending_created": {"name": "pending_created", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "pending_type": {"name": "pending_type", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "profit": {"name": "profit", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "reason": {"name": "reason", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "registered_dt": {"name": "registered_dt", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "registered_ut": {"name": "registered_ut", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "shard": {"name": "shard", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "spread_close": {"name": "spread_close", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "spread_open": {"name": "spread_open", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "swap_free_commission": {"name": "swap_free_commission", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "swaps": {"name": "swaps", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "symbol_digits": {"name": "symbol_digits", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "symbol_name": {"name": "symbol_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "trading_account_currency": {"name": "trading_account_currency", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "trading_account_id": {"name": "trading_account_id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "trading_account_leverage": {"name": "trading_account_leverage", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "volume": {"name": "volume", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "initial_open_operation_id": {"name": "initial_open_operation_id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "initial_open_volume": {"name": "initial_open_volume", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "open_reason": {"name": "open_reason", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "position_id": {"name": "position_id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "platform_name": {"name": "platform_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "open_deal_price": {"name": "open_deal_price", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`wh_raw`.`trading_real_raw`", "created_at": 1714072384.480504}, "source.dbt_octafx.wh_raw.users": {"database": "analytics-147612", "schema": "wh_raw", "name": "users", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.wh_raw.users", "fqn": ["dbt_octafx", "wh_raw", "users"], "source_name": "wh_raw", "source_description": "", "loader": "", "identifier": "users", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "registered_ut": {"name": "registered_ut", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "registered_dt": {"name": "registered_dt", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "verification_status": {"name": "verification_status", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "is_email_verified": {"name": "is_email_verified", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "is_locked": {"name": "is_locked", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "lock_comment": {"name": "lock_comment", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "last_login": {"name": "last_login", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "birthdate": {"name": "birthdate", "description": "", "meta": {}, "data_type": "DATE", "constraints": [], "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "deposited_total": {"name": "deposited_total", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "withdrawn_total": {"name": "withdrawn_total", "description": "", "meta": {}, "data_type": "FLOAT64", "constraints": [], "quote": null, "tags": []}, "reg_info": {"name": "reg_info", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "referrer_id": {"name": "referrer_id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "is_unsubscribed": {"name": "is_unsubscribed", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "language_id": {"name": "language_id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "support_language_id": {"name": "support_language_id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "is_withdraw_disabled": {"name": "is_withdraw_disabled", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "email_domain": {"name": "email_domain", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "email_hash": {"name": "email_hash", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "email_hash_md5": {"name": "email_hash_md5", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "firstname_hash": {"name": "firstname_hash", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "lastname_hash": {"name": "lastname_hash", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "phone_hash": {"name": "phone_hash", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "phone_filled": {"name": "phone_filled", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`wh_raw`.`users`", "created_at": 1714072384.4806342}, "source.dbt_octafx.wh_raw.mobile_appsflyer": {"database": "analytics-147612", "schema": "wh_raw", "name": "mobile_appsflyer", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.wh_raw.mobile_appsflyer", "fqn": ["dbt_octafx", "wh_raw", "mobile_appsflyer"], "source_name": "wh_raw", "source_description": "", "loader": "", "identifier": "mobile_appsflyer", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "attributed_touch_type": {"name": "attributed_touch_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "attributed_touch_time": {"name": "attributed_touch_time", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "media_source": {"name": "media_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "is_retargeting": {"name": "is_retargeting", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "retargeting_conversion_type": {"name": "retargeting_conversion_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_channel": {"name": "af_channel", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_keywords": {"name": "af_keywords", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign": {"name": "campaign", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_c_id": {"name": "af_c_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_adset": {"name": "af_adset", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_adset_id": {"name": "af_adset_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_ad": {"name": "af_ad", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_ad_id": {"name": "af_ad_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_ad_type": {"name": "af_ad_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_siteid": {"name": "af_siteid", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_sub1": {"name": "af_sub1", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_sub2": {"name": "af_sub2", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_sub3": {"name": "af_sub3", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_sub4": {"name": "af_sub4", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_sub5": {"name": "af_sub5", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "http_referrer": {"name": "http_referrer", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "original_url": {"name": "original_url", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_cost_model": {"name": "af_cost_model", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_cost_value": {"name": "af_cost_value", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_cost_currency": {"name": "af_cost_currency", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor1_af_prt": {"name": "contributor1_af_prt", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor1_media_source": {"name": "contributor1_media_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor1_campaign": {"name": "contributor1_campaign", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor1_touch_type": {"name": "contributor1_touch_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor1_touch_time": {"name": "contributor1_touch_time", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor2_af_prt": {"name": "contributor2_af_prt", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor2_media_source": {"name": "contributor2_media_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor2_campaign": {"name": "contributor2_campaign", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor2_touch_type": {"name": "contributor2_touch_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor2_touch_time": {"name": "contributor2_touch_time", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor3_af_prt": {"name": "contributor3_af_prt", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor3_media_source": {"name": "contributor3_media_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor3_campaign": {"name": "contributor3_campaign", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor3_touch_type": {"name": "contributor3_touch_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor3_touch_time": {"name": "contributor3_touch_time", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ip": {"name": "ip", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "wifi": {"name": "wifi", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "operator": {"name": "operator", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "carrier": {"name": "carrier", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "appsflyer_id": {"name": "appsflyer_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "advertising_id": {"name": "advertising_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "idfa": {"name": "idfa", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "android_id": {"name": "android_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "customer_user_id": {"name": "customer_user_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "imei": {"name": "imei", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "idfv": {"name": "idfv", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "os_version": {"name": "os_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_version": {"name": "app_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sdk_version": {"name": "sdk_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "bundle_id": {"name": "bundle_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_attribution_lookback": {"name": "af_attribution_lookback", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_value": {"name": "event_value", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_revenue": {"name": "event_revenue", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_revenue_usd": {"name": "event_revenue_usd", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_revenue_currency": {"name": "event_revenue_currency", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "dma": {"name": "dma", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_reengagement_window": {"name": "af_reengagement_window", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_source": {"name": "event_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "is_primary_attribution": {"name": "is_primary_attribution", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_sub_siteid": {"name": "af_sub_siteid", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "download_time": {"name": "download_time", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "device_model": {"name": "device_model", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "device_brand": {"name": "device_brand", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "agency": {"name": "agency", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "attribution_type": {"name": "attribution_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_time_dt": {"name": "event_time_dt", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "install_time_dt": {"name": "install_time_dt", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "insert_id": {"name": "insert_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "store_reinstall": {"name": "store_reinstall", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "install_app_store": {"name": "install_app_store", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "engagement_type": {"name": "engagement_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "af_event_type": {"name": "af_event_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`wh_raw`.`mobile_appsflyer`", "created_at": 1714072384.480818}, "source.dbt_octafx.wh_raw.appsflyer_uninstall_events_report": {"database": "analytics-147612", "schema": "wh_raw", "name": "appsflyer_uninstall_events_report", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.wh_raw.appsflyer_uninstall_events_report", "fqn": ["dbt_octafx", "wh_raw", "appsflyer_uninstall_events_report"], "source_name": "wh_raw", "source_description": "", "loader": "", "identifier": "appsflyer_uninstall_events_report", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"attributed_touch_type": {"name": "attributed_touch_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "attributed_touch_time": {"name": "attributed_touch_time", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "install_time": {"name": "install_time", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "event_time": {"name": "event_time", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_value": {"name": "event_value", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_revenue": {"name": "event_revenue", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_revenue_currency": {"name": "event_revenue_currency", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_revenue_usd": {"name": "event_revenue_usd", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "event_source": {"name": "event_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "is_receipt_validated": {"name": "is_receipt_validated", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "partner": {"name": "partner", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "media_source": {"name": "media_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "channel": {"name": "channel", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "keywords": {"name": "keywords", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign": {"name": "campaign", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "adset": {"name": "adset", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "adset_id": {"name": "adset_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ad": {"name": "ad", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ad_type": {"name": "ad_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "site_id": {"name": "site_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sub_site_id": {"name": "sub_site_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sub_param_1": {"name": "sub_param_1", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sub_param_2": {"name": "sub_param_2", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sub_param_3": {"name": "sub_param_3", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sub_param_4": {"name": "sub_param_4", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sub_param_5": {"name": "sub_param_5", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "cost_model": {"name": "cost_model", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "cost_value": {"name": "cost_value", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "cost_currency": {"name": "cost_currency", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_1_partner": {"name": "contributor_1_partner", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_1_media_source": {"name": "contributor_1_media_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_1_campaign": {"name": "contributor_1_campaign", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_1_touch_type": {"name": "contributor_1_touch_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_1_touch_time": {"name": "contributor_1_touch_time", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "contributor_2_partner": {"name": "contributor_2_partner", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_2_media_source": {"name": "contributor_2_media_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_2_campaign": {"name": "contributor_2_campaign", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_2_touch_type": {"name": "contributor_2_touch_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_2_touch_time": {"name": "contributor_2_touch_time", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "contributor_3_partner": {"name": "contributor_3_partner", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_3_media_source": {"name": "contributor_3_media_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_3_campaign": {"name": "contributor_3_campaign", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_3_touch_type": {"name": "contributor_3_touch_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "contributor_3_touch_time": {"name": "contributor_3_touch_time", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country_code": {"name": "country_code", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "dma": {"name": "dma", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ip": {"name": "ip", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "wifi": {"name": "wifi", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "operator": {"name": "operator", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "carrier": {"name": "carrier", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "appsflyer_id": {"name": "appsflyer_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "advertising_id": {"name": "advertising_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "idfa": {"name": "idfa", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "android_id": {"name": "android_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "customer_user_id": {"name": "customer_user_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "imei": {"name": "imei", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "idfv": {"name": "idfv", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "os_version": {"name": "os_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_version": {"name": "app_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "sdk_version": {"name": "sdk_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_id": {"name": "app_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "app_name": {"name": "app_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "bundle_id": {"name": "bundle_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "is_retargeting": {"name": "is_retargeting", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "retargeting_conversion_type": {"name": "retargeting_conversion_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "attribution_lookback": {"name": "attribution_lookback", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "reengagement_window": {"name": "reengagement_window", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "is_primary_attribution": {"name": "is_primary_attribution", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "http_referrer": {"name": "http_referrer", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "original_url": {"name": "original_url", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "google_play_referrer": {"name": "google_play_referrer", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "google_play_click_time": {"name": "google_play_click_time", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "google_play_install_begin_time": {"name": "google_play_install_begin_time", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`wh_raw`.`appsflyer_uninstall_events_report`", "created_at": 1714072384.48103}, "source.dbt_octafx.wh_raw.users_cids_all": {"database": "analytics-147612", "schema": "wh_raw", "name": "users_cids_all", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.wh_raw.users_cids_all", "fqn": ["dbt_octafx", "wh_raw", "users_cids_all"], "source_name": "wh_raw", "source_description": "", "loader": "", "identifier": "users_cids_all", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"client_id": {"name": "client_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "dt": {"name": "dt", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "src_info": {"name": "src_info", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`wh_raw`.`users_cids_all`", "created_at": 1714072384.4811}, "source.dbt_octafx.wh_raw.countries": {"database": "analytics-147612", "schema": "wh_raw", "name": "countries", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.wh_raw.countries", "fqn": ["dbt_octafx", "wh_raw", "countries"], "source_name": "wh_raw", "source_description": "", "loader": "", "identifier": "countries", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "code2": {"name": "code2", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country_local": {"name": "country_local", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "disabled": {"name": "disabled", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "in_ecalendar": {"name": "in_ecalendar", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "in_bms": {"name": "in_bms", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "phone_country_code": {"name": "phone_country_code", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "phone_area_code": {"name": "phone_area_code", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "phone_mask": {"name": "phone_mask", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "country_alias": {"name": "country_alias", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`wh_raw`.`countries`", "created_at": 1714072384.481178}, "source.dbt_octafx.wh_raw.countries_tiers": {"database": "analytics-147612", "schema": "wh_raw", "name": "countries_tiers", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.wh_raw.countries_tiers", "fqn": ["dbt_octafx", "wh_raw", "countries_tiers"], "source_name": "wh_raw", "source_description": "", "loader": "", "identifier": "countries_tiers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"country": {"name": "country", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "tier": {"name": "tier", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "Tier_id": {"name": "Tier_id", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "has_plan": {"name": "has_plan", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}, "country_plan": {"name": "country_plan", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "extra": {"name": "extra", "description": "", "meta": {}, "data_type": "INT64", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`wh_raw`.`countries_tiers`", "created_at": 1714072384.481247}, "source.dbt_octafx.supplement.eth_recom": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "eth_recom", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.supplement.eth_recom", "fqn": ["dbt_octafx", "supplement", "eth_recom"], "source_name": "supplement", "source_description": "", "loader": "", "identifier": "eth_recom", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`dev_gsokolov`.`eth_recom`", "created_at": 1714072384.48131}, "source.dbt_octafx.supplement.random_users": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "random_users", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.supplement.random_users", "fqn": ["dbt_octafx", "supplement", "random_users"], "source_name": "supplement", "source_description": "", "loader": "", "identifier": "random_users", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`dev_gsokolov`.`random_users`", "created_at": 1714072384.4813719}, "source.dbt_octafx.supplement.eligible_users": {"database": "analytics-147612", "schema": "dev_gsokolov", "name": "eligible_users", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.supplement.eligible_users", "fqn": ["dbt_octafx", "supplement", "eligible_users"], "source_name": "supplement", "source_description": "", "loader": "", "identifier": "eligible_users", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`dev_gsokolov`.`eligible_users`", "created_at": 1714072384.48143}, "source.dbt_octafx.bloomreach.campaign": {"database": "analytics-147612", "schema": "bloomreach_raw", "name": "campaign", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.bloomreach.campaign", "fqn": ["dbt_octafx", "bloomreach", "campaign"], "source_name": "bloomreach", "source_description": "", "loader": "", "identifier": "campaign", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"internal_customer_id": {"name": "internal_customer_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ingest_timestamp": {"name": "ingest_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "properties": {"name": "properties", "description": "", "meta": {}, "data_type": "RECORD", "constraints": [], "quote": null, "tags": []}, "properties.action_type": {"name": "properties.action_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.utm_campaign": {"name": "properties.utm_campaign", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.subject": {"name": "properties.subject", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.utm_medium": {"name": "properties.utm_medium", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.language": {"name": "properties.language", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.platform": {"name": "properties.platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.campaign_name": {"name": "properties.campaign_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.action_id": {"name": "properties.action_id", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.campaign_policy": {"name": "properties.campaign_policy", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.action_name": {"name": "properties.action_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.recipient": {"name": "properties.recipient", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.sent_timestamp": {"name": "properties.sent_timestamp", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.campaign_id": {"name": "properties.campaign_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.status": {"name": "properties.status", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.utm_source": {"name": "properties.utm_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.status_code": {"name": "properties.status_code", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.c_language_code": {"name": "properties.c_language_code", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.campaign_trigger": {"name": "properties.campaign_trigger", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.consent_category": {"name": "properties.consent_category", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.code": {"name": "properties.code", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.integration_id": {"name": "properties.integration_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.message_type": {"name": "properties.message_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.integration_name": {"name": "properties.integration_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.sender": {"name": "properties.sender", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.sending_ip": {"name": "properties.sending_ip", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.country": {"name": "properties.country", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.city": {"name": "properties.city", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.ip": {"name": "properties.ip", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.latitude": {"name": "properties.latitude", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.state": {"name": "properties.state", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.user_agent__a510e506": {"name": "properties.user_agent__a510e506", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.longitude": {"name": "properties.longitude", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.message_id": {"name": "properties.message_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.message": {"name": "properties.message", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.error": {"name": "properties.error", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.post_slug": {"name": "properties.post_slug", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.utm_content": {"name": "properties.utm_content", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.url": {"name": "properties.url", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.xpath": {"name": "properties.xpath", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.type": {"name": "properties.type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.valid_until": {"name": "properties.valid_until", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "properties.variant_id": {"name": "properties.variant_id", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.new_choice": {"name": "properties.new_choice", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.variant": {"name": "properties.variant", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.dealid__5687d774": {"name": "properties.dealid__5687d774", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.accountnumber__0be7be93": {"name": "properties.accountnumber__0be7be93", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.cta": {"name": "properties.cta", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.tradingtype__8a13dd4c": {"name": "properties.tradingtype__8a13dd4c", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.platformslug__10ba264c": {"name": "properties.platformslug__10ba264c", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.cumulative": {"name": "properties.cumulative", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.c_webinar_event_slug": {"name": "properties.c_webinar_event_slug", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.event_type": {"name": "properties.event_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.comment": {"name": "properties.comment", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.template_name": {"name": "properties.template_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.template_id": {"name": "properties.template_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.symbol": {"name": "properties.symbol", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.positionid__7c012ec8": {"name": "properties.positionid__7c012ec8", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.redirect_to_screen": {"name": "properties.redirect_to_screen", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.clickaction__ac7a4e64": {"name": "properties.clickaction__ac7a4e64", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.c_webinar_tag": {"name": "properties.c_webinar_tag", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.iosversionsode__d77c073d": {"name": "properties.iosversionsode__d77c073d", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.app_version": {"name": "properties.app_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.google_push_notification_id": {"name": "properties.google_push_notification_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.attempts": {"name": "properties.attempts", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.bot": {"name": "properties.bot", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.c_subject_rendered": {"name": "properties.c_subject_rendered", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.marketinsighttype__08774bdb": {"name": "properties.marketinsighttype__08774bdb", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.title": {"name": "properties.title", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.publicationurl__233f7608": {"name": "properties.publicationurl__233f7608", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.slug": {"name": "properties.slug", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.channel_id": {"name": "properties.channel_id", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.id": {"name": "properties.id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.deltatime__359510ad": {"name": "properties.deltatime__359510ad", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.postid__62fcd071": {"name": "properties.postid__62fcd071", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.delta_time": {"name": "properties.delta_time", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.event_id": {"name": "properties.event_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.c_subject": {"name": "properties.c_subject", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.is_web": {"name": "properties.is_web", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties._platform": {"name": "properties._platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties._versioncode__2b8a87a0": {"name": "properties._versioncode__2b8a87a0", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.__platform__a8ad3f04": {"name": "properties.__platform__a8ad3f04", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.__versioncode__f4faa1c0": {"name": "properties.__versioncode__f4faa1c0", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.body2": {"name": "properties.body2", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.body": {"name": "properties.body", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.storyly_group_id": {"name": "properties.storyly_group_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.os": {"name": "properties.os", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.browser": {"name": "properties.browser", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.location": {"name": "properties.location", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.device": {"name": "properties.device", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.ddd": {"name": "properties.ddd", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.thisisadefaultintproperty__1f9e5107": {"name": "properties.thisisadefaultintproperty__1f9e5107", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.thisisadefaultstringproperty__c88137ea": {"name": "properties.thisisadefaultstringproperty__c88137ea", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.action_url": {"name": "properties.action_url", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties": {"name": "raw_properties", "description": "", "meta": {}, "data_type": "RECORD", "constraints": [], "quote": null, "tags": []}, "raw_properties.action_type": {"name": "raw_properties.action_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.utm_campaign": {"name": "raw_properties.utm_campaign", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.subject": {"name": "raw_properties.subject", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.utm_medium": {"name": "raw_properties.utm_medium", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.language": {"name": "raw_properties.language", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.platform": {"name": "raw_properties.platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.campaign_name": {"name": "raw_properties.campaign_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.action_id": {"name": "raw_properties.action_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.campaign_policy": {"name": "raw_properties.campaign_policy", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.action_name": {"name": "raw_properties.action_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.recipient": {"name": "raw_properties.recipient", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.sent_timestamp": {"name": "raw_properties.sent_timestamp", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.campaign_id": {"name": "raw_properties.campaign_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.status": {"name": "raw_properties.status", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.utm_source": {"name": "raw_properties.utm_source", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.status_code": {"name": "raw_properties.status_code", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.c_language_code": {"name": "raw_properties.c_language_code", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.campaign_trigger": {"name": "raw_properties.campaign_trigger", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.consent_category": {"name": "raw_properties.consent_category", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.code": {"name": "raw_properties.code", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.integration_id": {"name": "raw_properties.integration_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.message_type": {"name": "raw_properties.message_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.integration_name": {"name": "raw_properties.integration_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.sender": {"name": "raw_properties.sender", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.sending_ip": {"name": "raw_properties.sending_ip", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.country": {"name": "raw_properties.country", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.city": {"name": "raw_properties.city", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.ip": {"name": "raw_properties.ip", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.latitude": {"name": "raw_properties.latitude", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.state": {"name": "raw_properties.state", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.user_agent__a510e506": {"name": "raw_properties.user_agent__a510e506", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.longitude": {"name": "raw_properties.longitude", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.message_id": {"name": "raw_properties.message_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.message": {"name": "raw_properties.message", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.error": {"name": "raw_properties.error", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.post_slug": {"name": "raw_properties.post_slug", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.utm_content": {"name": "raw_properties.utm_content", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.url": {"name": "raw_properties.url", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.xpath": {"name": "raw_properties.xpath", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.type": {"name": "raw_properties.type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.valid_until": {"name": "raw_properties.valid_until", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.variant_id": {"name": "raw_properties.variant_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.new_choice": {"name": "raw_properties.new_choice", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.variant": {"name": "raw_properties.variant", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.dealid__5687d774": {"name": "raw_properties.dealid__5687d774", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.accountnumber__0be7be93": {"name": "raw_properties.accountnumber__0be7be93", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.cta": {"name": "raw_properties.cta", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.tradingtype__8a13dd4c": {"name": "raw_properties.tradingtype__8a13dd4c", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.platformslug__10ba264c": {"name": "raw_properties.platformslug__10ba264c", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.cumulative": {"name": "raw_properties.cumulative", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.c_webinar_event_slug": {"name": "raw_properties.c_webinar_event_slug", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.event_type": {"name": "raw_properties.event_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.comment": {"name": "raw_properties.comment", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.template_name": {"name": "raw_properties.template_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.template_id": {"name": "raw_properties.template_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.symbol": {"name": "raw_properties.symbol", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.positionid__7c012ec8": {"name": "raw_properties.positionid__7c012ec8", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.redirect_to_screen": {"name": "raw_properties.redirect_to_screen", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.clickaction__ac7a4e64": {"name": "raw_properties.clickaction__ac7a4e64", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.c_webinar_tag": {"name": "raw_properties.c_webinar_tag", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.iosversionsode__d77c073d": {"name": "raw_properties.iosversionsode__d77c073d", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.app_version": {"name": "raw_properties.app_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.google_push_notification_id": {"name": "raw_properties.google_push_notification_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.attempts": {"name": "raw_properties.attempts", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.bot": {"name": "raw_properties.bot", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.c_subject_rendered": {"name": "raw_properties.c_subject_rendered", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.marketinsighttype__08774bdb": {"name": "raw_properties.marketinsighttype__08774bdb", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.title": {"name": "raw_properties.title", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.publicationurl__233f7608": {"name": "raw_properties.publicationurl__233f7608", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.slug": {"name": "raw_properties.slug", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.channel_id": {"name": "raw_properties.channel_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.id": {"name": "raw_properties.id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.deltatime__359510ad": {"name": "raw_properties.deltatime__359510ad", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.postid__62fcd071": {"name": "raw_properties.postid__62fcd071", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.delta_time": {"name": "raw_properties.delta_time", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.event_id": {"name": "raw_properties.event_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.c_subject": {"name": "raw_properties.c_subject", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.is_web": {"name": "raw_properties.is_web", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties._platform": {"name": "raw_properties._platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties._versioncode__2b8a87a0": {"name": "raw_properties._versioncode__2b8a87a0", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.__platform__a8ad3f04": {"name": "raw_properties.__platform__a8ad3f04", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.__versioncode__f4faa1c0": {"name": "raw_properties.__versioncode__f4faa1c0", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.body2": {"name": "raw_properties.body2", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.body": {"name": "raw_properties.body", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.storyly_group_id": {"name": "raw_properties.storyly_group_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.os": {"name": "raw_properties.os", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.browser": {"name": "raw_properties.browser", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.location": {"name": "raw_properties.location", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.device": {"name": "raw_properties.device", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.ddd": {"name": "raw_properties.ddd", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.thisisadefaultintproperty__1f9e5107": {"name": "raw_properties.thisisadefaultintproperty__1f9e5107", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.thisisadefaultstringproperty__c88137ea": {"name": "raw_properties.thisisadefaultstringproperty__c88137ea", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.action_url": {"name": "raw_properties.action_url", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "action_id": {"name": "action_id", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`bloomreach_raw`.`campaign`", "created_at": 1714072384.481956}, "source.dbt_octafx.bloomreach.banner": {"database": "analytics-147612", "schema": "bloomreach_raw", "name": "banner", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.bloomreach.banner", "fqn": ["dbt_octafx", "bloomreach", "banner"], "source_name": "bloomreach", "source_description": "", "loader": "", "identifier": "banner", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"internal_customer_id": {"name": "internal_customer_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "ingest_timestamp": {"name": "ingest_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "properties": {"name": "properties", "description": "", "meta": {}, "data_type": "RECORD", "constraints": [], "quote": null, "tags": []}, "properties.variant_id": {"name": "properties.variant_id", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.os": {"name": "properties.os", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.banner_id": {"name": "properties.banner_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.banner_type": {"name": "properties.banner_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.browser": {"name": "properties.browser", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.interaction": {"name": "properties.interaction", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.action": {"name": "properties.action", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.location": {"name": "properties.location", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.variant_name": {"name": "properties.variant_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.banner_name": {"name": "properties.banner_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.device": {"name": "properties.device", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.variant_origin": {"name": "properties.variant_origin", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.path": {"name": "properties.path", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.link": {"name": "properties.link", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.app_version": {"name": "properties.app_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.device_model": {"name": "properties.device_model", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.os_version": {"name": "properties.os_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.device_type": {"name": "properties.device_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.type": {"name": "properties.type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.platform": {"name": "properties.platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.sdk_version": {"name": "properties.sdk_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.os_name": {"name": "properties.os_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.placeholder": {"name": "properties.placeholder", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.sdk": {"name": "properties.sdk", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.error": {"name": "properties.error", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.phone": {"name": "properties.phone", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.email": {"name": "properties.email", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.text": {"name": "properties.text", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.__cplocation__a3c91802": {"name": "properties.__cplocation__a3c91802", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.iosversionsode__d77c073d": {"name": "properties.iosversionsode__d77c073d", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties": {"name": "raw_properties", "description": "", "meta": {}, "data_type": "RECORD", "constraints": [], "quote": null, "tags": []}, "raw_properties.variant_id": {"name": "raw_properties.variant_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.os": {"name": "raw_properties.os", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.banner_id": {"name": "raw_properties.banner_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.banner_type": {"name": "raw_properties.banner_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.browser": {"name": "raw_properties.browser", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.interaction": {"name": "raw_properties.interaction", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.action": {"name": "raw_properties.action", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.location": {"name": "raw_properties.location", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.variant_name": {"name": "raw_properties.variant_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.banner_name": {"name": "raw_properties.banner_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.device": {"name": "raw_properties.device", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.variant_origin": {"name": "raw_properties.variant_origin", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.path": {"name": "raw_properties.path", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.link": {"name": "raw_properties.link", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.app_version": {"name": "raw_properties.app_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.device_model": {"name": "raw_properties.device_model", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.os_version": {"name": "raw_properties.os_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.device_type": {"name": "raw_properties.device_type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.type": {"name": "raw_properties.type", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.platform": {"name": "raw_properties.platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.sdk_version": {"name": "raw_properties.sdk_version", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.os_name": {"name": "raw_properties.os_name", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.placeholder": {"name": "raw_properties.placeholder", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.sdk": {"name": "raw_properties.sdk", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.error": {"name": "raw_properties.error", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.phone": {"name": "raw_properties.phone", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.email": {"name": "raw_properties.email", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.text": {"name": "raw_properties.text", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.__cplocation__a3c91802": {"name": "raw_properties.__cplocation__a3c91802", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.iosversionsode__d77c073d": {"name": "raw_properties.iosversionsode__d77c073d", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`bloomreach_raw`.`banner`", "created_at": 1714072384.482128}, "source.dbt_octafx.bloomreach.customers_properties": {"database": "analytics-147612", "schema": "bloomreach_raw", "name": "customers_properties", "resource_type": "source", "package_name": "dbt_octafx", "path": "models/schema.yml", "original_file_path": "models/schema.yml", "unique_id": "source.dbt_octafx.bloomreach.customers_properties", "fqn": ["dbt_octafx", "bloomreach", "customers_properties"], "source_name": "bloomreach", "source_description": "", "loader": "", "identifier": "customers_properties", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"internal_id": {"name": "internal_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties": {"name": "properties", "description": "", "meta": {}, "data_type": "RECORD", "constraints": [], "quote": null, "tags": []}, "properties.lastname__18c9e5d4": {"name": "properties.lastname__18c9e5d4", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.verificationstatus__0cc54804": {"name": "properties.verificationstatus__0cc54804", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.city": {"name": "properties.city", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.isfeedavailable__e7bd43e7": {"name": "properties.isfeedavailable__e7bd43e7", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.language": {"name": "properties.language", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.birthdate__a73f4d13": {"name": "properties.birthdate__a73f4d13", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.email_invalid": {"name": "properties.email_invalid", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.lockreason__0f7f2fb4": {"name": "properties.lockreason__0f7f2fb4", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.isemailverified__d9b1b8ed": {"name": "properties.isemailverified__d9b1b8ed", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.openfeedreason__38e8afee": {"name": "properties.openfeedreason__38e8afee", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.firstname__9cf22fd0": {"name": "properties.firstname__9cf22fd0", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.isib__43608114": {"name": "properties.isib__43608114", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.jwtsalt__f132538f": {"name": "properties.jwtsalt__f132538f", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.countrycode__5ece310b": {"name": "properties.countrycode__5ece310b", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.registrationdate__caa5ec31": {"name": "properties.registrationdate__caa5ec31", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.email_domain": {"name": "properties.email_domain", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.email": {"name": "properties.email", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.currentrfmscore__5a60dceb": {"name": "properties.currentrfmscore__5a60dceb", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.currentrfmgroup__429de0be": {"name": "properties.currentrfmgroup__429de0be", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.currentrecencysegment__424b9121": {"name": "properties.currentrecencysegment__424b9121", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.user_id": {"name": "properties.user_id", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.currentfrequencysegment__542939f7": {"name": "properties.currentfrequencysegment__542939f7", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.currentmonetarysegment__b8cf6f23": {"name": "properties.currentmonetarysegment__b8cf6f23", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.istradeandwinavailable__3ecdd7d1": {"name": "properties.istradeandwinavailable__3ecdd7d1", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.androidisloggedin__1a94389f": {"name": "properties.androidisloggedin__1a94389f", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.androidversioncode__2248901a": {"name": "properties.androidversioncode__2248901a", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.google_push_notification_id": {"name": "properties.google_push_notification_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.tnw_cart_changed_at": {"name": "properties.tnw_cart_changed_at", "description": "", "meta": {}, "data_type": "TIMESTAMP", "constraints": [], "quote": null, "tags": []}, "properties.feedpreferredsymbols__3c8e743e": {"name": "properties.feedpreferredsymbols__3c8e743e", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.tnw_cart_goods": {"name": "properties.tnw_cart_goods", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.previousfrequencysegment__e533b190": {"name": "properties.previousfrequencysegment__e533b190", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.numorders__b53182d2": {"name": "properties.numorders__b53182d2", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.previousrfmgroup__0ce2d6f6": {"name": "properties.previousrfmgroup__0ce2d6f6", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.favoritepair__dee606f8": {"name": "properties.favoritepair__dee606f8", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.previousmonetarysegment__f3604101": {"name": "properties.previousmonetarysegment__f3604101", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.previousrfmscore__523dbf49": {"name": "properties.previousrfmscore__523dbf49", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.previousrecencysegment__0b56b611": {"name": "properties.previousrecencysegment__0b56b611", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.volumecategory__4aa55be7": {"name": "properties.volumecategory__4aa55be7", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.last_invite_webinar_slug": {"name": "properties.last_invite_webinar_slug", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.maxprofit__130795da": {"name": "properties.maxprofit__130795da", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.totalvol__49c59b3f": {"name": "properties.totalvol__49c59b3f", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.androidcopytradeversioncode__57a2f487": {"name": "properties.androidcopytradeversioncode__57a2f487", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.androidcopytradeisloggedin__ffb65e3e": {"name": "properties.androidcopytradeisloggedin__ffb65e3e", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.tmp_google_push_notification_id": {"name": "properties.tmp_google_push_notification_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.copytrade_google_push_notification_id": {"name": "properties.copytrade_google_push_notification_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.phone": {"name": "properties.phone", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.usermail__b966415e": {"name": "properties.usermail__b966415e", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.feedpreferredmarketpatterns__0a5d1c76": {"name": "properties.feedpreferredmarketpatterns__0a5d1c76", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.channelsubscriptions__02d91ce3": {"name": "properties.channelsubscriptions__02d91ce3", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.browser_push_notification_vapid_key": {"name": "properties.browser_push_notification_vapid_key", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.browser_push_notification": {"name": "properties.browser_push_notification", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.iosisloggedin__2f0e503e": {"name": "properties.iosisloggedin__2f0e503e", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.iosversionsode__d77c073d": {"name": "properties.iosversionsode__d77c073d", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.apple_push_notification_id": {"name": "properties.apple_push_notification_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.apple_push_notification_authorized": {"name": "properties.apple_push_notification_authorized", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.licencename__8c0c6ed0": {"name": "properties.licencename__8c0c6ed0", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.isphonevalid__96f89cd7": {"name": "properties.isphonevalid__96f89cd7", "description": "", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "tags": []}, "properties.referrer_id": {"name": "properties.referrer_id", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.commission": {"name": "properties.commission", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.ibrank__1577bc78": {"name": "properties.ibrank__1577bc78", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.created": {"name": "properties.created", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.volume": {"name": "properties.volume", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.new_traders": {"name": "properties.new_traders", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.apple_push_notification_bundle_id": {"name": "properties.apple_push_notification_bundle_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.isfeedabvolumetestsegment__c6e2bcf7": {"name": "properties.isfeedabvolumetestsegment__c6e2bcf7", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties.reactivation_xau_test": {"name": "properties.reactivation_xau_test", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.dealing_promo": {"name": "properties.dealing_promo", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.leads__2f10a267": {"name": "properties.leads__2f10a267", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.emailforchanging__8535f097": {"name": "properties.emailforchanging__8535f097", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.diwali_no_offer": {"name": "properties.diwali_no_offer", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.inviteruserid__3c4c752c": {"name": "properties.inviteruserid__3c4c752c", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.masternamepk__83e56bc6": {"name": "properties.masternamepk__83e56bc6", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.openaccounttype__4a9f2138": {"name": "properties.openaccounttype__4a9f2138", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.mobileapp__262fcc73": {"name": "properties.mobileapp__262fcc73", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.test_welcome_storyly": {"name": "properties.test_welcome_storyly", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.event": {"name": "properties.event", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.emailid__19ca4b09": {"name": "properties.emailid__19ca4b09", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.quizyten__2cb498bb": {"name": "properties.quizyten__2cb498bb", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.phwebinarreigstered__b102c194": {"name": "properties.phwebinarreigstered__b102c194", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.quizsmmen__046aec03": {"name": "properties.quizsmmen__046aec03", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.favorite_pair__c3760fe2": {"name": "properties.favorite_pair__c3760fe2", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties.mostactivemonth_day__677df07e": {"name": "properties.mostactivemonth_day__677df07e", "description": "", "meta": {}, "data_type": "NUMERIC", "constraints": [], "quote": null, "tags": []}, "properties._versioncode__2b8a87a0": {"name": "properties._versioncode__2b8a87a0", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "properties._platform": {"name": "properties._platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties": {"name": "raw_properties", "description": "", "meta": {}, "data_type": "RECORD", "constraints": [], "quote": null, "tags": []}, "raw_properties.lastname__18c9e5d4": {"name": "raw_properties.lastname__18c9e5d4", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.verificationstatus__0cc54804": {"name": "raw_properties.verificationstatus__0cc54804", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.city": {"name": "raw_properties.city", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.isfeedavailable__e7bd43e7": {"name": "raw_properties.isfeedavailable__e7bd43e7", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.language": {"name": "raw_properties.language", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.birthdate__a73f4d13": {"name": "raw_properties.birthdate__a73f4d13", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.email_invalid": {"name": "raw_properties.email_invalid", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.lockreason__0f7f2fb4": {"name": "raw_properties.lockreason__0f7f2fb4", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.isemailverified__d9b1b8ed": {"name": "raw_properties.isemailverified__d9b1b8ed", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.openfeedreason__38e8afee": {"name": "raw_properties.openfeedreason__38e8afee", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.firstname__9cf22fd0": {"name": "raw_properties.firstname__9cf22fd0", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.isib__43608114": {"name": "raw_properties.isib__43608114", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.jwtsalt__f132538f": {"name": "raw_properties.jwtsalt__f132538f", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.countrycode__5ece310b": {"name": "raw_properties.countrycode__5ece310b", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.registrationdate__caa5ec31": {"name": "raw_properties.registrationdate__caa5ec31", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.email_domain": {"name": "raw_properties.email_domain", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.email": {"name": "raw_properties.email", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.currentrfmscore__5a60dceb": {"name": "raw_properties.currentrfmscore__5a60dceb", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.currentrfmgroup__429de0be": {"name": "raw_properties.currentrfmgroup__429de0be", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.currentrecencysegment__424b9121": {"name": "raw_properties.currentrecencysegment__424b9121", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.user_id": {"name": "raw_properties.user_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.currentfrequencysegment__542939f7": {"name": "raw_properties.currentfrequencysegment__542939f7", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.currentmonetarysegment__b8cf6f23": {"name": "raw_properties.currentmonetarysegment__b8cf6f23", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.istradeandwinavailable__3ecdd7d1": {"name": "raw_properties.istradeandwinavailable__3ecdd7d1", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.androidisloggedin__1a94389f": {"name": "raw_properties.androidisloggedin__1a94389f", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.androidversioncode__2248901a": {"name": "raw_properties.androidversioncode__2248901a", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.google_push_notification_id": {"name": "raw_properties.google_push_notification_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.tnw_cart_changed_at": {"name": "raw_properties.tnw_cart_changed_at", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.feedpreferredsymbols__3c8e743e": {"name": "raw_properties.feedpreferredsymbols__3c8e743e", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.tnw_cart_goods": {"name": "raw_properties.tnw_cart_goods", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.previousfrequencysegment__e533b190": {"name": "raw_properties.previousfrequencysegment__e533b190", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.numorders__b53182d2": {"name": "raw_properties.numorders__b53182d2", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.previousrfmgroup__0ce2d6f6": {"name": "raw_properties.previousrfmgroup__0ce2d6f6", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.favoritepair__dee606f8": {"name": "raw_properties.favoritepair__dee606f8", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.previousmonetarysegment__f3604101": {"name": "raw_properties.previousmonetarysegment__f3604101", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.previousrfmscore__523dbf49": {"name": "raw_properties.previousrfmscore__523dbf49", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.previousrecencysegment__0b56b611": {"name": "raw_properties.previousrecencysegment__0b56b611", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.volumecategory__4aa55be7": {"name": "raw_properties.volumecategory__4aa55be7", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.last_invite_webinar_slug": {"name": "raw_properties.last_invite_webinar_slug", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.maxprofit__130795da": {"name": "raw_properties.maxprofit__130795da", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.totalvol__49c59b3f": {"name": "raw_properties.totalvol__49c59b3f", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.androidcopytradeversioncode__57a2f487": {"name": "raw_properties.androidcopytradeversioncode__57a2f487", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.androidcopytradeisloggedin__ffb65e3e": {"name": "raw_properties.androidcopytradeisloggedin__ffb65e3e", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.tmp_google_push_notification_id": {"name": "raw_properties.tmp_google_push_notification_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.copytrade_google_push_notification_id": {"name": "raw_properties.copytrade_google_push_notification_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.phone": {"name": "raw_properties.phone", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.usermail__b966415e": {"name": "raw_properties.usermail__b966415e", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.feedpreferredmarketpatterns__0a5d1c76": {"name": "raw_properties.feedpreferredmarketpatterns__0a5d1c76", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.channelsubscriptions__02d91ce3": {"name": "raw_properties.channelsubscriptions__02d91ce3", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.browser_push_notification_vapid_key": {"name": "raw_properties.browser_push_notification_vapid_key", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.browser_push_notification": {"name": "raw_properties.browser_push_notification", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.iosisloggedin__2f0e503e": {"name": "raw_properties.iosisloggedin__2f0e503e", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.iosversionsode__d77c073d": {"name": "raw_properties.iosversionsode__d77c073d", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.apple_push_notification_id": {"name": "raw_properties.apple_push_notification_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.apple_push_notification_authorized": {"name": "raw_properties.apple_push_notification_authorized", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.licencename__8c0c6ed0": {"name": "raw_properties.licencename__8c0c6ed0", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.isphonevalid__96f89cd7": {"name": "raw_properties.isphonevalid__96f89cd7", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.referrer_id": {"name": "raw_properties.referrer_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.commission": {"name": "raw_properties.commission", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.ibrank__1577bc78": {"name": "raw_properties.ibrank__1577bc78", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.created": {"name": "raw_properties.created", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.volume": {"name": "raw_properties.volume", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.new_traders": {"name": "raw_properties.new_traders", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.apple_push_notification_bundle_id": {"name": "raw_properties.apple_push_notification_bundle_id", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.isfeedabvolumetestsegment__c6e2bcf7": {"name": "raw_properties.isfeedabvolumetestsegment__c6e2bcf7", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.reactivation_xau_test": {"name": "raw_properties.reactivation_xau_test", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.dealing_promo": {"name": "raw_properties.dealing_promo", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.leads__2f10a267": {"name": "raw_properties.leads__2f10a267", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.emailforchanging__8535f097": {"name": "raw_properties.emailforchanging__8535f097", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.diwali_no_offer": {"name": "raw_properties.diwali_no_offer", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.inviteruserid__3c4c752c": {"name": "raw_properties.inviteruserid__3c4c752c", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.masternamepk__83e56bc6": {"name": "raw_properties.masternamepk__83e56bc6", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.openaccounttype__4a9f2138": {"name": "raw_properties.openaccounttype__4a9f2138", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.mobileapp__262fcc73": {"name": "raw_properties.mobileapp__262fcc73", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.test_welcome_storyly": {"name": "raw_properties.test_welcome_storyly", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.event": {"name": "raw_properties.event", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.emailid__19ca4b09": {"name": "raw_properties.emailid__19ca4b09", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.quizyten__2cb498bb": {"name": "raw_properties.quizyten__2cb498bb", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.phwebinarreigstered__b102c194": {"name": "raw_properties.phwebinarreigstered__b102c194", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.quizsmmen__046aec03": {"name": "raw_properties.quizsmmen__046aec03", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.favorite_pair__c3760fe2": {"name": "raw_properties.favorite_pair__c3760fe2", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties.mostactivemonth_day__677df07e": {"name": "raw_properties.mostactivemonth_day__677df07e", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties._versioncode__2b8a87a0": {"name": "raw_properties._versioncode__2b8a87a0", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}, "raw_properties._platform": {"name": "raw_properties._platform", "description": "", "meta": {}, "data_type": "STRING", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`bloomreach_raw`.`customers_properties`", "created_at": 1714072384.4824152}, "source.amplitude_source.amplitude.event": {"database": "analytics-147612", "schema": "amplitude", "name": "event", "resource_type": "source", "package_name": "amplitude_source", "path": "models/src_amplitude.yml", "original_file_path": "models/src_amplitude.yml", "unique_id": "source.amplitude_source.amplitude.event", "fqn": ["amplitude_source", "amplitude", "event"], "source_name": "amplitude", "source_description": "", "loader": "fivetran", "identifier": "event", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 6, "period": "hour"}, "error_after": {"count": 12, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents an event sent for your project. Definitions are sourced from the Amplitude documentation [here](https://www.docs.developers.amplitude.com/analytics/apis/http-v2-api/#upload-request-body-parameters).", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amplitude_id": {"name": "amplitude_id", "description": "An internal ID used to count unique users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ad_id": {"name": "ad_id", "description": "(Android) Google Play Services advertising ID (AdID). This usually is wiped after ingestion and therefore will be blank\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amplitude_attribution_ids": {"name": "amplitude_attribution_ids", "description": "Anonymized hash of the advertising IDs that Amplitude stores for internal purposes; not useful for customers by any means. But this will appear if advertising IDs were sent which proves that adid/idfv existed even though currently wiped\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "app": {"name": "app", "description": "Project ID found in your project's Settings page", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "City where event was registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "client_event_time": {"name": "client_event_time", "description": "Local timestamp (UTC) of when the device logged the event.\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "client_upload_time": {"name": "client_upload_time", "description": "The local timestamp (UTC) of when the device uploaded the event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Country where event was registered.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "data": {"name": "data", "description": "Dictionary where certain fields such as first_event and merged_amplitude_id are stored. Ex, {\"first_event\":true}\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_brand": {"name": "device_brand", "description": "Brand of device where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_carrier": {"name": "device_carrier", "description": "Carrier of device where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_family": {"name": "device_family", "description": "Device family. Ex, Apple iPhone", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "The device specific identifier", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_manufacturer": {"name": "device_manufacturer", "description": "Manufacturer of device where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_model": {"name": "device_model", "description": "The model of device where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "device_type": {"name": "device_type", "description": "Type of device where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dma": {"name": "dma", "description": "Designated marketing area (DMA)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "A counter that distinguishes events", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_properties": {"name": "event_properties", "description": "Event properties are attributes of the events your users fire, and which you then send to Amplitude. Each event will have its own set of event properties. The nature of these properties depends on both the type of product you have, and the specific information you're most interested in discovering. For instance, if Swipe is an event you're tracking, the event property Direction could have the values Left or Right. Some example event properties are description, category, type, duration, level, percent completed, count, source, status, number, lives, authenticated, error number, rank, action, and mode. \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_time": {"name": "event_time", "description": "Amplitude timestamp (UTC) which is the client_event_time adjusted by the difference between server_received_time and client_upload_time, specifically: event_time = client_event_time + (server_received_time - client_upload_time) 2015-08-10T12:00:00.000000 We use this timestamp to organize events on Amplitude charts. Note: If the difference between server_received_time and client_upload_time is less than 60 seconds, the event_time will not be adjusted and will equal the client_event_time\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The assigned type of event. Example 'Add Friend'", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_type_id": {"name": "event_type_id", "description": "Internal identifier on Amplitude.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "group_properties": {"name": "group_properties", "description": "A dictionary of key-value pairs that represent data tied to the group. Each distinct value appears as a group segment on the Amplitude dashboard. You can store property values in an array, and date values are transformed into string values.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "groups": {"name": "groups", "description": "Group types. See the Accounts documentation for more information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "idfa": {"name": "idfa", "description": "(iOS) Identifier for Advertiser. This usually is wiped after ingestion and therefore will be blank\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_insert_id": {"name": "_insert_id", "description": "A unique identifier for the event. Amplitude deduplicates subsequent events sent with the same device_id and insert_id within the past 7 days. Amplitude recommends generating a UUID or using some combination of device_id, user_id, event_type, event_id, and time.  \n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_address": {"name": "ip_address", "description": "IP address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_attribution_event": {"name": "is_attribution_event", "description": "Boolean of whether event was an attribution event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "language": {"name": "language", "description": "The language set by the user", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "library": {"name": "library", "description": "Library being used to send the event data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_lat": {"name": "location_lat", "description": "Latitude", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "location_lng": {"name": "location_lng", "description": "Longitude", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_name": {"name": "os_name", "description": "OS name where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_version": {"name": "os_version", "description": "OS version where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paying": {"name": "paying", "description": "Boolean of whether the user has ever logged any revenue, otherwise '(none)'. Note the property value can be modified via the\\_Identify API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "Platform of the device.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "processed_time": {"name": "processed_time", "description": "Time of when event was processed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Project ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "region": {"name": "region", "description": "Region where event was registered on.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "schema": {"name": "schema", "description": "Schema ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "server_received_time": {"name": "server_received_time", "description": "Amplitude timestamp (UTC) of when servers received the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "server_upload_time": {"name": "server_upload_time", "description": "Amplitude timestamp (UTC) of when the event data was uploaded to Amplitude servers", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "The session start time in milliseconds since epoch", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_version": {"name": "start_version", "description": "App version the user was first tracked on", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_creation_time": {"name": "user_creation_time", "description": "Event_time (UTC) of the user's first event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "A readable ID specified by you", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_properties": {"name": "user_properties", "description": "An attribute that describes a useful detail about the user it's attached to. Amplitude sends user properties with every event.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uuid": {"name": "uuid", "description": "A unique identifier per row (event sent)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "version_name": {"name": "version_name", "description": "The app version", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`amplitude`.`event`", "created_at": 1714072384.482574}, "source.amplitude_source.amplitude.event_type": {"database": "analytics-147612", "schema": "amplitude", "name": "event_type", "resource_type": "source", "package_name": "amplitude_source", "path": "models/src_amplitude.yml", "original_file_path": "models/src_amplitude.yml", "unique_id": "source.amplitude_source.amplitude.event_type", "fqn": ["amplitude_source", "amplitude", "event_type"], "source_name": "amplitude", "source_description": "", "loader": "fivetran", "identifier": "event_type", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Each record represents information about an event type. Definitions are sourced from the Amplitude documentation [here](https://www.docs.developers.amplitude.com/analytics/apis/dashboard-rest-api/?h=flow_hidden).", "columns": {"_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Timestamp of when Fivetran marked a record as deleted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when Fivetran synced a record", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "autohidden": {"name": "autohidden", "description": "Whether event type is hidden", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deleted": {"name": "deleted", "description": "Whether event type is deleted", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "display": {"name": "display", "description": "The display name of the event", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "flow_hidden": {"name": "flow_hidden", "description": "If the event is hidden from Pathfinder/Pathfinder Users or not", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "hidden": {"name": "hidden", "description": "If the event is hidden or not.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "Event type ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "in_waitroom": {"name": "in_waitroom", "description": "Whether event type is in waitroom", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Event name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "non_active": {"name": "non_active", "description": "If the event is marked inactive or not", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Project name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "timeline_hidden": {"name": "timeline_hidden", "description": "If the event is hidden or not", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "totals": {"name": "totals", "description": "The total number of times the event has happened this week", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "totals_delta": {"name": "totals_delta", "description": "This represents the change in event volume from the previous week.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "value": {"name": "value", "description": "Name of the event in the raw data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "waitroom_approved": {"name": "waitroom_approved", "description": "Waitroom approved", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`amplitude`.`event_type`", "created_at": 1714072384.482673}, "source.snowplow_normalize.atomic.events": {"database": "analytics-147612", "schema": "atomic", "name": "events", "resource_type": "source", "package_name": "snowplow_normalize", "path": "models/base/src_base.yml", "original_file_path": "models/base/src_base.yml", "unique_id": "source.snowplow_normalize.atomic.events", "fqn": ["snowplow_normalize", "base", "atomic", "events"], "source_name": "atomic", "source_description": "", "loader": "", "identifier": "events", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The `events` table contains all canonical events generated by [Snowplow's](https://snowplow.io/) trackers, including web, mobile and server side events.", "columns": {"app_id": {"name": "app_id", "description": "Application ID e.g. \u2018angry-birds\u2019 is used to distinguish different applications that are being tracked by the same Snowplow stack, e.g. production versus dev.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "platform": {"name": "platform", "description": "Platform e.g. \u2018web\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "etl_tstamp": {"name": "etl_tstamp", "description": "Timestamp event began ETL e.g. \u20182017-01-26 00:01:25.292\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "collector_tstamp": {"name": "collector_tstamp", "description": "Time stamp for the event recorded by the collector e.g. \u20182013-11-26 00:02:05\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_created_tstamp": {"name": "dvce_created_tstamp", "description": "Timestamp event was recorded on the client device e.g. \u20182013-11-26 00:03:57.885\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event": {"name": "event", "description": "The type of event recorded e.g. \u2018page_view\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "A UUID for each event e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "txn_id": {"name": "txn_id", "description": "Transaction ID set client-side, used to de-dupe records e.g. 421828", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name_tracker": {"name": "name_tracker", "description": "Tracker namespace e.g. \u2018sp1\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "v_tracker": {"name": "v_tracker", "description": "Tracker version e.g. \u2018js-3.0.0\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "v_collector": {"name": "v_collector", "description": "Collector version e.g. \u2018ssc-2.1.0-kinesis\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "v_etl": {"name": "v_etl", "description": "ETL version e.g. \u2018snowplow-micro-1.1.0-common-1.4.2\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "Unique ID set by business e.g. \u2018jon.doe@email.com\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_ipaddress": {"name": "user_ipaddress", "description": "User IP address e.g. \u201892.231.54.234\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "user_fingerprint": {"name": "user_fingerprint", "description": "A user fingerprint generated by looking at the individual browser features e.g. 2161814971", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "domain_userid": {"name": "domain_userid", "description": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "domain_sessionidx": {"name": "domain_sessionidx", "description": "A visit / session index e.g. 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "network_userid": {"name": "network_userid", "description": "User ID set by Snowplow using 3rd party cookie e.g. \u2018ecdff4d0-9175-40ac-a8bb-325c49733607\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_country": {"name": "geo_country", "description": "ISO 3166-1 code for the country the visitor is located in e.g. \u2018GB\u2019, \u2018US\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_region": {"name": "geo_region", "description": "ISO-3166-2 code for country region the visitor is in e.g. \u2018I9\u2019, \u2018TX\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_city": {"name": "geo_city", "description": "City the visitor is in e.g. \u2018New York\u2019, \u2018London\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_zipcode": {"name": "geo_zipcode", "description": "Postcode the visitor is in e.g. \u201894109\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_latitude": {"name": "geo_latitude", "description": "Visitor location latitude e.g. 37.443604", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_longitude": {"name": "geo_longitude", "description": "Visitor location longitude e.g. -122.4124", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_region_name": {"name": "geo_region_name", "description": "Visitor region name e.g. \u2018Florida\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_isp": {"name": "ip_isp", "description": "Visitor\u2019s ISP e.g. \u2018FDN Communications\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_organization": {"name": "ip_organization", "description": "Organization associated with the visitor\u2019s IP address \u2013 defaults to ISP name if none is found e.g. \u2018Bouygues Telecom\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_domain": {"name": "ip_domain", "description": "Second level domain name associated with the visitor\u2019s IP address e.g. \u2018nuvox.net\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ip_netspeed": {"name": "ip_netspeed", "description": "Visitor\u2019s connection type e.g. \u2018Cable/DSL\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_url": {"name": "page_url", "description": "The page URL e.g. \u2018http://www.example.com\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_title": {"name": "page_title", "description": "Web page title e.g. \u2018Snowplow Docs \u2013 Understanding the structure of Snowplow data\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_referrer": {"name": "page_referrer", "description": "URL of the referrer e.g. \u2018http://www.referrer.com\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlscheme": {"name": "page_urlscheme", "description": "Scheme aka protocol e.g. \u2018https\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlhost": {"name": "page_urlhost", "description": "Host aka domain e.g. \u2018\u201cwww.snowplow.io\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlport": {"name": "page_urlport", "description": "Port if specified, 80 if not 80", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlpath": {"name": "page_urlpath", "description": "Path to page e.g. \u2018/product/index.html\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlquery": {"name": "page_urlquery", "description": "Querystring e.g. \u2018id=GTM-DLRG\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "page_urlfragment": {"name": "page_urlfragment", "description": "Fragment aka anchor e.g. \u20184-conclusion\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlscheme": {"name": "refr_urlscheme", "description": "Referer scheme e.g. \u2018http\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlhost": {"name": "refr_urlhost", "description": "Referer host e.g. \u2018www.bing.com\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlport": {"name": "refr_urlport", "description": "Referer port e.g. 80", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlpath": {"name": "refr_urlpath", "description": "Referer page path e.g. \u2018/images/search\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlquery": {"name": "refr_urlquery", "description": "Referer URL querystring e.g. \u2018q=psychic+oracle+cards\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_urlfragment": {"name": "refr_urlfragment", "description": "Referer URL fragment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_medium": {"name": "refr_medium", "description": "Type of referer e.g. \u2018search\u2019, \u2018internal\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_source": {"name": "refr_source", "description": "Name of referer if recognised e.g. \u2018Bing images\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_term": {"name": "refr_term", "description": "Keywords if source is a search engine e.g. \u2018psychic oracle cards\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_medium": {"name": "mkt_medium", "description": "Type of traffic source e.g. \u2018cpc\u2019, \u2018affiliate\u2019, \u2018organic\u2019, \u2018social\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_source": {"name": "mkt_source", "description": "The company / website where the traffic came from e.g. \u2018Google\u2019, \u2018Facebook\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_term": {"name": "mkt_term", "description": "Any keywords associated with the referrer e.g. \u2018new age tarot decks\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_content": {"name": "mkt_content", "description": "The content of the ad. (Or an ID so that it can be looked up.) e.g. 13894723", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_campaign": {"name": "mkt_campaign", "description": "The campaign ID e.g. \u2018diageo-123\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "se_category": {"name": "se_category", "description": "Category of event e.g. \u2018ecomm\u2019, \u2018video\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "se_action": {"name": "se_action", "description": "Action performed / event name e.g. \u2018add-to-basket\u2019, \u2018play-video\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "se_label": {"name": "se_label", "description": "The object of the action e.g. the ID of the video played or SKU of the product added-to-basket e.g. \u2018pbz00123\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "se_property": {"name": "se_property", "description": "A property associated with the object of the action e.g. \u2018HD\u2019, \u2018large\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "se_value": {"name": "se_value", "description": "A value associated with the event / action e.g. the value of goods added-to-basket e.g. 9.99", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_orderid": {"name": "tr_orderid", "description": "Order ID e.g. \u2018#134\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_affiliation": {"name": "tr_affiliation", "description": "Transaction affiliation (e.g. store where sale took place) e.g. \u2018web\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_total": {"name": "tr_total", "description": "Total transaction value e.g. 12.99", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_tax": {"name": "tr_tax", "description": "Total tax included in transaction value e.g. 3.00", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_shipping": {"name": "tr_shipping", "description": "Delivery cost charged e.g. 0.00", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_city": {"name": "tr_city", "description": "Delivery address, city e.g. \u2018London\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_state": {"name": "tr_state", "description": "Delivery address, state e.g. \u2018Washington\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_country": {"name": "tr_country", "description": "Delivery address, country e.g. \u2018France\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_orderid": {"name": "ti_orderid", "description": "Order ID e.g. \u2018#134\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_sku": {"name": "ti_sku", "description": "Product SKU e.g. \u2018pbz00123\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_name": {"name": "ti_name", "description": "Product name e.g. \u2018Cone pendulum\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_category": {"name": "ti_category", "description": "Product category e.g. \u2018New Age\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_price": {"name": "ti_price", "description": "Product unit price e.g. 9.99", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_quantity": {"name": "ti_quantity", "description": "Number of product in transaction e.g. 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pp_xoffset_min": {"name": "pp_xoffset_min", "description": "Minimum page x offset seen in the last ping period e.g. 0", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pp_xoffset_max": {"name": "pp_xoffset_max", "description": "Maximum page x offset seen in the last ping period e.g. 100", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pp_yoffset_min": {"name": "pp_yoffset_min", "description": "Minimum page y offset seen in the last ping period e.g. 0", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pp_yoffset_max": {"name": "pp_yoffset_max", "description": "Maximum page y offset seen in the last ping period e.g. 200", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "useragent": {"name": "useragent", "description": "Raw useragent", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_name": {"name": "br_name", "description": "Browser name e.g. \u2018Firefox 12\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_family": {"name": "br_family", "description": "Browser family e.g. \u2018Firefox\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_version": {"name": "br_version", "description": "Browser version e.g. \u201812.0\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_type": {"name": "br_type", "description": "Browser type e.g. \u2018Browser\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_renderengine": {"name": "br_renderengine", "description": "Browser rendering engine e.g. \u2018GECKO\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_lang": {"name": "br_lang", "description": "Language the browser is set to e.g. \u2018en-GB\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_pdf": {"name": "br_features_pdf", "description": "Whether the browser recognizes PDFs e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_flash": {"name": "br_features_flash", "description": "Whether Flash is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_java": {"name": "br_features_java", "description": "Whether Java is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_director": {"name": "br_features_director", "description": "Whether Adobe Shockwave is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_quicktime": {"name": "br_features_quicktime", "description": "Whether QuickTime is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_realplayer": {"name": "br_features_realplayer", "description": "Whether RealPlayer is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_windowsmedia": {"name": "br_features_windowsmedia", "description": "Whether mplayer2 is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_gears": {"name": "br_features_gears", "description": "Whether Google Gears is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_features_silverlight": {"name": "br_features_silverlight", "description": "Whether Microsoft Silverlight is installed e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_cookies": {"name": "br_cookies", "description": "Whether cookies are enabled e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_colordepth": {"name": "br_colordepth", "description": "Bit depth of the browser color palette e.g. 24", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_viewwidth": {"name": "br_viewwidth", "description": "Viewport width e.g. 1000", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "br_viewheight": {"name": "br_viewheight", "description": "Viewport height e.g. 1000", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_name": {"name": "os_name", "description": "Name of operating system e.g. \u2018Android\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_family": {"name": "os_family", "description": "Operating system family e.g. \u2018Linux\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_manufacturer": {"name": "os_manufacturer", "description": "Company responsible for OS e.g. \u2018Apple\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "os_timezone": {"name": "os_timezone", "description": "Client operating system timezone e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_type": {"name": "dvce_type", "description": "Type of device e.g. \u2018Computer\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_ismobile": {"name": "dvce_ismobile", "description": "Is the device mobile? e.g. True", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_screenwidth": {"name": "dvce_screenwidth", "description": "Screen width in pixels e.g. 1900", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_screenheight": {"name": "dvce_screenheight", "description": "Screen height in pixels e.g. 1024", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_charset": {"name": "doc_charset", "description": "The page\u2019s character encoding e.g. , \u2018UTF-8\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_width": {"name": "doc_width", "description": "The page\u2019s width in pixels e.g. 1024", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "doc_height": {"name": "doc_height", "description": "The page\u2019s height in pixels e.g. 3000", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_currency": {"name": "tr_currency", "description": "Currency e.g. \u2018USD\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_total_base": {"name": "tr_total_base", "description": "Total in base currency e.g. 12.99", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_tax_base": {"name": "tr_tax_base", "description": "Total tax in base currency e.g. 3.00", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tr_shipping_base": {"name": "tr_shipping_base", "description": "decimal  Delivery cost in base currency e.g. 0.00", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_currency": {"name": "ti_currency", "description": "Currency e.g. \u2018EUR\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ti_price_base": {"name": "ti_price_base", "description": "decimal Price in base currency e.g. 9.99", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "base_currency": {"name": "base_currency", "description": "Reporting currency e.g. \u2018GBP\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "geo_timezone": {"name": "geo_timezone", "description": "Visitor timezone name e.g. \u2018Europe/London\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_clickid": {"name": "mkt_clickid", "description": "The click ID e.g. \u2018ac3d8e459\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mkt_network": {"name": "mkt_network", "description": "The ad network to which the click ID belongs e.g. \u2018DoubleClick\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "etl_tags": {"name": "etl_tags", "description": "JSON of tags for this ETL run e.g. \u201c[\u2018prod\u2019]\u201d", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dvce_sent_tstamp": {"name": "dvce_sent_tstamp", "description": "When the event was sent by the client device e.g. \u20182013-11-26 00:03:58.032\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_domain_userid": {"name": "refr_domain_userid", "description": "The Snowplow domain_userid of the referring website e.g. \u2018bc2e92ec6c204a14\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refr_dvce_tstamp": {"name": "refr_dvce_tstamp", "description": "The time of attaching the domain_userid to the inbound link e.g. \u20182013-11-26 00:02:05\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "domain_sessionid": {"name": "domain_sessionid", "description": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "derived_tstamp": {"name": "derived_tstamp", "description": "Timestamp making allowance for innaccurate device clock e.g. \u20182013-11-26 00:02:04\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_vendor": {"name": "event_vendor", "description": "Who defined the event e.g. \u2018com.acme\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "Event name e.g. \u2018link_click\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_format": {"name": "event_format", "description": "Format for event e.g. \u2018jsonschema\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_version": {"name": "event_version", "description": "Version of event schema e.g. \u20181-0-2\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "event_fingerprint": {"name": "event_fingerprint", "description": "Hash client-set event fields e.g. AADCE520E20C2899F4CED228A79A3083", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "true_tstamp": {"name": "true_tstamp", "description": "User-set \u201ctrue timestamp\u201d for the event e.g. \u20182013-11-26 00:02:04\u2019", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`analytics-147612`.`atomic`.`events`", "created_at": 1714072384.48294}}, "macros": {"macro.dbt_octafx.get_user_id_based_on_client_id": {"name": "get_user_id_based_on_client_id", "resource_type": "macro", "package_name": "dbt_octafx", "path": "macros/get_user_id_based_on_client_id.sql", "original_file_path": "macros/get_user_id_based_on_client_id.sql", "unique_id": "macro.dbt_octafx.get_user_id_based_on_client_id", "macro_sql": "{% macro get_user_id_based_on_client_id(client_id) %}\n    {% set query %}\n        SELECT user_id\n        FROM {{ ref('users_cids_all') }}\n        WHERE client_id = '{{ client_id }}'\n        LIMIT 1\n    {% endset %}\n\n    {% set results = run_query(query) %}\n    {% if execute %}\n        {% set user_id = results.columns[0].values()[0] %}\n        {{ return(user_id) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.624993, "supported_languages": null}, "macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.625298, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.625481, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.62571, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.629632, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.630075, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.630205, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.630342, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.630477, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.630717, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.63095, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.631232, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.631386, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.631813, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.632168, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.632808, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.632992, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.633325, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.633703, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6338618, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6347032, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6352608, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.635883, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.639203, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"indirect\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.640061, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6414452, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.643407, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.643661, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.64433, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.644873, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6483788, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.648774, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.648913, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.64903, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.649201, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.649318, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.650094, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6504939, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.652949, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.654102, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6545868, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.655453, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.656079, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.657079, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.658268, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.658648, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.65888, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.659622, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.65996, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.660135, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.660547, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.661119, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.661376, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.662165, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.662312, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_model_node(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6631029, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6633852, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.663928, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.664201, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_model_node(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.664775, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6649091, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.665171, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.665328, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.665455, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6670542, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.667254, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.667587, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.667844, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.668003, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.66913, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.671644, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.671741, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6718311, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.672092, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.672192, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6724532, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.673667, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6737869, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.674043, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.67423, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.674401, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6744719, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.674562, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.674742, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6755588, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6761029, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.676264, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.676699, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.676912, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.677255, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.677692, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.677839, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.677987, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6781461, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.678317, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.678435, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.678953, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.679182, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.679519, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt_graph_theory.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.679732, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.680516, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.680745, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.680958, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6812181, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6814358, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.682448, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.682622, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.682764, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.682892, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.683021, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.683346, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.683614, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.683881, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.684267, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.68467, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.687832, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.687994, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.688192, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6888268, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6889758, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.689131, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.690719, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6921668, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.695539, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.695798, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.696042, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.696127, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.696324, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6964931, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.696694, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6974962, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.6977391, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.697987, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.698376, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7038348, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.706649, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.707084, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.70736, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7076921, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.708045, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.711941, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.712277, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.712492, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.713583, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7137868, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7144809, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.717298, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.720097, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7215219, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7220201, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7226188, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.722832, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.723475, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7284648, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7298932, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.730143, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7312891, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.731552, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7321322, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7327218, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.73349, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.734536, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.737195, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.741452, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.74477, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.746387, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7482398, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.750033, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.750754, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7509592, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.75125, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.761006, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.765522, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.766871, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.768202, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7690308, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.769529, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7696629, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.769967, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.770099, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.773747, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7770398, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.781524, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.782336, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.782548, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.782978, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.783154, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7832801, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.783411, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7835178, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.783669, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7841978, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.784717, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.784919, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7861052, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.78651, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.786853, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.787308, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.787576, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7878342, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.788183, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7884018, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7891772, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.789547, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.789739, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.789927, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.790259, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.791113, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.792334, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7931929, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.793466, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.793946, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.794257, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.794959, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7953742, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7955682, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7958322, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.796155, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.79641, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7968278, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.797237, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.797536, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.797788, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.798044, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.798375, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7987041, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.798869, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.7993011, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.799527, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.799785, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.799922, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.80048, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.800659, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8009322, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8010712, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.801326, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8014588, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8025112, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.802627, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8031528, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.803308, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8034298, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.804641, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column", "macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.804977, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.80528, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.805523, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8056178, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.805855, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.805985, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.80622, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8063538, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8070662, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8072278, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.807606, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8082392, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.808647, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.808813, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8089678, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.809205, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.809298, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8099961, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.810126, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.811191, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.811368, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.811559, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.811792, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.81192, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8125281, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8126981, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.812876, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8132532, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.813594, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.813969, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.814216, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8147461, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.81603, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.816536, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8167958, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8182778, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.819361, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.819998, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.820199, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.820404, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.820472, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.821095, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8216178, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8218281, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.822159, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.822569, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.822727, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.822958, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.823072, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.823793, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.824173, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.824339, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.824783, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.825108, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8252218, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.825522, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.825669, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.82587, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.82623, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.826464, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.826591, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.826847, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.82697, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.827498, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8278558, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.828137, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.828278, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.828518, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.828639, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.828855, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.828994, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.829222, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.829377, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8295941, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8296828, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.829932, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8300521, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.830267, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.830423, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.831257, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.831393, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.831536, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.831667, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.831805, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.831934, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.832075, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8322299, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.832475, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.832693, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8328488, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.832978, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.833123, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8332522, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8335009, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8336189, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.833826, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.833919, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.834205, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8345091, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.834642, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.835066, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.835205, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.835393, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.835624, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.835742, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8360598, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.836288, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.836542, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.836664, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.836983, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.837149, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8372989, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.837482, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.837893, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.838024, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.838153, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.83824, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.838379, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.838457, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.838664, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.838945, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.839649, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.839777, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.839919, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.84029, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.840461, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8405812, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.840717, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.840832, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8425238, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8427148, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8429692, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8432472, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.843481, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.843764, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.843938, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8441029, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.844373, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.844959, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.845164, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8453069, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.84574, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.846093, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.846344, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.846621, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.84814, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8482418, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8483882, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.848487, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.848788, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.848952, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.849039, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.849237, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.849397, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.849598, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.849752, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.849956, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.850635, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.850802, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8510149, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.851211, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8521988, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.852809, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.853024, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8531551, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.853772, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8539991, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8542101, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.854362, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.854603, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8551822, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.858031, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8582652, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.858443, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8586712, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.858832, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.858977, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.859139, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8594508, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.859622, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.859932, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.860112, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8602722, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.860426, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.860564, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.860748, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.860905, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.862726, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.863009, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8634171, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.863625, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.86381, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.863969, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.865077, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.86539, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.865551, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8658628, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.86607, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.866585, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8668091, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.867501, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.868835, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.868981, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.869704, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.870069, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8706, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8710241, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8711, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.871673, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8718982, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.872156, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.872402, "supported_languages": null}, "macro.dbt_activity_schema.activity": {"name": "activity", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/activity.sql", "original_file_path": "macros/activity.sql", "unique_id": "macro.dbt_activity_schema.activity", "macro_sql": "{% macro activity(\n    relationship,\n    activity_name,\n    included_columns=var(\"included_columns\", var(\"dbt_activity_schema\",\n    {}).get(\"included_columns\", dbt_activity_schema.columns().values() | list)),\n    additional_join_condition=\"true\"\n) %}\n\n{{ return(adapter.dispatch(\"activity\", \"dbt_activity_schema\")(\n    relationship,\n    activity_name,\n    included_columns,\n    additional_join_condition\n)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.default__activity"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.873151, "supported_languages": null}, "macro.dbt_activity_schema.default__activity": {"name": "default__activity", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/activity.sql", "original_file_path": "macros/activity.sql", "unique_id": "macro.dbt_activity_schema.default__activity", "macro_sql": "{% macro default__activity(\n    relationship,\n    activity_name,\n    included_columns,\n    additional_join_condition\n) %}\n\n{# An activity to include in the dataset.\n\nparams:\n\n    relationship: relationship\n        The relationship that defines the how the appended activity is joined to\n        the primary activity.\n\n    activity_name: str\n        The string identifier of the activity in the Activity Stream to join to\n        the primary activity.\n\n    included_columns: List[str]\n        List of columns to join to the primary activity, defaults to the\n        `included_columns` vars if it is set, otherwise defaults to the columns\n        defined in columns.sql.\n\n    additional_join_condition: str\n        A valid sql boolean to condition the join of the appended activity. Can\n        optionally contain the python f-string placeholders \"{primary}\" and\n        \"{appended}\" in the string; these will be compiled with the correct\n        aliases.\n\n        Eg:\n\n        \"json_extract({primary}.feature_json, 'dim1')\n            = \"json_extract({appended}.feature_json, 'dim1')\"\n\n        The \"{primary}\" and \"{appended}\" placholders correctly compiled\n        depending on the cardinatity of the joined activity in the\n        `appended_activities` list argument to `dataset.sql`.\n\n        Compiled:\n\n        \"json_extract(stream.feature_json, 'dim1')\n            = \"json_extract(stream_3.feature_json, 'dim1')\"\n\n        Given that the appended activity was 3rd in the `appended_activities`\n        list argument.\n#}\n\n{% set columns = dbt_activity_schema.columns() %}\n\n{# Required for the joins, but not necessarily included in the final result. #}\n{% set required_columns = [\n    columns.activity_id,\n    columns.activity,\n    columns.ts,\n    columns.customer,\n    columns.activity_occurrence,\n    columns.activity_repeated_at\n] %}\n\n{% for col in included_columns %}\n    {% if col in required_columns %}\n        {% do required_columns.remove(col) %}\n    {% endif %}\n{% endfor %}\n\n{% do return(namespace(\n    name = activity_name,\n    included_columns = included_columns,\n    required_columns = required_columns,\n    relationship = relationship,\n    additional_join_condition = additional_join_condition\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.874054, "supported_languages": null}, "macro.dbt_activity_schema.dataset": {"name": "dataset", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/dataset.sql", "original_file_path": "macros/dataset.sql", "unique_id": "macro.dbt_activity_schema.dataset", "macro_sql": "{% macro dataset(\n    activity_stream,\n    primary_activity,\n    appended_activities=[]\n) %} {{ return(adapter.dispatch(\"dataset\", \"dbt_activity_schema\")(\n    activity_stream,\n    primary_activity,\n    appended_activities\n)) }} {% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.default__dataset"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.876787, "supported_languages": null}, "macro.dbt_activity_schema.default__dataset": {"name": "default__dataset", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/dataset.sql", "original_file_path": "macros/dataset.sql", "unique_id": "macro.dbt_activity_schema.default__dataset", "macro_sql": "{% macro default__dataset(\n    activity_stream,\n    primary_activity,\n    appended_activities\n) %}\n\n{# Create a derived dataset using self-joins from an Activity Stream model.\n\nparams:\n\n    activity_stream: ref() | str\n        The dbt `ref()` or a CTE name that contains the required columns.\n\n    primary_activity: activity (class)\n        The primary activity of the derived dataset.\n\n    appended_activities: List[ activity (class) ]\n        The list of appended activities to self-join to the primary activity.\n#}\n\n{% set columns = dbt_activity_schema.columns() %}\n{% set primary = dbt_activity_schema.primary %}\n{% set appended = dbt_activity_schema.appended %}\n{% set alias_cte = dbt_activity_schema.alias_cte %}\n{% set alias_column = dbt_activity_schema.alias_column %}\n{% set alias_appended_activity = dbt_activity_schema.alias_appended_activity %}\n{% set render_join = dbt_activity_schema.render_additional_join_condition %}\n{% set render_agg = dbt_activity_schema.render_aggregation %}\n\nwith\n\nfilter_activity_stream_using_primary_activity as (\n    select\n        {% for col in primary_activity.included_columns + primary_activity.required_columns %}\n        {{ dbt_activity_schema.parse_column(primary(), col) }} as {{ col }}{%- if not loop.last -%},{%- endif %}\n        {% endfor %}\n\n    from {{ activity_stream }} as {{ primary() }}\n\n    where {{ primary() }}.{{ columns.activity }} = {{ dbt.string_literal(primary_activity.name) }}\n        and {{ primary_activity.relationship.where_clause }}\n),\n\n{% for activity in appended_activities %}{% set i = loop.index %}\n\n{{ alias_cte(activity, i) }} as (\n    select\n\n        -- Primary Activity Columns\n        {% for col in primary_activity.included_columns + primary_activity.required_columns %}\n        {{ primary() }}.{{- col }},\n        {% endfor %}\n\n        {% for col in activity.included_columns %}\n            {%- set parsed_col = dbt_activity_schema.parse_column(appended(), col) -%}\n            {% call activity.relationship.aggregation_func() %}\n            {{ parsed_col }}\n            {% endcall %} as {{ dbt_activity_schema.alias_appended_activity(activity, col) }}\n            {% if not loop.last %},{% endif %}\n        {% endfor %}\n\n    from filter_activity_stream_using_primary_activity as {{ primary() }}\n\n    left join {{ activity_stream }} as {{ appended() }}\n        on (\n            -- Join on Customer UUID Column\n            {{ appended() }}.{{ columns.customer }} = {{ primary() }}.{{ columns.customer }}\n\n            -- Join the Correct Activity\n            and {{ appended() }}.{{- columns.activity }} = {{ dbt.string_literal(activity.name) }}\n\n            -- Relationship Specific Join Conditions\n            and (\n            {# nth_ever_join_clause relies on instantiated nth_occurance arg, in\n            addition to the i passed to the join #}\n            {% if activity.relationship.name == \"nth_ever\" %}\n            {{ activity.relationship.join_clause(activity.relationship.nth_occurance) }}\n            {% else %}\n            {{ activity.relationship.join_clause() }}\n            {% endif %}\n            )\n            -- Additional Join Condition\n            and ( {{ activity.additional_join_condition }} )\n        )\n\n    group by\n        {% for col in primary_activity.included_columns + primary_activity.required_columns %}\n        {{ primary() }}.{{ col }}{%- if not loop.last -%},{%- endif %}\n        {% endfor %}\n),\n\n{% endfor %}\n\nrejoin_aggregated_activities as (\n    select\n\n        {% for col in primary_activity.included_columns %}\n        {{ primary() }}.{{ col }},\n        {% endfor %}\n\n        {% for activity in appended_activities %}{% set i = loop.index %}{% set last_outer_loop = loop.last %}\n            {% for col in activity.included_columns %}\n        {{ alias_cte(activity, i) }}.{{ alias_appended_activity(activity, col) }}{% if not (last_outer_loop and loop.last) %},{% endif %}\n            {% endfor %}\n        {% endfor %}\n\n    from filter_activity_stream_using_primary_activity as {{ primary() }}\n\n    {% for activity in appended_activities %}{% set i = loop.index %}\n\n    left join {{ alias_cte(activity, i) }}\n        on {{ alias_cte(activity, i) }}.{{ columns.activity_id }} = {{ primary() }}.{{ columns.activity_id }}\n\n    {% endfor %}\n)\n\nselect * from rejoin_aggregated_activities\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.parse_column", "macro.dbt_activity_schema.primary", "macro.dbt.string_literal", "macro.dbt_activity_schema.alias_cte", "macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.alias_appended_activity"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8796, "supported_languages": null}, "macro.dbt_activity_schema.columns": {"name": "columns", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/columns.sql", "original_file_path": "macros/utils/columns.sql", "unique_id": "macro.dbt_activity_schema.columns", "macro_sql": "{% macro columns() %}\n\t{{ return(adapter.dispatch(\"columns\", \"dbt_activity_schema\")())}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.default__columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.879968, "supported_languages": null}, "macro.dbt_activity_schema.default__columns": {"name": "default__columns", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/columns.sql", "original_file_path": "macros/utils/columns.sql", "unique_id": "macro.dbt_activity_schema.default__columns", "macro_sql": "{% macro default__columns() %}\n\n{% set column_names =\n    dict(\n        activity_id = \"activity_id\",\n        ts = \"ts\",\n        customer = \"customer\",\n        anonymous_customer_id = \"anonymous_customer_id\",\n        activity = \"activity\",\n        activity_occurrence = \"activity_occurrence\",\n        activity_repeated_at = \"activity_repeated_at\",\n        feature_json = \"feature_json\",\n        revenue_impact = \"revenue_impact\",\n        link = \"link\"\n    )\n%}\n\n{# Update names using the `column_mappings` project var. #}\n{% do column_names.update(var(\"column_mappings\", var(\"dbt_activity_schema\", {}).get(\"column_mappings\", {}))) %}\n\n{% do return(column_names) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8804832, "supported_languages": null}, "macro.dbt_activity_schema.primary": {"name": "primary", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/constants/primary.sql", "original_file_path": "macros/utils/constants/primary.sql", "unique_id": "macro.dbt_activity_schema.primary", "macro_sql": "{% macro primary() %}\n\n{% do return(\"stream\") %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.880626, "supported_languages": null}, "macro.dbt_activity_schema.appended": {"name": "appended", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/constants/appended.sql", "original_file_path": "macros/utils/constants/appended.sql", "unique_id": "macro.dbt_activity_schema.appended", "macro_sql": "{% macro appended() %}\n{% do return(\"appended\") %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.880768, "supported_languages": null}, "macro.dbt_activity_schema.alias_cte": {"name": "alias_cte", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/aliasing/alias_cte.sql", "original_file_path": "macros/utils/aliasing/alias_cte.sql", "unique_id": "macro.dbt_activity_schema.alias_cte", "macro_sql": "{%- macro alias_cte(activity, i) -%}\n\t{{ return(adapter.dispatch(\"alias_cte\", \"dbt_activity_schema\")(activity, i))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.default__alias_cte"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.881069, "supported_languages": null}, "macro.dbt_activity_schema.default__alias_cte": {"name": "default__alias_cte", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/aliasing/alias_cte.sql", "original_file_path": "macros/utils/aliasing/alias_cte.sql", "unique_id": "macro.dbt_activity_schema.default__alias_cte", "macro_sql": "\n\n\n{%- macro default__alias_cte(activity, i) -%}\n\n{# Generate the alias for the stream and it's appended activities.\n\nparams:\n\n    activity: activity (class)\n        The activity used to create the alias with a meaningful name for the\n        compiled dataset.\n\n    i: int\n        The cardinality of the appended activity, and thus the self join of the\n        Activity Schema. Used to rejoin the Activity Schema multiple times, for\n        multiple appended activities, with each being given a unique alias.\n\n#}\n\n{% set alias %}\nappend_and_aggregate__{{ i }}__{{ activity.relationship.name }}\n{% endset %}\n\n{% do return(alias) %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8813, "supported_languages": null}, "macro.dbt_activity_schema.alias_appended_activity": {"name": "alias_appended_activity", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/aliasing/alias_appended_activity.sql", "original_file_path": "macros/utils/aliasing/alias_appended_activity.sql", "unique_id": "macro.dbt_activity_schema.alias_appended_activity", "macro_sql": "{% macro alias_appended_activity(activity, column_name) %}\n\t{{ return(adapter.dispatch(\"alias_appended_activity\", \"dbt_activity_schema\")(activity, column_name))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.default__alias_appended_activity"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.881669, "supported_languages": null}, "macro.dbt_activity_schema.default__alias_appended_activity": {"name": "default__alias_appended_activity", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/aliasing/alias_appended_activity.sql", "original_file_path": "macros/utils/aliasing/alias_appended_activity.sql", "unique_id": "macro.dbt_activity_schema.default__alias_appended_activity", "macro_sql": "{% macro default__alias_appended_activity(activity, column_name) %}\n\n{# Generate the name of appended columns in `dataset.sql`.\n\nparams:\n\n    activity: activity (class)\n        The appended activity object, containing the string attributes to be concatenated in the\n        column alias prefix.\n\n    column_name: str\n        The name of the column that will be aliased.\n#}\n\n{% set name = activity.relationship.name %}\n{% if activity.relationship.name == 'nth_ever' %}\n    {% set name -%}\n    {{ name }}_{{ activity.relationship.nth_occurance }}\n    {%- endset %}\n{% endif %}\n\n{% set concatenated_activity_alias %}\n{{ name -}}_{{- activity.name | replace(\" \", \"_\") -}}_{{- column_name -}}\n{% endset %}\n\n{% do return(concatenated_activity_alias) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.882124, "supported_languages": null}, "macro.dbt_activity_schema.alias_column": {"name": "alias_column", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/aliasing/alias_column.sql", "original_file_path": "macros/utils/aliasing/alias_column.sql", "unique_id": "macro.dbt_activity_schema.alias_column", "macro_sql": "{% macro alias_column(column_name, i=none) %}\n\t{{ return(adapter.dispatch(\"alias_column\", \"dbt_activity_schema\")(column_name, i))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.default__alias_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.882411, "supported_languages": null}, "macro.dbt_activity_schema.default__alias_column": {"name": "default__alias_column", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/aliasing/alias_column.sql", "original_file_path": "macros/utils/aliasing/alias_column.sql", "unique_id": "macro.dbt_activity_schema.default__alias_column", "macro_sql": "\n\n\n{%- macro default__alias_column(column_name, i) -%}\n\n{# Generate the alias for the stream and it's appended activities.\n\nparams:\n\n    column_name: str\n        The name of the column that will be aliased.\n\n    i: int\n        The cardinality of the appended activity, and thus the self join of the\n        Activity Schema. Used to rejoin the Activity Schema multiple times, for\n        multiple appended activities, with each being given a unique alias.\n\n#}\n\n{% set alias %}\n{{ dbt_activity_schema.appended() }}.{{ column_name }}\n{% endset %}\n\n{% do return(alias) %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_activity_schema.appended"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.882625, "supported_languages": null}, "macro.dbt_activity_schema.max": {"name": "max", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/aggregations/max.sql", "original_file_path": "macros/utils/aggregations/max.sql", "unique_id": "macro.dbt_activity_schema.max", "macro_sql": "{% macro max() %}\n\n{% do return(dbt_activity_schema._min_or_max(\"max\", caller())) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema._min_or_max"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8828108, "supported_languages": null}, "macro.dbt_activity_schema.count": {"name": "count", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/aggregations/count.sql", "original_file_path": "macros/utils/aggregations/count.sql", "unique_id": "macro.dbt_activity_schema.count", "macro_sql": "{% macro count() %}\ncount({{ caller() }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.882926, "supported_languages": null}, "macro.dbt_activity_schema.sum": {"name": "sum", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/aggregations/sum.sql", "original_file_path": "macros/utils/aggregations/sum.sql", "unique_id": "macro.dbt_activity_schema.sum", "macro_sql": "{% macro sum() %}\nsum({{ caller() }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.883192, "supported_languages": null}, "macro.dbt_activity_schema.min": {"name": "min", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/aggregations/min.sql", "original_file_path": "macros/utils/aggregations/min.sql", "unique_id": "macro.dbt_activity_schema.min", "macro_sql": "{% macro min() %}\n\n{% do return(dbt_activity_schema._min_or_max(\"min\", caller())) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema._min_or_max"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8834748, "supported_languages": null}, "macro.dbt_activity_schema._min_or_max": {"name": "_min_or_max", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/aggregations/_min_or_max.sql", "original_file_path": "macros/utils/aggregations/_min_or_max.sql", "unique_id": "macro.dbt_activity_schema._min_or_max", "macro_sql": "{% macro _min_or_max(min_or_max, qualified_col) %}\n\n{% set aggregation = \"min\" if min_or_max == \"min\" else \"max\" %}\n{% set column_name = qualified_col.split(\".\")[-1].strip() %}\n{% set qualified_ts_col = \"{}.{}\".format(dbt_activity_schema.appended(), dbt_activity_schema.columns().ts )%}\n{% set columns = dbt_activity_schema.columns() %}\n\n\n{# Set type to cast back to after aggregation. #}\n{# TODO: Refactor column abstraction to contain types. #}\n{% if column_name in [\n    columns.ts,\n    columns.activity_repeated_at\n] %}\n    {% set type = dbt.type_timestamp() %}\n{% elif column_name in [\n    columns.activity_occurrence,\n    columns.revenue_impact\n] %}\n    {% set type = dbt.type_numeric() %}\n{% else %}\n    {% set type = dbt.type_string() %}\n{% endif %}\n\n{# Prepend ts column and aggregate. See here for details: https://tinyurl.com/mwfz6xm4 #}\n{% set ts_concatenated_and_aggregated_col %}\n    {{ aggregation }}(\n        {{ dbt.concat([\n            dbt.safe_cast(qualified_ts_col, dbt.type_string()),\n            dbt.safe_cast(qualified_col, dbt.type_string())\n            ]) }}\n        )\n{% endset %}\n\n{# Aggregate ts column before trimming, so it is not required in GROUP BY. #}\n{% set aggregated_ts_col %}\n    {{ aggregation }}( {{ dbt.safe_cast(qualified_ts_col, dbt.type_string()) }} )\n{% endset %}\n\n{# Calculate length of column without prepended & aggregated ts column. #}\n{% set retain_n_rightmost_characters %}\n{{ dbt.length(ts_concatenated_and_aggregated_col) }} - {{ dbt.length(aggregated_ts_col) }}\n{% endset %}\n\n{# Remove prepended & aggregated ts column. #}\n{% set output %}\n{{ dbt.safe_cast(\n    dbt.right(\n        ts_concatenated_and_aggregated_col,\n        retain_n_rightmost_characters\n    ), type) }}\n{% endset %}\n\n{% do return(output) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.columns", "macro.dbt.type_timestamp", "macro.dbt.type_numeric", "macro.dbt.type_string", "macro.dbt.concat", "macro.dbt.safe_cast", "macro.dbt.length", "macro.dbt.right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.885392, "supported_languages": null}, "macro.dbt_activity_schema.parse_column": {"name": "parse_column", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/helpers/parse_column.sql", "original_file_path": "macros/utils/helpers/parse_column.sql", "unique_id": "macro.dbt_activity_schema.parse_column", "macro_sql": "{% macro parse_column(table_alias, column) %}\n\n{% set columns = dbt_activity_schema.columns() %}\n{%- if column not in columns.values() -%}\n    {%- set parsed_column = dbt_activity_schema.json_unpack_key(table_alias ~ '.' ~ columns.feature_json, column) -%}\n{%- else -%}\n    {%- set parsed_column = table_alias ~ '.' ~ column -%}\n{%- endif -%}\n\n{% do return(parsed_column) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.json_unpack_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.88589, "supported_languages": null}, "macro.dbt_activity_schema.ltrim": {"name": "ltrim", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/helpers/ltrim.sql", "original_file_path": "macros/utils/helpers/ltrim.sql", "unique_id": "macro.dbt_activity_schema.ltrim", "macro_sql": "{%- macro ltrim(col, characters=none) -%}\n\t{{ return(adapter.dispatch(\"ltrim\", \"dbt_activity_schema\")(col, characters)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_activity_schema.default__ltrim"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8861718, "supported_languages": null}, "macro.dbt_activity_schema.default__ltrim": {"name": "default__ltrim", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/helpers/ltrim.sql", "original_file_path": "macros/utils/helpers/ltrim.sql", "unique_id": "macro.dbt_activity_schema.default__ltrim", "macro_sql": "{%- macro default__ltrim(col, characters) -%}\n\n{% if characters %}\nltrim({{ col }}, {{ characters }})\n{% else %}\nltrim({{ col }})\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8863602, "supported_languages": null}, "macro.dbt_activity_schema.json_unpack_key": {"name": "json_unpack_key", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/helpers/json_unpack_key.sql", "original_file_path": "macros/utils/helpers/json_unpack_key.sql", "unique_id": "macro.dbt_activity_schema.json_unpack_key", "macro_sql": "{% macro json_unpack_key(json_col, key) %}\n\t{{ return(adapter.dispatch(\"json_unpack_key\", \"dbt_activity_schema\")(json_col, key))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.bigquery__json_unpack_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.886718, "supported_languages": null}, "macro.dbt_activity_schema.default__json_unpack_key": {"name": "default__json_unpack_key", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/helpers/json_unpack_key.sql", "original_file_path": "macros/utils/helpers/json_unpack_key.sql", "unique_id": "macro.dbt_activity_schema.default__json_unpack_key", "macro_sql": "{% macro default__json_unpack_key(json_col, key) -%}\n\n{% if caller %}\n\njson_extract_path_text({{ caller }})\n\n{% else %}\n\njson_extract_path_text({{ json_col }}, {{dbt.string_literal(key) }})\n\n{% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8869278, "supported_languages": null}, "macro.dbt_activity_schema.bigquery__json_unpack_key": {"name": "bigquery__json_unpack_key", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/utils/helpers/json_unpack_key.sql", "original_file_path": "macros/utils/helpers/json_unpack_key.sql", "unique_id": "macro.dbt_activity_schema.bigquery__json_unpack_key", "macro_sql": "{% macro bigquery__json_unpack_key(json_col, key) -%}\n\n{% if caller %}\n\njson_extract({{ caller }})\n\n{% else %}\n\njson_extract({{ json_col }}, {{dbt.string_literal(\"$.\"~key) }})\n\n{% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.887146, "supported_languages": null}, "macro.dbt_activity_schema.last_ever_join_clause": {"name": "last_ever_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/last_ever.sql", "original_file_path": "macros/relationships/last_ever.sql", "unique_id": "macro.dbt_activity_schema.last_ever_join_clause", "macro_sql": "{% macro last_ever_join_clause(alias=dbt_activity_schema.appended()) %}\n(\n    {{ alias }}.{{ dbt_activity_schema.columns().activity_repeated_at }} is null\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.887402, "supported_languages": null}, "macro.dbt_activity_schema.last_ever": {"name": "last_ever", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/last_ever.sql", "original_file_path": "macros/relationships/last_ever.sql", "unique_id": "macro.dbt_activity_schema.last_ever", "macro_sql": "{% macro last_ever() %}\n\n{% do return(namespace(\n    name=\"last_ever\",\n    aggregation_func=dbt_activity_schema.min,\n    join_clause=dbt_activity_schema.last_ever_join_clause,\n    where_clause=dbt_activity_schema.last_ever_join_clause(dbt_activity_schema.primary())\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.last_ever_join_clause", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.88765, "supported_languages": null}, "macro.dbt_activity_schema.nth_ever_join_clause": {"name": "nth_ever_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/nth_ever.sql", "original_file_path": "macros/relationships/nth_ever.sql", "unique_id": "macro.dbt_activity_schema.nth_ever_join_clause", "macro_sql": "{% macro nth_ever_join_clause(nth_occurance, alias=dbt_activity_schema.appended()) %}\n(\n    {{ alias }}.{{ dbt_activity_schema.columns().activity_occurrence }} = {{ nth_occurance }}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.887938, "supported_languages": null}, "macro.dbt_activity_schema.nth_ever": {"name": "nth_ever", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/nth_ever.sql", "original_file_path": "macros/relationships/nth_ever.sql", "unique_id": "macro.dbt_activity_schema.nth_ever", "macro_sql": "{% macro nth_ever(nth_occurance) %}\n\n{% do return(namespace(\n    name=\"nth_ever\",\n    aggregation_func=dbt_activity_schema.min,\n    nth_occurance=nth_occurance,\n    join_clause=dbt_activity_schema.nth_ever_join_clause,\n    where_clause=dbt_activity_schema.nth_ever_join_clause(nth_occurance, dbt_activity_schema.primary())\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.nth_ever_join_clause", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.888222, "supported_languages": null}, "macro.dbt_activity_schema.first_ever_join_clause": {"name": "first_ever_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/first_ever.sql", "original_file_path": "macros/relationships/first_ever.sql", "unique_id": "macro.dbt_activity_schema.first_ever_join_clause", "macro_sql": "{% macro first_ever_join_clause(alias=dbt_activity_schema.appended()) %}\n(\n    {{ alias }}.{{ dbt_activity_schema.columns().activity_occurrence }} = 1\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.888468, "supported_languages": null}, "macro.dbt_activity_schema.first_ever": {"name": "first_ever", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/first_ever.sql", "original_file_path": "macros/relationships/first_ever.sql", "unique_id": "macro.dbt_activity_schema.first_ever", "macro_sql": "{% macro first_ever() %}\n\n{% do return(namespace(\n    name=\"first_ever\",\n    aggregation_func=dbt_activity_schema.min,\n    join_clause=dbt_activity_schema.first_ever_join_clause,\n    where_clause=dbt_activity_schema.first_ever_join_clause(dbt_activity_schema.primary())\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.first_ever_join_clause", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8887098, "supported_languages": null}, "macro.dbt_activity_schema.all_ever_join_clause": {"name": "all_ever_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/all_ever.sql", "original_file_path": "macros/relationships/all_ever.sql", "unique_id": "macro.dbt_activity_schema.all_ever_join_clause", "macro_sql": "{% macro all_ever_join_clause() %}\n(true)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.888832, "supported_languages": null}, "macro.dbt_activity_schema.all_ever": {"name": "all_ever", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/all_ever.sql", "original_file_path": "macros/relationships/all_ever.sql", "unique_id": "macro.dbt_activity_schema.all_ever", "macro_sql": "{% macro all_ever() %}\n\n{% do return(namespace(\n    name=\"all_ever\",\n    aggregation_func=dbt_activity_schema.min,\n    join_clause=dbt_activity_schema.all_ever_join_clause,\n    where_clause=dbt_activity_schema.all_ever_join_clause()\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.all_ever_join_clause"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.88905, "supported_languages": null}, "macro.dbt_activity_schema.first_after_join_clause": {"name": "first_after_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/first_after.sql", "original_file_path": "macros/relationships/append_only/first_after.sql", "unique_id": "macro.dbt_activity_schema.first_after_join_clause", "macro_sql": "{% macro first_after_join_clause(i) %}\n\n{% set primary = dbt_activity_schema.primary %}\n{% set columns = dbt_activity_schema.columns() %}\n{% set appended = dbt_activity_schema.appended %}\n\n(\n    {{ appended() }}.{{- columns.ts }} > {{ primary() }}.{{- columns.ts }}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.889481, "supported_languages": null}, "macro.dbt_activity_schema.first_after": {"name": "first_after", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/first_after.sql", "original_file_path": "macros/relationships/append_only/first_after.sql", "unique_id": "macro.dbt_activity_schema.first_after", "macro_sql": "{% macro first_after() %}\n\n{% do return(namespace(\n    name=\"first_after\",\n    aggregation_func=dbt_activity_schema.min,\n    join_clause=dbt_activity_schema.first_after_join_clause\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.88967, "supported_languages": null}, "macro.dbt_activity_schema.last_before_join_clause": {"name": "last_before_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/last_before.sql", "original_file_path": "macros/relationships/append_only/last_before.sql", "unique_id": "macro.dbt_activity_schema.last_before_join_clause", "macro_sql": "{% macro last_before_join_clause(i) %}\n\n{% set primary = dbt_activity_schema.primary %}\n{% set columns = dbt_activity_schema.columns() %}\n{% set appended = dbt_activity_schema.appended %}\n\n(\n    {{ appended() }}.{{- columns.ts }} <= coalesce({{ primary() }}.{{- columns.ts }}, '1900-01-01'::timestamp)\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.890102, "supported_languages": null}, "macro.dbt_activity_schema.last_before": {"name": "last_before", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/last_before.sql", "original_file_path": "macros/relationships/append_only/last_before.sql", "unique_id": "macro.dbt_activity_schema.last_before", "macro_sql": "{% macro last_before() %}\n\n{% do return(namespace(\n    name=\"last_before\",\n    aggregation_func=dbt_activity_schema.max,\n    join_clause=dbt_activity_schema.last_before_join_clause\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.890363, "supported_languages": null}, "macro.dbt_activity_schema.first_in_between_join_clause": {"name": "first_in_between_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/first_in_between.sql", "original_file_path": "macros/relationships/append_only/first_in_between.sql", "unique_id": "macro.dbt_activity_schema.first_in_between_join_clause", "macro_sql": "{% macro first_in_between_join_clause(i) %}\n\n{% set primary = dbt_activity_schema.primary %}\n{% set columns = dbt_activity_schema.columns() %}\n{% set appended = dbt_activity_schema.appended %}\n\n(\n    {{ appended() }}.{{- columns.ts }} > {{ primary() }}.{{- columns.ts }}\n    and (\n        {{ appended() }}.{{- columns.ts }} <= {{ primary() }}.{{- columns.activity_repeated_at }}\n        or {{ primary() }}.{{- columns.activity_repeated_at }} is null\n    )\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.891058, "supported_languages": null}, "macro.dbt_activity_schema.first_in_between": {"name": "first_in_between", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/first_in_between.sql", "original_file_path": "macros/relationships/append_only/first_in_between.sql", "unique_id": "macro.dbt_activity_schema.first_in_between", "macro_sql": "{% macro first_in_between() %}\n\n{% do return(namespace(\n    name=\"first_in_between\",\n    aggregation_func=dbt_activity_schema.min,\n    join_clause=dbt_activity_schema.first_in_between_join_clause\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.891252, "supported_languages": null}, "macro.dbt_activity_schema.last_in_between_join_clause": {"name": "last_in_between_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/last_in_between.sql", "original_file_path": "macros/relationships/append_only/last_in_between.sql", "unique_id": "macro.dbt_activity_schema.last_in_between_join_clause", "macro_sql": "{% macro last_in_between_join_clause(i) %}\n\n{% set primary = dbt_activity_schema.primary %}\n{% set columns = dbt_activity_schema.columns() %}\n{% set appended = dbt_activity_schema.appended %}\n\n(\n    {{ appended() }}.{{- columns.ts }} > {{ primary() }}.{{- columns.ts }}\n    and (\n        {{ appended() }}.{{- columns.ts }} <= {{ primary() }}.{{- columns.activity_repeated_at }}\n        or {{ primary() }}.{{- columns.activity_repeated_at }} is null\n    )\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8919392, "supported_languages": null}, "macro.dbt_activity_schema.last_in_between": {"name": "last_in_between", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/last_in_between.sql", "original_file_path": "macros/relationships/append_only/last_in_between.sql", "unique_id": "macro.dbt_activity_schema.last_in_between", "macro_sql": "{% macro last_in_between() %}\n\n{% do return(namespace(\n    name=\"last_in_between\",\n    aggregation_func=dbt_activity_schema.max,\n    join_clause=dbt_activity_schema.last_in_between_join_clause\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8921301, "supported_languages": null}, "macro.dbt_activity_schema.aggregate_after_join_clause": {"name": "aggregate_after_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/aggregate_after.sql", "original_file_path": "macros/relationships/append_only/aggregate_after.sql", "unique_id": "macro.dbt_activity_schema.aggregate_after_join_clause", "macro_sql": "{% macro aggregate_after_join_clause(i) %}\n\n{% set primary = dbt_activity_schema.primary %}\n{% set columns = dbt_activity_schema.columns() %}\n{% set appended = dbt_activity_schema.appended %}\n\n(\n    {{ appended() }}.{{- columns.ts }} > {{ primary() }}.{{- columns.ts }}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.892565, "supported_languages": null}, "macro.dbt_activity_schema.aggregate_after": {"name": "aggregate_after", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/aggregate_after.sql", "original_file_path": "macros/relationships/append_only/aggregate_after.sql", "unique_id": "macro.dbt_activity_schema.aggregate_after", "macro_sql": "{% macro aggregate_after(aggregation_func=dbt_activity_schema.count) %}\n\n{% do return(namespace(\n    name=\"aggregate_after\",\n    aggregation_func=aggregation_func,\n    join_clause=dbt_activity_schema.aggregate_after_join_clause\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8927722, "supported_languages": null}, "macro.dbt_activity_schema.aggregate_all_ever_join_clause": {"name": "aggregate_all_ever_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/aggregate_all_ever.sql", "original_file_path": "macros/relationships/append_only/aggregate_all_ever.sql", "unique_id": "macro.dbt_activity_schema.aggregate_all_ever_join_clause", "macro_sql": "{% macro aggregate_all_ever_join_clause(i) %}\n(true)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.892899, "supported_languages": null}, "macro.dbt_activity_schema.aggregate_all_ever": {"name": "aggregate_all_ever", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/aggregate_all_ever.sql", "original_file_path": "macros/relationships/append_only/aggregate_all_ever.sql", "unique_id": "macro.dbt_activity_schema.aggregate_all_ever", "macro_sql": "{% macro aggregate_all_ever(aggregation_func=dbt_activity_schema.count) %}\n\n{% do return(namespace(\n    name=\"aggregate_all_ever\",\n    aggregation_func=aggregation_func,\n    join_clause=dbt_activity_schema.aggregate_all_ever_join_clause\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.8932328, "supported_languages": null}, "macro.dbt_activity_schema.aggregate_before_join_clause": {"name": "aggregate_before_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/aggregate_before.sql", "original_file_path": "macros/relationships/append_only/aggregate_before.sql", "unique_id": "macro.dbt_activity_schema.aggregate_before_join_clause", "macro_sql": "{% macro aggregate_before_join_clause(i) %}\n\n{% set primary = dbt_activity_schema.primary %}\n{% set columns = dbt_activity_schema.columns() %}\n{% set appended = dbt_activity_schema.appended %}\n\n(\n    {{ appended() }}.{{- columns.ts }} < {{ primary() }}.{{- columns.ts }}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.893864, "supported_languages": null}, "macro.dbt_activity_schema.aggregate_before": {"name": "aggregate_before", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/aggregate_before.sql", "original_file_path": "macros/relationships/append_only/aggregate_before.sql", "unique_id": "macro.dbt_activity_schema.aggregate_before", "macro_sql": "{% macro aggregate_before(aggregation_func=dbt_activity_schema.count) %}\n\n{% do return(namespace(\n    name=\"aggregate_before\",\n    aggregation_func=aggregation_func,\n    join_clause=dbt_activity_schema.aggregate_before_join_clause\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.894109, "supported_languages": null}, "macro.dbt_activity_schema.last_after_join_clause": {"name": "last_after_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/last_after.sql", "original_file_path": "macros/relationships/append_only/last_after.sql", "unique_id": "macro.dbt_activity_schema.last_after_join_clause", "macro_sql": "{% macro last_after_join_clause(i) %}\n\n{% set primary = dbt_activity_schema.primary %}\n{% set columns = dbt_activity_schema.columns() %}\n{% set appended = dbt_activity_schema.appended %}\n\n(\n    {{ appended() }}.{{- columns.ts }} > {{ primary() }}.{{- columns.ts }}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.894552, "supported_languages": null}, "macro.dbt_activity_schema.last_after": {"name": "last_after", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/last_after.sql", "original_file_path": "macros/relationships/append_only/last_after.sql", "unique_id": "macro.dbt_activity_schema.last_after", "macro_sql": "{% macro last_after() %}\n\n{% do return(namespace(\n    name=\"last_after\",\n    aggregation_func=dbt_activity_schema.max,\n    join_clause=dbt_activity_schema.last_after_join_clause\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.894746, "supported_languages": null}, "macro.dbt_activity_schema.aggregate_in_between_join_clause": {"name": "aggregate_in_between_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/aggregate_in_between.sql", "original_file_path": "macros/relationships/append_only/aggregate_in_between.sql", "unique_id": "macro.dbt_activity_schema.aggregate_in_between_join_clause", "macro_sql": "{% macro aggregate_in_between_join_clause(i) %}\n\n{% set primary = dbt_activity_schema.primary %}\n{% set columns = dbt_activity_schema.columns() %}\n{% set appended = dbt_activity_schema.appended %}\n\n(\n    {{ appended() }}.{{- columns.ts }} > {{ primary() }}.{{- columns.ts }}\n    and (\n        {{ appended() }}.{{- columns.ts }} <= {{ primary() }}.{{- columns.activity_repeated_at }}\n        or {{ primary() }}.{{- columns.activity_repeated_at }} is null\n    )\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.895457, "supported_languages": null}, "macro.dbt_activity_schema.aggregate_in_between": {"name": "aggregate_in_between", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/aggregate_in_between.sql", "original_file_path": "macros/relationships/append_only/aggregate_in_between.sql", "unique_id": "macro.dbt_activity_schema.aggregate_in_between", "macro_sql": "{% macro aggregate_in_between(aggregation_func=dbt_activity_schema.count) %}\n\n{% do return(namespace(\n    name=\"aggregate_in_between\",\n    aggregation_func=aggregation_func,\n    join_clause=dbt_activity_schema.aggregate_in_between_join_clause\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.895663, "supported_languages": null}, "macro.dbt_activity_schema.first_before_join_clause": {"name": "first_before_join_clause", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/first_before.sql", "original_file_path": "macros/relationships/append_only/first_before.sql", "unique_id": "macro.dbt_activity_schema.first_before_join_clause", "macro_sql": "{% macro first_before_join_clause(i) %}\n\n{% set primary = dbt_activity_schema.primary %}\n{% set columns = dbt_activity_schema.columns() %}\n{% set appended = dbt_activity_schema.appended %}\n\n(\n    {{ appended() }}.{{ columns.activity_occurrence }} = 1\n    and {{ appended() }}.{{- columns.ts }} <= coalesce({{ primary() }}.{{- columns.activity_repeated_at }}, '2100-01-01'::timestamp)\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_activity_schema.columns", "macro.dbt_activity_schema.appended", "macro.dbt_activity_schema.primary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.896182, "supported_languages": null}, "macro.dbt_activity_schema.first_before": {"name": "first_before", "resource_type": "macro", "package_name": "dbt_activity_schema", "path": "macros/relationships/append_only/first_before.sql", "original_file_path": "macros/relationships/append_only/first_before.sql", "unique_id": "macro.dbt_activity_schema.first_before", "macro_sql": "{% macro first_before() %}\n\n{% do return(namespace(\n    name=\"first_before\",\n    aggregation_func=dbt_activity_schema.min,\n    join_clause=dbt_activity_schema.first_before_join_clause\n)) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.896372, "supported_languages": null}, "macro.amplitude_source.get_event_columns": {"name": "get_event_columns", "resource_type": "macro", "package_name": "amplitude_source", "path": "macros/get_event_columns.sql", "original_file_path": "macros/get_event_columns.sql", "unique_id": "macro.amplitude_source.get_event_columns", "macro_sql": "{% macro get_event_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_insert_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ad_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amplitude_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"app\", \"datatype\": dbt.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"client_event_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"client_upload_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"data\", \"datatype\": dbt.type_string()},\n    {\"name\": \"device_brand\", \"datatype\": dbt.type_string()},\n    {\"name\": \"device_carrier\", \"datatype\": dbt.type_string()},\n    {\"name\": \"device_family\", \"datatype\": dbt.type_string()},\n    {\"name\": \"device_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"device_manufacturer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"device_model\", \"datatype\": dbt.type_string()},\n    {\"name\": \"device_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dma\", \"datatype\": dbt.type_string()},\n    {\"name\": \"event_properties\", \"datatype\": dbt.type_string()},\n    {\"name\": \"event_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"event_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"event_type_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"group_properties\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"idfa\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ip_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_attribution_event\", \"datatype\": \"boolean\"},\n    {\"name\": \"language\", \"datatype\": dbt.type_string()},\n    {\"name\": \"library\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location_lat\", \"datatype\": dbt.type_string()},\n    {\"name\": \"location_lng\", \"datatype\": dbt.type_string()},\n    {\"name\": \"os_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"os_version\", \"datatype\": dbt.type_string()},\n    {\"name\": \"paying\", \"datatype\": \"boolean\"},\n    {\"name\": \"platform\", \"datatype\": dbt.type_string()},\n    {\"name\": \"processed_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"project_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"region\", \"datatype\": dbt.type_string()},\n    {\"name\": \"schema\", \"datatype\": dbt.type_int()},\n    {\"name\": \"server_received_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"server_upload_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"session_id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"start_version\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_creation_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"user_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"user_properties\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uuid\", \"datatype\": dbt.type_string()},\n    {\"name\": \"version_name\", \"datatype\": dbt.type_string()}\n] %}\n\n{% if target.type == 'bigquery' %}\n{{ columns.append( {\"name\": \"groups\", \"datatype\": dbt.type_string(), \"alias\": \"group_types\", \"quote\": true} ) }}\n{% else %}\n{{ columns.append( {\"name\": \"groups\", \"alias\": \"group_types\", \"datatype\": dbt.type_string()} ) }}\n{% endif %} ,\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.902006, "supported_languages": null}, "macro.amplitude_source.get_event_type_columns": {"name": "get_event_type_columns", "resource_type": "macro", "package_name": "amplitude_source", "path": "macros/get_event_type_columns.sql", "original_file_path": "macros/get_event_type_columns.sql", "unique_id": "macro.amplitude_source.get_event_type_columns", "macro_sql": "{% macro get_event_type_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"autohidden\", \"datatype\": \"boolean\"},\n    {\"name\": \"deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"display\", \"datatype\": dbt.type_string()},\n    {\"name\": \"flow_hidden\", \"datatype\": \"boolean\"},\n    {\"name\": \"hidden\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_int()},\n    {\"name\": \"in_waitroom\", \"datatype\": \"boolean\"},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"non_active\", \"datatype\": \"boolean\"},\n    {\"name\": \"project_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"timeline_hidden\", \"datatype\": \"boolean\"},\n    {\"name\": \"totals\", \"datatype\": dbt.type_int()},\n    {\"name\": \"totals_delta\", \"datatype\": dbt.type_int()},\n    {\"name\": \"value\", \"datatype\": dbt.type_string()},\n    {\"name\": \"waitroom_approved\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.903595, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9039009, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.904311, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.904722, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9053812, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.905671, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.905944, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.906823, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.907712, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.908426, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9094138, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.909982, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.910284, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9108858, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.911691, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.912083, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.912504, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.913022, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.913443, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9139059, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9142761, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.914837, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9158158, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.916372, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.916957, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.91746, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.917793, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.91818, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.918506, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.919081, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.919882, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.920623, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9214, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9221382, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9229429, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.923379, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.923647, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9267468, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.928115, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.928376, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.928524, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.928919, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.929158, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.929357, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.929684, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.929854, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.930419, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9311721, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9317691, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9323761, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.932584, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.932914, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.933246, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.933731, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.934005, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.934308, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.93488, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.935637, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9364722, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.936925, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.937133, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9376, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9383411, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9391181, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.939477, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.939735, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.940728, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.942037, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.943151, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.944546, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.944809, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9449432, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.947548, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.950654, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9509492, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.951179, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9518342, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.952032, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.952209, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9523818, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.952533, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.952693, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.953027, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.953241, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.953567, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9540548, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9543629, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.954678, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.956057, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9565482, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.957381, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.957886, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9589849, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.960316, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9611971, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.961922, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.962313, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.962944, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.963799, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9643362, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.96457, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.964965, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.965672, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.966094, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.96671, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.967189, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.967329, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.967458, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.967585, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9680269, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.968836, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.969711, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.969955, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9705222, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.971297, "supported_languages": null}, "macro.dbt_ops.get_node_depends_on": {"name": "get_node_depends_on", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/graph/get_dependend_nodes.sql", "original_file_path": "macros/graph/get_dependend_nodes.sql", "unique_id": "macro.dbt_ops.get_node_depends_on", "macro_sql": "{% macro get_node_depends_on(unique_id) %}\n  {% set focused_node = dbt_ops.get_node_by_unique_id(unique_id) %}\n\n  {% if not focused_node %}\n    {{ exceptions.raise_compiler_error(\"Node not found by unique_id: \" + unique_id) }}\n  {% endif %}\n\n  {% set returned_value = {focused_node.unique_id: {\"depends_on\": {}}} %}\n\n  {% if focused_node.depends_on and focused_node.depends_on.nodes %}\n    {% for dependent_unique_id in focused_node.depends_on.nodes %}\n      {% set dependent_node = dbt_ops.get_node_depends_on(dependent_unique_id) %}\n\n      {% do returned_value[unique_id][\"depends_on\"].update({dependent_unique_id: dependent_node}) %}\n    {% endfor %}\n  {% endif %}\n\n  {{ return(returned_value) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ops.get_node_by_unique_id", "macro.dbt_ops.get_node_depends_on"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9727092, "supported_languages": null}, "macro.dbt_ops.get_node_by_unique_id": {"name": "get_node_by_unique_id", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/graph/get_node_by_unique_id.sql", "original_file_path": "macros/graph/get_node_by_unique_id.sql", "unique_id": "macro.dbt_ops.get_node_by_unique_id", "macro_sql": "{% macro get_node_by_unique_id(unique_id) %}\n  {% if not unique_id %}\n    {{ exceptions.raise_compiler_error(\"unique_id is required.\") }}\n  {% endif %}\n\n  {% for node in graph.nodes.values() %}\n    {% if node.unique_id == unique_id %}\n      {% do return(node) %}\n    {% endif %}\n  {% endfor %}\n\n  {% for node in graph.sources.values() %}\n    {% if node.unique_id == unique_id %}\n      {% do return(node) %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(none) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9735801, "supported_languages": null}, "macro.dbt_ops.get_nodes": {"name": "get_nodes", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/graph/get_nodes.sql", "original_file_path": "macros/graph/get_nodes.sql", "unique_id": "macro.dbt_ops.get_nodes", "macro_sql": "{% macro get_nodes(resource_type) %}\n  {# NOTE if specifications of macros are changed in the future, we will support multiple versions. #}\n\n  {% do return(dbt_data_privacy.get_nodes_v1(resource_type)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ops.get_nodes_v1"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9739141, "supported_languages": null}, "macro.dbt_ops.get_nodes_v1": {"name": "get_nodes_v1", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/graph/get_nodes.sql", "original_file_path": "macros/graph/get_nodes.sql", "unique_id": "macro.dbt_ops.get_nodes_v1", "macro_sql": "{% macro get_nodes_v1(resource_type) %}\n  {% if resource_type == \"source\" %}\n    {% set nodes = graph.sources.values() %}\n    {% do return(nodes) %}\n  {% else %}\n    {% set nodes = graph.nodes.values()\n        | selectattr(\"resource_type\", \"equalto\", resource_type) %}\n    {% do return(nodes) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9743092, "supported_languages": null}, "macro.dbt_ops.get_node_dependency_from_adjacency_list": {"name": "get_node_dependency_from_adjacency_list", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/graph/get_node_dependency_from_adjacency_list.sql", "original_file_path": "macros/graph/get_node_dependency_from_adjacency_list.sql", "unique_id": "macro.dbt_ops.get_node_dependency_from_adjacency_list", "macro_sql": "{% macro get_node_dependency_from_adjacency_list(adjacency_list, unique_id) %}\n  {% set node_info = dbt_ops.get_node_by_unique_id(unique_id) %}\n  {% set dependency_map = {unique_id: {\"node\": node_info, \"depends_on\": {}}} %}\n\n  {% for dependent_unique_id in adjacency_list[unique_id] %}\n    {% set child_dependency_map = dbt_ops.get_node_dependency_from_adjacency_list(adjacency_list, dependent_unique_id) %}\n    {% do dependency_map[unique_id][\"depends_on\"].update(child_dependency_map) %}\n  {% endfor %}\n\n  {{ return(dependency_map) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ops.get_node_by_unique_id", "macro.dbt_ops.get_node_dependency_from_adjacency_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.974993, "supported_languages": null}, "macro.dbt_ops.build_dependenncy_adjacency_list": {"name": "build_dependenncy_adjacency_list", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/graph/build_dependenncy_adjacency_list.sql", "original_file_path": "macros/graph/build_dependenncy_adjacency_list.sql", "unique_id": "macro.dbt_ops.build_dependenncy_adjacency_list", "macro_sql": "{% macro build_dependenncy_adjacency_list() %}\n  {#\n    Build the adjacency list from the graph of dependency.\n  #}\n\n  {% set adjacency_list = {} %}\n\n  {% for node in graph.nodes.values() %}\n    {% set source_unique_id = node.unique_id %}\n\n    {% if node.depends_on and node.depends_on.nodes %}\n      {% do adjacency_list.update({source_unique_id: node.depends_on.nodes})%}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(adjacency_list) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.975595, "supported_languages": null}, "macro.dbt_ops.print_node_dependency": {"name": "print_node_dependency", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/graph/print_node_dependency.sql", "original_file_path": "macros/graph/print_node_dependency.sql", "unique_id": "macro.dbt_ops.print_node_dependency", "macro_sql": "{% macro print_node_dependency(\n    dependency_node_info,\n    depth=0,\n    parent_item=none,\n    indent_spaces=2,\n    resource_types=['model', 'semantic_model', 'source', 'seed', 'snapshot', 'metric', 'test', 'exposure', 'analysis']) %}\n  {#\n    print node dependency in the following format:\n\n    ```\n    \u2514\u2500\u2500 1: model.xxxx.xxx (view)\n       \u251c\u2500\u2500 1.1: model.yyy.yyy (incremental)\n       \u2502   \u2514\u2500\u2500 1.1.1: model.yyy.xxx (model)\n       \u251c\u2500\u2500 1.2: model.yyy.yyy (view)\n       \u2514\u2500\u2500 1.3: model.yyy.yyy (view)\n           \u2514\u2500\u2500 1.3.1: model.yyy.xxx (view)\n               \u2514\u2500\u2500 1.3.1.1: model.yyy.xxx (table)\n    ```\n  #}\n\n  {% for unique_id in dependency_node_info.keys() %}\n    {% set node = dependency_node_info[unique_id][\"node\"] %}\n    {% set depends_on = dependency_node_info[unique_id][\"depends_on\"] %}\n\n    {% set current_list_item = none %}\n    {% if parent_item %}\n      {% set current_list_item = \"%s.%s\"|format(parent_item,loop.index) %}\n    {% else %}\n      {% set current_list_item = \"%s\"|format(loop.index) %}\n    {% endif %}\n\n    {% if node.resource_type in resource_types %}\n      {% if node.config and node.config.materialized %}\n       {{ print(\"- %s: %s (%s:%s)\"\n            | format( current_list_item, node.unique_id, node.resource_type, node.config.materialized)\n            | indent(depth * indent_spaces, true) ) }}\n      {% else %}\n       {{ print(\"- %s: %s (%s)\"\n            | format( current_list_item, node.unique_id, node.resource_type)\n            | indent(depth * indent_spaces, true) ) }}\n      {% endif %}\n    {% endif %}\n\n    {{ dbt_ops.print_node_dependency(depends_on, depth + 1, current_list_item, indent_spaces, resource_types=resource_types) }}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ops.print_node_dependency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.97744, "supported_languages": null}, "macro.dbt_ops.transpose_adjacency_list": {"name": "transpose_adjacency_list", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/graph/transpose_adjacency_list.sql", "original_file_path": "macros/graph/transpose_adjacency_list.sql", "unique_id": "macro.dbt_ops.transpose_adjacency_list", "macro_sql": "{% macro transpose_adjacency_list(adjacency_list) %}\n  {% set transposed_adjacency_list = {} %}\n\n  {% for source_unique_id, destination_unique_ids in adjacency_list.items() %}\n    {% for destination_unique_id in destination_unique_ids %}\n      {% if destination_unique_id not in transposed_adjacency_list %}\n        {% do transposed_adjacency_list.update({destination_unique_id: []}) %}\n      {% endif %}\n\n      {% do transposed_adjacency_list[destination_unique_id].append(source_unique_id) %}\n    {% endfor %}\n  {% endfor %}\n\n  {{ return(transposed_adjacency_list) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9782379, "supported_languages": null}, "macro.dbt_ops.find_downstream_nodes": {"name": "find_downstream_nodes", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/public/find_downstream_nodes.sql", "original_file_path": "macros/public/find_downstream_nodes.sql", "unique_id": "macro.dbt_ops.find_downstream_nodes", "macro_sql": "{% macro find_downstream_nodes(\n    unique_id,\n    resource_types=['model', 'semantic_model', 'source', 'seed', 'snapshot', 'metric', 'test', 'exposure', 'analysis']) %}\n  {#\n    This macro finds all downstream nodes of a given node specified by its unique_id.\n    It returns a list of nodes that are dependent on the given node, filtered by the specified resource types.\n  #}\n\n  {% if not unique_id %}\n    {{ exceptions.raise_compiler_error(\"unique_id is required.\") }}\n  {% endif %}\n\n  {% set adjacency_list = dbt_ops.build_dependenncy_adjacency_list() %}\n  {% set transposed_adjacency_list = dbt_ops.transpose_adjacency_list(adjacency_list) %}\n  {% set dependency_node_info = dbt_ops.get_node_dependency_from_adjacency_list(transposed_adjacency_list, unique_id) %}\n\n  {{ print_node_dependency(dependency_node_info, resource_types=resource_types) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ops.build_dependenncy_adjacency_list", "macro.dbt_ops.transpose_adjacency_list", "macro.dbt_ops.get_node_dependency_from_adjacency_list", "macro.dbt_ops.print_node_dependency"]}, "description": "This macro finds all downstream nodes of a given node specified by its unique_id.\nIt returns a list of nodes that are dependent on the given node, filtered by the specified resource types.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ops://macros/public/find_downstream_nodes.yml", "arguments": [{"name": "unique_id", "type": "string", "description": "The unique identifier of the node to find downstream nodes for."}, {"name": "resource_types", "type": "A list of string", "description": "A list of resource types to filter the downstream nodes.\nDefaults to `[\"model\", \"semantic_model\", \"source\", \"seed\", \"snapshot\", \"metric\", \"test\", \"exposure\", \"analysis\"]`."}], "created_at": 1714072383.956973, "supported_languages": null}, "macro.dbt_ops.find_unreferenced_sources": {"name": "find_unreferenced_sources", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/public/find_unreferenced_sources.sql", "original_file_path": "macros/public/find_unreferenced_sources.sql", "unique_id": "macro.dbt_ops.find_unreferenced_sources", "macro_sql": "{% macro find_unreferenced_sources(format='text', reference_resource_types = ['model', 'snapshot', 'exposure']) %}\n  {#\n    The macro enables us to get unreferenced sources so that we can maintain dbt projects.\n    It returns a list of sources that are not referenced by any models, snapshots, or exposures.\n  #}\n  {% set unreferenced_sources = __find_unreferenced_sources(reference_resource_types) %}\n\n  {% if format == 'text' %}\n    {% for unique_id in unreferenced_sources %}\n      {{ print(unique_id) }}\n    {% endfor %}\n  {% elif format == 'json' %}\n    {{ print(tojson(unreferenced_sources)) }}\n  {% elif format == 'yaml' %}\n    {{ print(toyaml(unreferenced_sources)) }}\n  {% else %}\n    {{ exceptions.raise_compiler_error(\"Invalid `format`. Got: \" ~ format) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ops.__find_unreferenced_sources"]}, "description": "This macro returns a list of sources that are not referenced by any models.\nThis is useful for identifying sources that are no longer needed.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ops://macros/public/find_unreferenced_sources.yml", "arguments": [{"name": "format", "type": "string", "description": "The format of the output. Valid values must be one of `text`, `json` and `yaml`. Defaults to `text`."}, {"name": "reference_resource_types", "type": "A list of string", "description": "A list of resource types to consider as references. Defaults to `[\"model\", \"snapshot\", \"exposure\"]`."}], "created_at": 1714072383.957182, "supported_languages": null}, "macro.dbt_ops.__find_unreferenced_sources": {"name": "__find_unreferenced_sources", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/public/find_unreferenced_sources.sql", "original_file_path": "macros/public/find_unreferenced_sources.sql", "unique_id": "macro.dbt_ops.__find_unreferenced_sources", "macro_sql": "{% macro __find_unreferenced_sources(reference_resource_types = ['model', 'snapshot', 'exposure']) %}\n  {# Get all sources #}\n  {% set all_sources = {} %}\n  {% for source in graph.sources.values() %}\n    {% do all_sources.update({source.unique_id: false}) %}\n  {% endfor %}\n\n  {# Get all dbt models, snapshots, and exposures #}\n  {% set referenced_nodes = [] %}\n  {% for node in graph.nodes.values() %}\n    {# Check if the current node is of a type that should be referenced #}\n    {% if node.resource_type in reference_resource_types %}\n      {# Get nodes that the current node depends on #}\n      {% set dependent_nodes = node.depends_on.nodes %}\n\n      {# If there are dependent nodes, iterate over them #}\n      {% if dependent_nodes is not none and dependent_nodes|length > 0 %}\n        {% for dependent_node in dependent_nodes %}\n          {# If the dependent node is a source, mark it as referenced #}\n          {% if dependent_node in all_sources %}\n            {% do all_sources.update({dependent_node: true}) %}\n          {% endif %}\n        {% endfor %}\n      {% endif %}\n\n    {% endif %}\n  {% endfor %}\n\n  {# Select unreferenced sources #}\n  {% set unreferenced_sources = []%}\n  {% for unique_id, is_referenced in all_sources.items() %}\n    {% if is_referenced is false %}\n      {% do unreferenced_sources.append(unique_id) %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(unreferenced_sources) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.981674, "supported_languages": null}, "macro.dbt_ops.find_upstream_nodes": {"name": "find_upstream_nodes", "resource_type": "macro", "package_name": "dbt_ops", "path": "macros/public/find_upstream_nodes.sql", "original_file_path": "macros/public/find_upstream_nodes.sql", "unique_id": "macro.dbt_ops.find_upstream_nodes", "macro_sql": "{% macro find_upstream_nodes(\n    unique_id,\n    resource_types=['model', 'semantic_model', 'source', 'seed', 'snapshot', 'metric', 'test', 'exposure', 'analysis']) %}\n  {% if not unique_id %}\n    {{ exceptions.raise_compiler_error(\"unique_id is required.\") }}\n  {% endif %}\n\n  {% set adjacency_list = dbt_ops.build_dependenncy_adjacency_list() %}\n  {% set dependency_node_info = dbt_ops.get_node_dependency_from_adjacency_list(adjacency_list, unique_id) %}\n\n  {{ print_node_dependency(dependency_node_info, resource_types=resource_types) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_ops.build_dependenncy_adjacency_list", "macro.dbt_ops.get_node_dependency_from_adjacency_list", "macro.dbt_ops.print_node_dependency"]}, "description": "This macro finds all upstream nodes of a given node specified by its unique_id.\nIt returns a list of nodes that are dependencies for the given node, filtered by the specified resource types.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_ops://macros/public/find_upstream_nodes.yml", "arguments": [{"name": "unique_id", "type": "string", "description": "The unique identifier of the node to find upstream nodes for."}, {"name": "resource_types", "type": "A list of string", "description": "A list of resource types to filter the upstream nodes.\nDefaults to `[\"model\", \"semantic_model\", \"source\", \"seed\", \"snapshot\", \"metric\", \"test\", \"exposure\", \"analysis\"]`."}], "created_at": 1714072383.957314, "supported_languages": null}, "macro.audit_helper.compare_row_counts": {"name": "compare_row_counts", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_row_counts.sql", "original_file_path": "macros/compare_row_counts.sql", "unique_id": "macro.audit_helper.compare_row_counts", "macro_sql": "{% macro compare_row_counts(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_row_counts', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_row_counts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.982683, "supported_languages": null}, "macro.audit_helper.default__compare_row_counts": {"name": "default__compare_row_counts", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_row_counts.sql", "original_file_path": "macros/compare_row_counts.sql", "unique_id": "macro.audit_helper.default__compare_row_counts", "macro_sql": "{% macro default__compare_row_counts(a_relation, b_relation) %}\n\n        select\n            '{{ a_relation }}' as relation_name,\n            count(*) as total_records\n        from {{ a_relation }}\n\n        union all\n\n        select\n            '{{ b_relation }}' as relation_name,\n            count(*) as total_records\n        from {{ b_relation }}\n  \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9828548, "supported_languages": null}, "macro.audit_helper.compare_relations": {"name": "compare_relations", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relations.sql", "original_file_path": "macros/compare_relations.sql", "unique_id": "macro.audit_helper.compare_relations", "macro_sql": "{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true, limit=None) %}\n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n{% set column_selection %}\n\n  {% for column_name in column_names %} \n    {{ adapter.quote(column_name) }} \n    {% if not loop.last %}\n      , \n    {% endif %} \n  {% endfor %}\n\n{% endset %}\n\n{% set a_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize, limit) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.983746, "supported_languages": null}, "macro.audit_helper.compare_all_columns": {"name": "compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.compare_all_columns", "macro_sql": "{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_all_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.984928, "supported_languages": null}, "macro.audit_helper.default__compare_all_columns": {"name": "default__compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.default__compare_all_columns", "macro_sql": "{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\n\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n  {# We explictly select the primary_key and rename to support any sql as the primary_key -\n  a column or concatenated columns. this assumes that a_relation and b_relation do not already \n  have a field named dbt_audit_helper_pk #}\n\n  {% set a_query %}      \n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ a_relation }}\n  {% endset %}\n\n  {% set b_query %}\n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ b_relation }}\n  {% endset %}\n\n  {% for column_name in column_names %}\n\n    {% set audit_query = audit_helper.compare_column_values_verbose(\n      a_query=a_query,\n      b_query=b_query,\n      primary_key=\"dbt_audit_helper_pk\",\n      column_to_compare=column_name\n    ) %}\n\n    /*  Create a query combining results from all columns so that the user, or the \n    test suite, can examine all at once.\n    */\n    \n    {% if loop.first %}\n\n    /*  Create a CTE that wraps all the unioned subqueries that are created\n        in this for loop\n    */\n      with main as ( \n\n    {% endif %}\n\n    /*  There will be one audit_query subquery for each column\n    */\n    ( {{ audit_query }} )\n\n    {% if not loop.last %}\n\n      union all\n\n    {% else %}\n\n    ), \n    \n      {%- if summarize %}\n\n        final as (\n          select\n            upper(column_name) as column_name,\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\n          from main\n          group by 1\n          order by column_name\n        )\n\n      {%- else %}\n\n        final as (\n          select\n            primary_key,           \n            upper(column_name) as column_name,\n            perfect_match,\n            null_in_a,\n            null_in_b,\n            missing_from_a,\n            missing_from_b,\n            conflicting_values\n          from main    \n          order by primary_key\n        )\n\n      {%- endif %}\n\n      select * from final\n    \n    {% endif %}\n\n  {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.985798, "supported_languages": null}, "macro.audit_helper.compare_which_columns_differ": {"name": "compare_which_columns_differ", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_which_columns_differ.sql", "original_file_path": "macros/compare_which_columns_differ.sql", "unique_id": "macro.audit_helper.compare_which_columns_differ", "macro_sql": "{% macro compare_which_columns_differ(a_relation, b_relation, primary_key, exclude_columns=[]) %}\n    {{ return(adapter.dispatch('compare_which_columns_differ', 'audit_helper')(a_relation, b_relation, primary_key, exclude_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_which_columns_differ"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.986635, "supported_languages": null}, "macro.audit_helper.default__compare_which_columns_differ": {"name": "default__compare_which_columns_differ", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_which_columns_differ.sql", "original_file_path": "macros/compare_which_columns_differ.sql", "unique_id": "macro.audit_helper.default__compare_which_columns_differ", "macro_sql": "{% macro default__compare_which_columns_differ(a_relation, b_relation, primary_key, exclude_columns=[]) %}  \n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\nwith bool_or as (\n\n    select \n        true as anchor\n        {% for column in column_names %}\n            {% set column_name = adapter.quote(column) %}\n            {% set compare_statement %}\n                ((a.{{ column_name }} != b.{{ column_name }})\n                or (a.{{ column_name }} is null and b.{{ column_name }} is not null)\n                or (a.{{ column_name }} is not null and b.{{ column_name }} is null))\n            {% endset %}\n        \n        , {{ dbt.bool_or(compare_statement) }} as {{ column | lower }}_has_difference\n    \n        {% endfor %}\n    from {{ a_relation }} as a\n    inner join {{ b_relation }} as b\n        on a.{{ primary_key }} = b.{{ primary_key }}\n\n)\n\n{% for column in column_names %}\n    \n    select \n        '{{ column }}' as column_name, \n        {{ column | lower }}_has_difference as has_difference\n    \n    from bool_or\n\n    {% if not loop.last %}\n        \n    union all \n\n    {% endif %}\n\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.dbt.bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.987398, "supported_languages": null}, "macro.audit_helper.compare_column_values_verbose": {"name": "compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.compare_column_values_verbose", "macro_sql": "{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.989708, "supported_languages": null}, "macro.audit_helper.default__compare_column_values_verbose": {"name": "default__compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.default__compare_column_values_verbose", "macro_sql": "{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n)\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\n\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\n            '{{ column_to_compare }}'::text as column_name,\n        {% else %}\n            '{{ column_to_compare }}' as column_name,\n        {% endif %}\n\n        coalesce(\n            a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} and \n                a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null,\n            (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\n            false\n        ) as perfect_match,\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\n        a_query.{{ primary_key }} is null as missing_from_a,\n        b_query.{{ primary_key }} is null as missing_from_b,\n        coalesce(\n            a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null and \n            -- ensure that neither value is missing before considering it a conflict\n            (\n                a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} or -- two not-null values that do not match\n                (a_query.{{ column_to_compare }} is not null and b_query.{{ column_to_compare }} is null) or -- null in b and not null in a\n                (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is not null) -- null in a and not null in b\n            ), \n            false\n        ) as conflicting_values\n        -- considered a conflict if the values do not match AND at least one of the values is not null.\n\n    from a_query\n\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\n\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9904482, "supported_languages": null}, "macro.audit_helper.compare_column_values": {"name": "compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.compare_column_values", "macro_sql": "{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis=True, a_relation_name='a', b_relation_name='b') -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.993228, "supported_languages": null}, "macro.audit_helper.default__compare_column_values": {"name": "default__compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.default__compare_column_values", "macro_sql": "{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare, emojis, a_relation_name, b_relation_name) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '{% if emojis %}\u2705: {% endif %}perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '{% if emojis %}\u2705: {% endif %}both are null'\n            when a_query.{{ primary_key }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}missing from {{ a_relation_name }}'\n            when b_query.{{ primary_key }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}missing from {{ b_relation_name }}'\n            when a_query.{{ column_to_compare }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}value is null in {{ a_relation_name }} only'\n            when b_query.{{ column_to_compare }} is null then '{% if emojis %}\ud83e\udd37: {% endif %}value is null in {{ b_relation_name }} only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '{% if emojis %}\u274c: {% endif %}\u200dvalues do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        '{{ column_to_compare }}' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.994267, "supported_languages": null}, "macro.audit_helper.compare_queries": {"name": "compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.compare_queries", "macro_sql": "{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize, limit)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.995023, "supported_languages": null}, "macro.audit_helper.default__compare_queries": {"name": "default__compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.default__compare_queries", "macro_sql": "{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true, limit=None) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n\n    select\n\n        in_a,\n        in_b,\n        count(*) as count\n\n    from all_records\n    group by 1, 2\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n    order by in_a desc, in_b desc\n\n)\n\n{%- else %}\n\nfinal as (\n    \n    select * from all_records\n    where not (in_a and in_b)\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\n)\n\n{%- endif %}\n\nselect * from final\n{%- if limit and not summarize %}\nlimit {{ limit }}\n{%- endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.995542, "supported_languages": null}, "macro.audit_helper.compare_relation_columns": {"name": "compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.compare_relation_columns", "macro_sql": "{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_relation_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.996543, "supported_languages": null}, "macro.audit_helper.default__compare_relation_columns": {"name": "default__compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__compare_relation_columns", "macro_sql": "{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match,\n    a_cols.data_type is not null and b_cols.data_type is null as in_a_only,\n    b_cols.data_type is not null and a_cols.data_type is null as in_b_only,\n    b_cols.data_type is not null and a_cols.data_type is not null as in_both\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.996772, "supported_languages": null}, "macro.audit_helper.get_columns_in_relation_sql": {"name": "get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.get_columns_in_relation_sql", "macro_sql": "{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.bigquery__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.99692, "supported_languages": null}, "macro.audit_helper.default__get_columns_in_relation_sql": {"name": "default__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__get_columns_in_relation_sql", "macro_sql": "{% macro default__get_columns_in_relation_sql(relation) %}\n    \n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    select \n      {{ dbt.string_literal(column.name) }} as column_name, \n      {{ loop.index }} as ordinal_position,\n      {{ dbt.string_literal(column.data_type) }} as data_type\n\n  {% if not loop.last -%}\n    union all \n  {%- endif %}\n  {% endfor %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9974048, "supported_languages": null}, "macro.audit_helper.redshift__get_columns_in_relation_sql": {"name": "redshift__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.redshift__get_columns_in_relation_sql", "macro_sql": "{% macro redshift__get_columns_in_relation_sql(relation) %}\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.9975529, "supported_languages": null}, "macro.audit_helper.snowflake__get_columns_in_relation_sql": {"name": "snowflake__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.snowflake__get_columns_in_relation_sql", "macro_sql": "{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.997856, "supported_languages": null}, "macro.audit_helper.postgres__get_columns_in_relation_sql": {"name": "postgres__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.postgres__get_columns_in_relation_sql", "macro_sql": "{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.998096, "supported_languages": null}, "macro.audit_helper.bigquery__get_columns_in_relation_sql": {"name": "bigquery__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.bigquery__get_columns_in_relation_sql", "macro_sql": "{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.998254, "supported_languages": null}, "macro.snowplow_normalize.allow_refresh": {"name": "allow_refresh", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/allow_refresh.sql", "original_file_path": "macros/allow_refresh.sql", "unique_id": "macro.snowplow_normalize.allow_refresh", "macro_sql": "{% macro allow_refresh() %}\n  {{ return(adapter.dispatch('allow_refresh', 'snowplow_normalize')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_normalize.default__allow_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.998653, "supported_languages": null}, "macro.snowplow_normalize.default__allow_refresh": {"name": "default__allow_refresh", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/allow_refresh.sql", "original_file_path": "macros/allow_refresh.sql", "unique_id": "macro.snowplow_normalize.default__allow_refresh", "macro_sql": "{% macro default__allow_refresh() %}\n\n  {% if flags.FULL_REFRESH == True %}\n    {% set allow_refresh = snowplow_utils.get_value_by_target(\n                                      dev_value=none,\n                                      default_value=var('snowplow__allow_refresh'),\n                                      dev_target_name=var('snowplow__dev_target_name')\n                                      ) %}\n  {% else %}\n    {% set allow_refresh = none %}\n  {% endif %}\n\n  {{ return(allow_refresh) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.get_value_by_target"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.999027, "supported_languages": null}, "macro.snowplow_normalize.snakeify_case": {"name": "snakeify_case", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/snakeify_case.sql", "original_file_path": "macros/snakeify_case.sql", "unique_id": "macro.snowplow_normalize.snakeify_case", "macro_sql": "{% macro snakeify_case(text) %}\n    {{ return(adapter.dispatch('snakeify_case', 'snowplow_normalize')(text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_normalize.default__snakeify_case"]}, "description": "Take a string in camel/pascal case and make it snakecase", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_normalize://macros/schema.yml", "arguments": [{"name": "text", "type": "string", "description": "the text to convert to snakecase"}], "created_at": 1714072383.993215, "supported_languages": null}, "macro.snowplow_normalize.default__snakeify_case": {"name": "default__snakeify_case", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/snakeify_case.sql", "original_file_path": "macros/snakeify_case.sql", "unique_id": "macro.snowplow_normalize.default__snakeify_case", "macro_sql": "{% macro default__snakeify_case(text) %}\n    {%- set re = modules.re -%}\n    {%- set camel_string1 = '([A-Z]+)([A-Z][a-z])'-%} {# Capitals followed by a lowercase  #}\n    {%- set camel_string2 = '([a-z\\d])([A-Z])'-%} {# lowercase followed by a capital #}\n    {%- set replace_string = '\\\\1_\\\\2' -%}\n    {%- set output_text = re.sub(camel_string2, replace_string, re.sub(camel_string1, replace_string, text)).replace('-', '_').lower() -%}\n    {{- output_text -}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072380.999806, "supported_languages": null}, "macro.snowplow_normalize.users_table": {"name": "users_table", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/users_table.sql", "original_file_path": "macros/users_table.sql", "unique_id": "macro.snowplow_normalize.users_table", "macro_sql": "{% macro users_table(user_id_field = 'user_id', user_id_sde = '', user_id_context = '', user_cols = [], user_keys = [], user_types = [], user_id_alias = 'user_id', flat_cols = [], remove_new_event_check = false) %}\n    {{ return(adapter.dispatch('users_table', 'snowplow_normalize')(user_id_field, user_id_sde, user_id_context, user_cols, user_keys, user_types, user_id_alias, flat_cols, remove_new_event_check)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_normalize.bigquery__users_table"]}, "description": "A macro to produce a users table from the `base_events_this_run` table, using the latest context values as defined by the collector_tstamp.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_normalize://macros/schema.yml", "arguments": [{"name": "user_id_field", "type": "string", "description": "The name of the field to use as the unique user_id"}, {"name": "user_id_sde", "type": "string", "description": "The name of the SDE column that contains the user_id_field"}, {"name": "user_id_context", "type": "string", "description": "The name of the context column that contains the user_id_field, not used if user_id_sde is also provided"}, {"name": "user_cols", "type": "array", "description": "List of (user related) context columns from the atomic.events table to include"}, {"name": "user_keys", "type": "array of arrays", "description": "List of lists of keys/column names within the respective user context column to include"}, {"name": "user_types", "type": "array of arrays", "description": "List of list of types of the values of the keys within the respective user context column (only used in Snowflake)"}, {"name": "user_id_alias", "type": "string", "description": "The alias to apply to the user_id_field to help avoid clashes. Must match the unique key in the config"}, {"name": "flat_cols", "type": "array", "description": "List of (user related) flat columns from the atomic.events table to include"}, {"name": "remove_new_event_check", "type": "boolean", "description": "A flag to disable the `with_new_events` part of the macro, to allow for integration tests to run"}], "created_at": 1714072383.99315, "supported_languages": null}, "macro.snowplow_normalize.snowflake__users_table": {"name": "snowflake__users_table", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/users_table.sql", "original_file_path": "macros/users_table.sql", "unique_id": "macro.snowplow_normalize.snowflake__users_table", "macro_sql": "{% macro snowflake__users_table(user_id_field = 'user_id', user_id_sde = '', user_id_context = '', user_cols = [], user_keys = [], user_types = [], user_id_alias = 'user_id', flat_cols = [], remove_new_event_check = false) %}\n{# Remove down to major version for Snowflake columns, drop 2 last _X values #}\n{%- set user_cols_clean = [] -%}\n{%- for ind in range(user_cols|length) -%}\n    {% do user_cols_clean.append('_'.join(user_cols[ind].split('_')[:-2])) -%}\n{%- endfor -%}\n\n{# Raise a warining if both sde and context are provided as we only use one #}\n{%- if user_id_sde != '' and user_id_context != '' -%}\n{% do exceptions.warn(\"Snowplow: Both a user_id sde column and context column provided, only the sde column will be used.\") %}\n{%- endif -%}\n{%- set snake_user_id =  snowplow_normalize.snakeify_case(user_id_alias) -%}\n\nwith defined_user_id as (\nselect\n    {% if user_id_sde == '' and user_id_context == '' %}\n        {{snowplow_normalize.snakeify_case(user_id_field)}} as {{ snake_user_id }} {# Snakeify case of standard column even in snowflake #}\n    {% elif user_id_sde != '' %}\n        {{ '_'.join(user_id_sde.split('_')[:-2]) }}:{{user_id_field}}::string as {{ snake_user_id }}\n    {% elif user_id_context != '' %}\n        {{ '_'.join(user_id_context.split('_')[:-2]) }}[0]:{{user_id_field}}::string as {{ snake_user_id }}\n    {%- endif %}\n    , collector_tstamp as latest_collector_tstamp\n    -- Flat columns from event table\n    {% if flat_cols|length > 0 %}\n        {%- for col in flat_cols -%}\n            , {{ col }}\n        {% endfor -%}\n    {%- endif -%}\n    -- user column(s) from the event table\n    {% if user_cols_clean|length > 0 %}\n        {%- for col, col_ind in zip(user_cols_clean, range(user_cols_clean|length)) -%} {# Loop over each context column provided #}\n            {%- for key, type in zip(user_keys[col_ind], user_types[col_ind]) -%} {# Loop over the keys in each column #}\n                , {{ col }}[0]:{{ key }}::{{ type }} as {{ snowplow_normalize.snakeify_case(key) }}\n            {% endfor -%}\n        {%- endfor -%}\n    {%- endif %}\nfrom\n    {{ ref('snowplow_normalize_base_events_this_run') }}\nwhere\n    1 = 1\n    {% if not remove_new_event_check %}\n        and {{ snowplow_utils.is_run_with_new_events(\"snowplow_normalize\") }}\n    {%- endif -%}\n)\n\n{# Ensure only latest record is upserted into the table #}\nselect\n    *\nfrom\n    defined_user_id\nwhere\n    {{ snake_user_id }} is not null\nqualify\n    row_number() over (partition by {{ snake_user_id }} order by latest_collector_tstamp desc) = 1\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_normalize.snakeify_case", "macro.snowplow_utils.is_run_with_new_events"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.004419, "supported_languages": null}, "macro.snowplow_normalize.bigquery__users_table": {"name": "bigquery__users_table", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/users_table.sql", "original_file_path": "macros/users_table.sql", "unique_id": "macro.snowplow_normalize.bigquery__users_table", "macro_sql": "{% macro bigquery__users_table(user_id_field = 'user_id', user_id_sde = '', user_id_context = '', user_cols = [], user_keys = [], user_types = [], user_id_alias = 'user_id', flat_cols = [], remove_new_event_check = false) %}\n{# Remove down to major version for bigquery combine columns macro, drop 2 last _X values #}\n{%- set user_cols_clean = [] -%}\n{%- for ind in range(user_cols|length) -%}\n    {% do user_cols_clean.append('_'.join(user_cols[ind].split('_')[:-2])) -%}\n{%- endfor -%}\n\n{# Replace keys with snake_case where needed #}\n{%- set user_keys_clean = [] -%}\n{%- for ind1 in range(user_keys|length) -%}\n    {%- set user_key_clean = [] -%}\n    {%- for ind2 in range(user_keys[ind1]|length) -%}\n        {% do user_key_clean.append(snowplow_normalize.snakeify_case(user_keys[ind1][ind2])) -%}\n    {%- endfor -%}\n    {% do user_keys_clean.append(user_key_clean) -%}\n{%- endfor -%}\n{% set user_id_field = snowplow_normalize.snakeify_case(user_id_field) %}\n\n{# Raise a warining if both sde and context are provided as we only use one #}\n{%- if user_id_sde != '' and user_id_context != '' -%}\n{% do exceptions.warn(\"Snowplow: Both a user_id sde column and context column provided, only the sde column will be used.\") %}\n{%- endif -%}\n\n{%- set snake_user_id =  snowplow_normalize.snakeify_case(user_id_alias) -%}\n\n\nwith defined_user_id as (\n    select\n        {% if user_id_sde == '' and user_id_context == ''%}\n            {{snowplow_normalize.snakeify_case(user_id_field)}} as {{ snake_user_id }}\n        {% elif user_id_sde != '' %}\n        {# Coalesce the sde column for the custom user_id field  #}\n            {%- set user_id_sde_coal = snowplow_utils.combine_column_versions(\n                                        relation=ref('snowplow_normalize_base_events_this_run'),\n                                        column_prefix= user_id_sde.lower(),\n                                        include_field_alias = False,\n                                        required_fields = [ user_id_field ]\n                                        ) -%}\n            {{ user_id_sde_coal[0] }} as {{ snake_user_id }}\n\n        {% elif user_id_context != '' %}\n        {# Coalesce the context column for the custom user_id field  #}\n            {%- set user_id_cont_coal = snowplow_utils.combine_column_versions(\n                                        relation=ref('snowplow_normalize_base_events_this_run'),\n                                        column_prefix= user_id_context.lower(),\n                                        include_field_alias = False,\n                                        required_fields = [ user_id_field ]\n                                        ) -%}\n            {{ user_id_cont_coal[0] }} as {{ snake_user_id }}\n        {%- endif %}\n        , collector_tstamp as latest_collector_tstamp\n        -- Flat columns from event table\n        {% if flat_cols|length > 0 %}\n            {%- for col in flat_cols -%}\n                , {{ col }}\n            {% endfor -%}\n        {%- endif -%}\n        -- user column(s) from the event table\n        {% if user_cols|length > 0 %}\n            {%- for col, col_ind in zip(user_cols_clean, range(user_cols|length)) -%}  {# Loop over each context column, getting the coalesced version#}\n                {%- set user_cols_list = snowplow_utils.combine_column_versions(\n                                            relation=ref('snowplow_normalize_base_events_this_run'),\n                                            column_prefix=col.lower(),\n                                            include_field_alias = True,\n                                            required_fields = user_keys_clean[col_ind]\n                                            ) -%}\n                {% for field in user_cols_list %} {# Loop over each field in the column, alias provided by macro #}\n                    , {{field}}\n                {%- endfor -%}\n            {%- endfor -%}\n        {%- endif %}\n    from\n        {{ ref('snowplow_normalize_base_events_this_run') }}\n    where\n        1 = 1\n        {% if not remove_new_event_check %}\n            and {{ snowplow_utils.is_run_with_new_events(\"snowplow_normalize\") }}\n        {%- endif -%}\n),\n\n{# Order data to get the latest data having rn = 1 #}\nusers_ordering as (\n    select\n        a.*\n        , row_number() over (partition by {{ snake_user_id }} order by latest_collector_tstamp desc) as rn\n    from\n        defined_user_id a\n    where\n        {{ snake_user_id }} is not null\n)\n\n{# Ensure only latest record is upserted into the table #}\nselect\n    * except (rn)\nfrom\n    users_ordering\nwhere\n    rn = 1\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_normalize.snakeify_case", "macro.snowplow_utils.combine_column_versions", "macro.snowplow_utils.is_run_with_new_events"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.007165, "supported_languages": null}, "macro.snowplow_normalize.databricks__users_table": {"name": "databricks__users_table", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/users_table.sql", "original_file_path": "macros/users_table.sql", "unique_id": "macro.snowplow_normalize.databricks__users_table", "macro_sql": "{% macro databricks__users_table(user_id_field = 'user_id', user_id_sde = '', user_id_context = '', user_cols = [], user_keys = [], user_types = [], user_id_alias = 'user_id', flat_cols = [], remove_new_event_check = false) %}\n{# Remove down to major version for Databricks columns, drop 2 last _X values #}\n{%- set user_cols_clean = [] -%}\n{%- for ind in range(user_cols|length) -%}\n    {% do user_cols_clean.append('_'.join(user_cols[ind].split('_')[:-2])) -%}\n{%- endfor -%}\n\n{# Replace keys with snake_case where needed #}\n{%- set user_keys_clean = [] -%}\n{%- for ind1 in range(user_keys|length) -%}\n    {%- set user_key_clean = [] -%}\n    {%- for ind2 in range(user_keys[ind1]|length) -%}\n        {% do user_key_clean.append(snowplow_normalize.snakeify_case(user_keys[ind1][ind2])) -%}\n    {%- endfor -%}\n    {% do user_keys_clean.append(user_key_clean) -%}\n{%- endfor -%}\n{% set user_id_field = snowplow_normalize.snakeify_case(user_id_field) %}\n\n{# Raise a warining if both sde and context are provided as we only use one #}\n{%- if user_id_sde != '' and user_id_context != '' -%}\n{% do exceptions.warn(\"Snowplow: Both a user_id sde column and context column provided, only the sde column will be used.\") %}\n{%- endif -%}\n\n{%- set snake_user_id =  snowplow_normalize.snakeify_case(user_id_alias) -%}\n\nwith defined_user_id as (\n    select\n        {% if user_id_sde == '' and user_id_context == ''%}\n            {{ user_id_field }} as {{ snake_user_id }}\n        {% elif user_id_sde != '' %}\n            {{ '_'.join(user_id_sde.split('_')[:-2]) }}.{{ user_id_field }} as {{ snake_user_id }}\n        {% elif user_id_context != '' %}\n            {{ '_'.join(user_id_context.split('_')[:-2]) }}[0].{{ user_id_field }} as {{ snake_user_id }}\n        {%- endif %}\n        , collector_tstamp as latest_collector_tstamp\n        {% if target.type in ['databricks', 'spark'] -%}\n            , DATE(collector_tstamp) as latest_collector_tstamp_date\n        {%- endif %}\n        -- Flat columns from event table\n        {% if flat_cols|length > 0 %}\n            {%- for col in flat_cols -%}\n                , {{ col }}\n            {% endfor -%}\n        {%- endif -%}\n        -- user column(s) from the event table\n        {% if user_cols_clean|length > 0 %}\n            {%- for col, col_ind in zip(user_cols_clean, range(user_cols_clean|length)) -%} {# Loop over each context column provided #}\n                {%- for key in user_keys_clean[col_ind] -%} {# Loop over the keys in each column #}\n                    , {{ col }}[0].{{ key }} as {{ key }}\n                {% endfor -%}\n            {%- endfor -%}\n        {%- endif %}\n    from\n        {{ ref('snowplow_normalize_base_events_this_run') }}\n    where\n        1 = 1\n        {% if not remove_new_event_check %}\n            and {{ snowplow_utils.is_run_with_new_events(\"snowplow_normalize\") }}\n        {%- endif -%}\n\n),\n\n{# Order data to get the latest data having rn = 1 #}\nusers_ordering as (\nselect\n    a.*\n    , row_number() over (partition by {{ snake_user_id }} order by latest_collector_tstamp desc) as rn\nfrom\n    defined_user_id a\nwhere\n    {{ snake_user_id }} is not null\n)\n\n{# Ensure only latest record is upserted into the table #}\nselect\n    * except (rn)\nfrom\n    users_ordering\nwhere\n    rn = 1\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_normalize.snakeify_case", "macro.snowplow_utils.is_run_with_new_events"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0097091, "supported_languages": null}, "macro.snowplow_normalize.normalize_events": {"name": "normalize_events", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/normalize_events.sql", "original_file_path": "macros/normalize_events.sql", "unique_id": "macro.snowplow_normalize.normalize_events", "macro_sql": "{% macro normalize_events(event_names, flat_cols = [], sde_cols = [], sde_keys = [], sde_types = [], sde_aliases = [], context_cols = [], context_keys = [], context_types = [], context_aliases = [], remove_new_event_check = false) %}\n    {{ return(adapter.dispatch('normalize_events', 'snowplow_normalize')(event_names, flat_cols, sde_cols, sde_keys, sde_types, sde_aliases, context_cols, context_keys, context_types, context_aliases, remove_new_event_check)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_normalize.bigquery__normalize_events"]}, "description": "A macro to produce a table from `base_events_this_run` with the input columns, for a single event type", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_normalize://macros/schema.yml", "arguments": [{"name": "event_names", "type": "array", "description": "List of names of the events this table will be filtered to"}, {"name": "flat_cols", "type": "array", "description": "List of standard columns from the atomic.events table to include"}, {"name": "sde_cols", "type": "string", "description": "Column names for the self-describing event to pull attributes from"}, {"name": "sde_keys", "type": "array", "description": "List of list of  keys/column names within the self describing event column to include"}, {"name": "sde_types", "type": "array", "description": "List of list of types of the values of the keys within the self describing event column (only used in Snowflake)"}, {"name": "sde_aliases", "type": "array", "description": "List of prefixes to apply to the respective context column keys to be used as final column names"}, {"name": "context_cols", "type": "array", "description": "List of context columns from the atomic.events table to include"}, {"name": "context_keys", "type": "array of arrays", "description": "List of lists of keys/column names within the respective context column to include"}, {"name": "context_types", "type": "array of arrays", "description": "List of list of types of the values of the keys within the respective context column (only used in Snowflake)"}, {"name": "context_aliases", "type": "array", "description": "List of prefixes to apply to the respective context column keys to be used as final column names"}, {"name": "remove_new_event_check", "type": "boolean", "description": "A flag to disable the `with_new_events` part of the macro, to allow for integration tests to run"}], "created_at": 1714072383.9929202, "supported_languages": null}, "macro.snowplow_normalize.snowflake__normalize_events": {"name": "snowflake__normalize_events", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/normalize_events.sql", "original_file_path": "macros/normalize_events.sql", "unique_id": "macro.snowplow_normalize.snowflake__normalize_events", "macro_sql": "{% macro snowflake__normalize_events(event_names, flat_cols = [], sde_cols = [], sde_keys = [], sde_types = [], sde_aliases = [], context_cols = [], context_keys = [], context_types = [], context_aliases = [], remove_new_event_check = false) %}\n{# Remove down to major version for Snowflake columns, drop 2 last _X values #}\n{%- set sde_cols_clean = [] -%}\n{%- for ind in range(sde_cols|length) -%}\n    {% do sde_cols_clean.append('_'.join(sde_cols[ind].split('_')[:-2])) -%}\n{%- endfor -%}\n\n{%- set context_cols_clean = [] -%}\n{%- for ind in range(context_cols|length) -%}\n    {% do context_cols_clean.append('_'.join(context_cols[ind].split('_')[:-2])) -%}\n{%- endfor -%}\n\nselect\n    event_id\n    , collector_tstamp\n    -- Flat columns from event table\n    {% if flat_cols|length > 0 %}\n        {%- for col in flat_cols -%}\n            , {{ col }}\n        {% endfor -%}\n    {%- endif -%}\n    -- self describing events columns from event table\n    {% if sde_cols_clean|length > 0 %}\n        {%- for col, col_ind in zip(sde_cols_clean, range(sde_cols_clean|length)) -%} {# Loop over each sde column #}\n            {%- for key, type in zip(sde_keys[col_ind], sde_types[col_ind]) -%} {# Loop over each key within the sde column #}\n                {% if sde_aliases|length > 0 -%}\n                    , {{ col }}:{{ key }}::{{ type }} as {{ sde_aliases[col_ind] }}_{{ snowplow_normalize.snakeify_case(key) }} {# Alias should align across all warehouses in snakecase #}\n                {% else -%}\n                    , {{ col }}:{{ key }}::{{ type }} as {{ snowplow_normalize.snakeify_case(key) }}\n                {% endif -%}\n            {%- endfor -%}\n        {%- endfor -%}\n    {%- endif %}\n    -- context column(s) from the event table\n    {% if context_cols_clean|length > 0 %}\n        {%- for col, col_ind in zip(context_cols_clean, range(context_cols_clean|length)) -%} {# Loop over each context column #}\n            {%- for key, type in zip(context_keys[col_ind], context_types[col_ind]) -%} {# Loop over each key within the context column #}\n                {% if context_aliases|length > 0 -%}\n                    , {{ col }}[0]:{{ key }}::{{ type }} as {{ context_aliases[col_ind] }}_{{ snowplow_normalize.snakeify_case(key) }} {# Alias should align across all warehouses in snakecase #}\n                {% else -%}\n                    , {{ col }}[0]:{{ key }}::{{ type }} as {{ snowplow_normalize.snakeify_case(key) }}\n                {% endif -%}\n            {%- endfor -%}\n        {%- endfor -%}\n    {%- endif %}\nfrom\n    {{ ref('snowplow_normalize_base_events_this_run') }}\nwhere\n    event_name in ('{{ event_names|join(\"','\") }}')\n    {% if not remove_new_event_check %}\n        and {{ snowplow_utils.is_run_with_new_events(\"snowplow_normalize\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_normalize.snakeify_case", "macro.snowplow_utils.is_run_with_new_events"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.015908, "supported_languages": null}, "macro.snowplow_normalize.bigquery__normalize_events": {"name": "bigquery__normalize_events", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/normalize_events.sql", "original_file_path": "macros/normalize_events.sql", "unique_id": "macro.snowplow_normalize.bigquery__normalize_events", "macro_sql": "{% macro bigquery__normalize_events(event_names, flat_cols = [], sde_cols = [], sde_keys = [], sde_types = [], sde_aliases = [], context_cols = [], context_keys = [], context_types = [], context_aliases = [], remove_new_event_check = false) %}\n{# Remove down to major version for bigquery combine columns macro, drop 2 last _X values #}\n{%- set sde_cols_clean = [] -%}\n{%- for ind in range(sde_cols|length) -%}\n    {% do sde_cols_clean.append('_'.join(sde_cols[ind].split('_')[:-2])) -%}\n{%- endfor -%}\n{%- set context_cols_clean = [] -%}\n{%- for ind in range(context_cols|length) -%}\n    {% do context_cols_clean.append('_'.join(context_cols[ind].split('_')[:-2])) -%}\n{%- endfor -%}\n\n{# Replace keys with snake_case where needed #}\n{%- set sde_keys_clean = [] -%}\n{%- set context_keys_clean = [] -%}\n\n{%- for ind1 in range(sde_keys|length) -%}\n    {%- set sde_key_clean = [] -%}\n    {%- for ind2 in range(sde_keys[ind1]|length) -%}\n        {% do sde_key_clean.append(snowplow_normalize.snakeify_case(sde_keys[ind1][ind2])) -%}\n    {%- endfor -%}\n    {% do sde_keys_clean.append(sde_key_clean) -%}\n{%- endfor -%}\n\n{%- for ind1 in range(context_keys|length) -%}\n    {%- set context_key_clean = [] -%}\n    {%- for ind2 in range(context_keys[ind1]|length) -%}\n        {% do context_key_clean.append(snowplow_normalize.snakeify_case(context_keys[ind1][ind2])) -%}\n    {%- endfor -%}\n    {% do context_keys_clean.append(context_key_clean) -%}\n{%- endfor -%}\n\n\n\nselect\n    event_id\n    , collector_tstamp\n    -- Flat columns from event table\n    {% if flat_cols|length > 0 %}\n        {%- for col in flat_cols -%}\n            , {{ col }}\n        {% endfor -%}\n    {%- endif -%}\n    -- self describing events columns from event table\n    {% if sde_cols|length > 0 %}\n        {%- for col, col_ind in zip(sde_cols_clean, range(sde_cols|length)) -%} {# Loop over each sde column, get coalesced version of keys #}\n            {# Prep the alias columns #}\n            {%- if sde_aliases|length > 0 -%}\n                {%- set required_aliases = [] -%}\n                {%- for i in range(sde_keys_clean[col_ind]|length) -%}\n                    {%- do required_aliases.append(sde_aliases[col_ind] ~ '_' ~ sde_keys_clean[col_ind][i]) -%}\n                {%- endfor -%}\n            {%- else -%}\n                {%- set required_aliases = sde_keys_clean[col_ind] -%}\n            {%- endif -%}\n            {%- set sde_col_list = snowplow_utils.combine_column_versions(\n                                        relation=ref('snowplow_normalize_base_events_this_run'),\n                                        column_prefix=col.lower(),\n                                        required_fields = zip(sde_keys_clean[col_ind], required_aliases)\n                                        ) -%}\n            {%- for field, key_ind in zip(sde_col_list, range(sde_col_list|length)) -%} {# Loop over each key within the column, appling the bespoke alias as needed #}\n                , {{field}}\n            {% endfor -%}\n        {%- endfor -%}\n    {%- endif %}\n    -- context column(s) from the event table\n    {% if context_cols|length > 0 %}\n        {%- for col, col_ind in zip(context_cols_clean, range(context_cols|length)) -%} {# Loop over each context column, get coalesced version of keys #}\n            {# Prep the alias columns #}\n            {%- if context_aliases|length > 0 -%}\n                {%- set required_aliases = [] -%}\n                {%- for i in range(context_keys_clean[col_ind]|length) -%}\n                    {%- do required_aliases.append(context_aliases[col_ind] ~ '_' ~ context_keys_clean[col_ind][i]) -%}\n                {%- endfor -%}\n            {%- else -%}\n                {%- set required_aliases = context_keys_clean[col_ind] -%}\n            {%- endif -%}\n            {%- set cont_col_list = snowplow_utils.combine_column_versions(\n                                        relation=ref('snowplow_normalize_base_events_this_run'),\n                                        column_prefix=col.lower(),\n                                        required_fields = zip(context_keys_clean[col_ind], required_aliases)\n                                        ) -%}\n            {%- for field, key_ind in zip(cont_col_list, range(cont_col_list|length)) -%} {# Loop over each key within the column #}\n                , {{field}}\n            {% endfor -%}\n        {%- endfor -%}\n    {%- endif %}\nfrom\n    {{ ref('snowplow_normalize_base_events_this_run') }}\nwhere\n    event_name in ('{{ event_names|join(\"','\") }}')\n    {% if not remove_new_event_check %}\n        and {{ snowplow_utils.is_run_with_new_events(\"snowplow_normalize\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_normalize.snakeify_case", "macro.snowplow_utils.combine_column_versions", "macro.snowplow_utils.is_run_with_new_events"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.019455, "supported_languages": null}, "macro.snowplow_normalize.databricks__normalize_events": {"name": "databricks__normalize_events", "resource_type": "macro", "package_name": "snowplow_normalize", "path": "macros/normalize_events.sql", "original_file_path": "macros/normalize_events.sql", "unique_id": "macro.snowplow_normalize.databricks__normalize_events", "macro_sql": "{% macro databricks__normalize_events(event_names, flat_cols = [], sde_cols = [], sde_keys = [], sde_types = [], sde_aliases = [], context_cols = [], context_keys = [], context_types = [], context_aliases = [], remove_new_event_check = false) %}\n{# Remove down to major version for Databricks columns, drop 2 last _X values #}\n{%- set sde_cols_clean = [] -%}\n{%- for ind in range(sde_cols|length) -%}\n    {% do sde_cols_clean.append('_'.join(sde_cols[ind].split('_')[:-2])) -%}\n{%- endfor -%}\n\n{%- set context_cols_clean = [] -%}\n{%- for ind in range(context_cols|length) -%}\n    {% do context_cols_clean.append('_'.join(context_cols[ind].split('_')[:-2])) -%}\n{%- endfor -%}\n\n{# Replace keys with snake_case where needed #}\n{%- set sde_keys_clean = [] -%}\n{%- set context_keys_clean = [] -%}\n\n{%- for ind1 in range(sde_keys|length) -%}\n    {%- set sde_key_clean = [] -%}\n    {%- for ind2 in range(sde_keys[ind1]|length) -%}\n        {% do sde_key_clean.append(snowplow_normalize.snakeify_case(sde_keys[ind1][ind2])) -%}\n    {%- endfor -%}\n    {% do sde_keys_clean.append(sde_key_clean) -%}\n{%- endfor -%}\n\n{%- for ind1 in range(context_keys|length) -%}\n    {%- set context_key_clean = [] -%}\n    {%- for ind2 in range(context_keys[ind1]|length) -%}\n        {% do context_key_clean.append(snowplow_normalize.snakeify_case(context_keys[ind1][ind2])) -%}\n    {%- endfor -%}\n    {% do context_keys_clean.append(context_key_clean) -%}\n{%- endfor -%}\n\nselect\n    event_id\n    , collector_tstamp\n    {% if target.type in ['databricks', 'spark'] -%}\n    , DATE(collector_tstamp) as collector_tstamp_date\n    {%- endif %}\n    -- Flat columns from event table\n    {% if flat_cols|length > 0 %}\n        {%- for col in flat_cols -%}\n            , {{ col }}\n        {% endfor -%}\n    {%- endif -%}\n    -- self describing events columns from event table\n    {% if sde_cols_clean|length > 0 %}\n        {%- for col, col_ind in zip(sde_cols_clean, range(sde_cols_clean|length)) -%} {# Loop over each sde column #}\n            {%- for key in sde_keys_clean[col_ind] -%} {# Loop over each key within the sde column #}\n                {% if sde_aliases|length > 0 -%}\n                    , {{ col }}.{{ key }} as {{ sde_aliases[col_ind] }}_{{ key }}\n                {% else -%}\n                    , {{ col }}.{{ key }} as {{ key }}\n                {% endif -%}\n            {%- endfor -%}\n        {%- endfor -%}\n    {%- endif %}\n\n    -- context column(s) from the event table\n    {% if context_cols_clean|length > 0 %}\n        {%- for col, col_ind in zip(context_cols_clean, range(context_cols_clean|length)) -%} {# Loop over each context column #}\n            {%- for key in context_keys_clean[col_ind] -%} {# Loop over each key within the context column #}\n                {% if context_aliases|length > 0 -%}\n                    , {{ col }}[0].{{ key }} as {{ context_aliases[col_ind] }}_{{ key }}\n                {% else -%}\n                    , {{ col }}[0].{{ key }} as {{ key }}\n                {% endif -%}\n            {%- endfor -%}\n        {%- endfor -%}\n    {%- endif %}\nfrom\n    {{ ref('snowplow_normalize_base_events_this_run') }}\nwhere\n    event_name in ('{{ event_names|join(\"','\") }}')\n    {% if not remove_new_event_check %}\n        and {{ snowplow_utils.is_run_with_new_events(\"snowplow_normalize\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_normalize.snakeify_case", "macro.snowplow_utils.is_run_with_new_events"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.022309, "supported_languages": null}, "macro.dbt_profiler.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch(\"type_string\", macro_namespace=\"dbt_profiler\")()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.bigquery__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0234392, "supported_languages": null}, "macro.dbt_profiler.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__type_string", "macro_sql": "{%- macro default__type_string() -%}\n  varchar\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.023519, "supported_languages": null}, "macro.dbt_profiler.bigquery__type_string": {"name": "bigquery__type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.bigquery__type_string", "macro_sql": "{%- macro bigquery__type_string() -%}\n  string\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.023584, "supported_languages": null}, "macro.dbt_profiler.databricks__type_string": {"name": "databricks__type_string", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.databricks__type_string", "macro_sql": "{%- macro databricks__type_string() -%}\n  string\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.023649, "supported_languages": null}, "macro.dbt_profiler.is_numeric_dtype": {"name": "is_numeric_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_numeric_dtype", "macro_sql": "\n\n{%- macro is_numeric_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_numeric_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_numeric_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.023814, "supported_languages": null}, "macro.dbt_profiler.default__is_numeric_dtype": {"name": "default__is_numeric_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_numeric_dtype", "macro_sql": "{%- macro default__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype.startswith(\"int\") or dtype.startswith(\"float\") or \"numeric\" in dtype or \"number\" in dtype or \"double\" in dtype or \"bigint\" in dtype %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.02412, "supported_languages": null}, "macro.dbt_profiler.sqlserver__is_numeric_dtype": {"name": "sqlserver__is_numeric_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.sqlserver__is_numeric_dtype", "macro_sql": "{%- macro sqlserver__is_numeric_dtype(dtype) -%}\n  {% set is_numeric = dtype in [\"decimal\", \"numeric\", \"bigint\" \"numeric\", \"smallint\", \"decimal\", \"int\", \"tinyint\", \"money\", \"float\", \"real\"]  %}\n  {% do return(is_numeric) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.024394, "supported_languages": null}, "macro.dbt_profiler.is_logical_dtype": {"name": "is_logical_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_logical_dtype", "macro_sql": "\n\n{%- macro is_logical_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_logical_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_logical_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.024561, "supported_languages": null}, "macro.dbt_profiler.default__is_logical_dtype": {"name": "default__is_logical_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_logical_dtype", "macro_sql": "{%- macro default__is_logical_dtype(dtype) -%}\n  {% set is_bool = dtype.startswith(\"bool\") %}\n  {% do return(is_bool) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.024725, "supported_languages": null}, "macro.dbt_profiler.is_date_or_time_dtype": {"name": "is_date_or_time_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_date_or_time_dtype", "macro_sql": "\n\n{%- macro is_date_or_time_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_date_or_time_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_date_or_time_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.024885, "supported_languages": null}, "macro.dbt_profiler.default__is_date_or_time_dtype": {"name": "default__is_date_or_time_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_date_or_time_dtype", "macro_sql": "{%- macro default__is_date_or_time_dtype(dtype) -%}\n  {% set is_date_or_time = dtype.startswith(\"timestamp\") or dtype.startswith(\"date\") %}\n  {% do return(is_date_or_time) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0250938, "supported_languages": null}, "macro.dbt_profiler.is_struct_dtype": {"name": "is_struct_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.is_struct_dtype", "macro_sql": "\n\n{%- macro is_struct_dtype(dtype) -%}\n  {{ return(adapter.dispatch(\"is_struct_dtype\", macro_namespace=\"dbt_profiler\")(dtype)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__is_struct_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.025267, "supported_languages": null}, "macro.dbt_profiler.default__is_struct_dtype": {"name": "default__is_struct_dtype", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__is_struct_dtype", "macro_sql": "{%- macro default__is_struct_dtype(dtype) -%}\n  {% do return((dtype | lower).startswith('struct')) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0254169, "supported_languages": null}, "macro.dbt_profiler.information_schema": {"name": "information_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.information_schema", "macro_sql": "\n\n{%- macro information_schema(relation) -%}\n  {{ return(adapter.dispatch(\"information_schema\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.bigquery__information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.025579, "supported_languages": null}, "macro.dbt_profiler.default__information_schema": {"name": "default__information_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__information_schema", "macro_sql": "{%- macro default__information_schema(relation) -%}\n  {{ relation.information_schema() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0256882, "supported_languages": null}, "macro.dbt_profiler.bigquery__information_schema": {"name": "bigquery__information_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.bigquery__information_schema", "macro_sql": "{%- macro bigquery__information_schema(relation) -%}\n  {{ adapter.quote(relation.database) }}.{{ adapter.quote(relation.schema) }}.INFORMATION_SCHEMA\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.025855, "supported_languages": null}, "macro.dbt_profiler.select_from_information_schema_columns": {"name": "select_from_information_schema_columns", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.select_from_information_schema_columns", "macro_sql": "\n\n{%- macro select_from_information_schema_columns(relation) -%}\n  {{ return(adapter.dispatch(\"select_from_information_schema_columns\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__select_from_information_schema_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.026022, "supported_languages": null}, "macro.dbt_profiler.default__select_from_information_schema_columns": {"name": "default__select_from_information_schema_columns", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.default__select_from_information_schema_columns", "macro_sql": "{%- macro default__select_from_information_schema_columns(relation) -%}\n  select\n    *\n  from {{ dbt_profiler.information_schema(relation) }}.COLUMNS\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n  order by ordinal_position asc\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.information_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.026258, "supported_languages": null}, "macro.dbt_profiler.redshift__select_from_information_schema_columns": {"name": "redshift__select_from_information_schema_columns", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/cross_db_utils.sql", "original_file_path": "macros/cross_db_utils.sql", "unique_id": "macro.dbt_profiler.redshift__select_from_information_schema_columns", "macro_sql": "{%- macro redshift__select_from_information_schema_columns(relation) -%}\n  select\n    attr.attname::varchar as column_name,\n    type.typname::varchar as data_type,\n    class.relname::varchar as table_name,\n    namespace.nspname::varchar as table_schema\n  from pg_catalog.pg_attribute as attr\n  join pg_catalog.pg_type as type on (attr.atttypid = type.oid)\n  join pg_catalog.pg_class as class on (attr.attrelid = class.oid)\n  join pg_catalog.pg_namespace as namespace on (class.relnamespace = namespace.oid)\n  where lower(table_schema) = lower('{{ relation.schema }}') \n    and lower(table_name) = lower('{{ relation.identifier }}')\n    and attr.attnum > 0\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.026408, "supported_languages": null}, "macro.dbt_profiler.get_relation": {"name": "get_relation", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.get_relation", "macro_sql": "{% macro get_relation(relation=none, relation_name=none, schema=none, database=none) %}\n\n{% if relation is none and relation_name is none %}\n  {{ exceptions.raise_compiler_error(\"Either relation or relation_name must be specified.\") }}\n{% endif %}\n\n{% if relation is none %}\n  {% if schema is none %}\n    {% set schema = target.schema %}\n  {% endif %}\n\n  {% if database is none %}\n    {% set database = target.database %}\n  {% endif %}\n\n  {{ log(\"Get relation %s (database=%s, schema=%s)\" | format(adapter.quote(relation_name), adapter.quote(database), adapter.quote(schema)), info=False) }}\n\n  {%- \n  set relation = adapter.get_relation(\n    database=database,\n    schema=schema,\n    identifier=relation_name\n  ) \n  -%}\n  {% if relation is none %}\n    {{ exceptions.raise_compiler_error(\"Relation \" ~ adapter.quote(relation_name) ~ \" does not exist or not authorized.\") }}\n  {% endif %}\n{% endif %}\n\n{% do return(relation) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0278232, "supported_languages": null}, "macro.dbt_profiler.assert_relation_exists": {"name": "assert_relation_exists", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.assert_relation_exists", "macro_sql": "\n\n{%- macro assert_relation_exists(relation) -%}\n  {{ return(adapter.dispatch(\"assert_relation_exists\", macro_namespace=\"dbt_profiler\")(relation)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__assert_relation_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0280051, "supported_languages": null}, "macro.dbt_profiler.default__assert_relation_exists": {"name": "default__assert_relation_exists", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.default__assert_relation_exists", "macro_sql": "{% macro default__assert_relation_exists(relation) %}\n\n{% do run_query(\"select * from \" ~ relation ~ \" limit 0\") %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.028165, "supported_languages": null}, "macro.dbt_profiler.sqlserver__assert_relation_exists": {"name": "sqlserver__assert_relation_exists", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/relation.sql", "original_file_path": "macros/relation.sql", "unique_id": "macro.dbt_profiler.sqlserver__assert_relation_exists", "macro_sql": "{% macro sqlserver__assert_relation_exists(relation) %}\n\n{% do run_query(\"select top(0) * from \" ~ relation ~ \"\") %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0283048, "supported_languages": null}, "macro.dbt_profiler.print_profile": {"name": "print_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/print_profile.sql", "original_file_path": "macros/print_profile.sql", "unique_id": "macro.dbt_profiler.print_profile", "macro_sql": "{% macro print_profile(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0289888, "supported_languages": null}, "macro.dbt_profiler.print_profile_docs": {"name": "print_profile_docs", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/print_profile_docs.sql", "original_file_path": "macros/print_profile_docs.sql", "unique_id": "macro.dbt_profiler.print_profile_docs", "macro_sql": "{% macro print_profile_docs(relation=none, relation_name=none, docs_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], max_rows=none, max_columns=13, max_column_width=30, max_precision=none, where_clause=none) %}\n\n{% if execute %}\n\n    {%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n    \n    {% if docs_name is none %}\n        {% set docs_name = 'dbt_profiler__' + relation_name %}\n    {% endif %}\n    \n    {%- set startdocs = '{% docs ' ~ docs_name ~ '  %}' -%}\n    {%- set enddocs = '{% enddocs %}' -%}\n    \n    {# Check if macro is called in dbt Cloud? #}\n    {%- if flags.WHICH == 'rpc' -%}\n        {%- set is_dbt_cloud = true -%}\n    {%- else -%}\n        {%- set is_dbt_cloud = false -%}\n    {%- endif -%}\n    \n    {% if not is_dbt_cloud %}\n    \n        {{ print(startdocs) }}\n        {% do results.print_table(max_rows=max_rows, max_columns=max_columns, max_column_width=max_column_width, max_precision=max_precision) %}\n        {{ print(enddocs) }}\n    \n    {% else %}\n    \n        {%- set profile_docs=[] -%}\n        {% do profile_docs.append(startdocs) -%}\n        {% do profile_docs.append('') %}\n    \n        {# Get header from column names #}\n        {%- set headers = results.column_names -%}\n        {%- set header = [] -%}\n        {%- set horizontal_line = [] -%}\n    \n        {% for i in range(0,headers|length) %}\n            {% do header.append(headers[i]) %}\n            {% do horizontal_line.append('---') %}\n        {% endfor %}\n        {% do profile_docs.append('| ' ~ header|join(' | ') ~ ' |') %}\n        {% do profile_docs.append('| ' ~ horizontal_line|join(' | ') ~ ' |') %}\n    \n        {# Get row values #}\n        {% for row in results.rows %}\n            {%- set list_row = [''] -%}\n            {% for val in row.values() %}\n                {% do list_row.append(val) %}\n            {% endfor %}\n            {% do profile_docs.append(list_row|join(' | ') ~ ' |') %}\n        {% endfor %}\n        {% do profile_docs.append('') %}\n        {% do profile_docs.append(enddocs) %}\n    \n        {# Join profile docs #}\n        {%- set joined = profile_docs | join ('\\n') -%}\n        {{ log(joined, info=True) }}\n        {% do return(joined) %}\n    \n    {% endif %}\n    \n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0319302, "supported_languages": null}, "macro.dbt_profiler.get_profile": {"name": "get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.get_profile", "macro_sql": "{% macro get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n  {{ return(adapter.dispatch(\"get_profile\", macro_namespace=\"dbt_profiler\")(relation, exclude_measures, include_columns, exclude_columns, where_clause, group_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.default__get_profile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0484722, "supported_languages": null}, "macro.dbt_profiler.default__get_profile": {"name": "default__get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.default__get_profile", "macro_sql": "{% macro default__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select\n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.run_query", "macro.dbt_profiler.select_from_information_schema_columns", "macro.dbt_profiler.measure_row_count", "macro.dbt_profiler.measure_not_null_proportion", "macro.dbt_profiler.measure_distinct_proportion", "macro.dbt_profiler.measure_distinct_count", "macro.dbt_profiler.measure_is_unique", "macro.dbt_profiler.measure_min", "macro.dbt_profiler.measure_max", "macro.dbt_profiler.measure_avg", "macro.dbt_profiler.measure_median", "macro.dbt_profiler.measure_std_dev_population", "macro.dbt_profiler.measure_std_dev_sample", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0525372, "supported_languages": null}, "macro.dbt_profiler.databricks__get_profile": {"name": "databricks__get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.databricks__get_profile", "macro_sql": "{% macro databricks__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=True) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {# Get column metadata. #}\n  {% call statement('table_metadata', fetch_result=True) -%}\n    describe table extended {{ relation.schema }}.{{ relation.identifier }}\n  {% endcall %}\n  {% set columns_metadata = load_result('table_metadata').table %}\n  {% set columns_metadata = columns_metadata.rename(columns_metadata.column_names | map('lower')) %}\n  \n  {% set data_types = columns_metadata.columns['data_type'].values() | map('lower') | list %}\n  {% set column_names = columns_metadata.columns['col_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in column_names %}\n    {% do data_type_map.update({column_name: data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {# {{ print(profile_sql) }} #}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.statement", "macro.dbt_profiler.measure_row_count", "macro.dbt_profiler.measure_not_null_proportion", "macro.dbt_profiler.measure_distinct_proportion", "macro.dbt_profiler.measure_distinct_count", "macro.dbt_profiler.measure_is_unique", "macro.dbt_profiler.measure_min", "macro.dbt_profiler.measure_max", "macro.dbt_profiler.measure_avg", "macro.dbt_profiler.measure_median", "macro.dbt_profiler.measure_std_dev_population", "macro.dbt_profiler.measure_std_dev_sample", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.057276, "supported_languages": null}, "macro.dbt_profiler.sqlserver__get_profile": {"name": "sqlserver__get_profile", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile.sql", "original_file_path": "macros/get_profile.sql", "unique_id": "macro.dbt_profiler.sqlserver__get_profile", "macro_sql": "{% macro sqlserver__get_profile(relation, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none, group_by=[]) %}\n\n{%- if include_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both include_columns and exclude_columns arguments were provided to the `get_profile` macro. Only one is allowed.\") }}\n{%- endif -%}\n\n{%- set all_measures = [\n  \"row_count\",\n  \"not_null_proportion\",\n  \"distinct_proportion\",\n  \"distinct_count\",\n  \"is_unique\",\n  \"min\",\n  \"max\",\n  \"avg\",\n  \"median\",\n  \"std_dev_population\",\n  \"std_dev_sample\"\n] -%}\n\n{%- set include_measures = all_measures | reject(\"in\", exclude_measures) -%}\n\n{{ log(\"Include measures: \" ~ include_measures, info=False) }}\n\n{% if execute %}\n  {% do dbt_profiler.assert_relation_exists(relation) %}\n\n  {{ log(\"Get columns in relation %s\" | format(relation.include()), info=False) }}\n  {%- set relation_columns = adapter.get_columns_in_relation(relation) -%}\n  {%- set relation_column_names = relation_columns | map(attribute=\"name\") | list -%}\n  {{ log(\"Relation columns: \" ~ relation_column_names | join(', '), info=False) }}\n\n  {%- if include_columns -%}\n    {%- set profile_column_names = relation_column_names | select(\"in\", include_columns) | list -%}\n  {%- elif exclude_columns -%}\n    {%- set profile_column_names = relation_column_names | reject(\"in\", exclude_columns) | list -%}\n  {%- else -%}\n    {%- set profile_column_names = relation_column_names -%}\n  {%- endif -%}\n\n  {{ log(\"Profile columns: \" ~ profile_column_names | join(', '), info=False) }}\n\n  {% set information_schema_columns = run_query(dbt_profiler.select_from_information_schema_columns(relation)) %}\n  {% set information_schema_columns = information_schema_columns.rename(information_schema_columns.column_names | map('lower')) %}\n  {% set information_schema_data_types = information_schema_columns.columns['data_type'].values() | map('lower') | list %}\n  {% set information_schema_column_names = information_schema_columns.columns['column_name'].values() | map('lower') | list %}\n  {% set data_type_map = {} %}\n  {% for column_name in information_schema_column_names %}\n    {% do data_type_map.update({column_name: information_schema_data_types[loop.index-1]}) %}\n  {% endfor %}\n  {{ log(\"Column data types: \" ~ data_type_map, info=False) }}\n\n  {% set profile_sql %}\n    with source_data as (\n      select\n        *\n      from {{ relation }}\n      {% if where_clause %}\n        where {{ where_clause }}\n      {% endif %}\n    ),\n\n    column_profiles as (\n      {% for column_name in profile_column_names %}\n        {% set data_type = data_type_map.get(column_name.lower(), \"\") %}\n        select \n          {%- for group_by_column in group_by %}\n            {{ group_by_column }},\n          {%- endfor %}\n          lower('{{ column_name }}') as column_name,\n          nullif(lower('{{ data_type }}'), '') as data_type,\n          {% if \"row_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_row_count(column_name, data_type) }} as row_count,\n          {%- endif %}\n          {% if \"not_null_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_not_null_proportion(column_name, data_type) }} as not_null_proportion,\n          {%- endif %}\n          {% if \"distinct_proportion\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_proportion(column_name, data_type) }} as distinct_proportion,\n          {%- endif %}\n          {% if \"distinct_count\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_distinct_count(column_name, data_type) }} as distinct_count,\n          {%- endif %}\n          {% if \"is_unique\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_is_unique(column_name, data_type) }} as is_unique,\n          {%- endif %}\n          {% if \"min\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_min(column_name, data_type) }} as min,\n          {%- endif %}\n          {% if \"max\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_max(column_name, data_type) }} as max,\n          {%- endif %}\n          {% if \"avg\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_avg(column_name, data_type) }} as avg,\n          {%- endif %}\n          {% if \"median\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_median(column_name, data_type) }} as median,\n          {%- endif %}\n          {% if \"std_dev_population\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_population(column_name, data_type) }} as std_dev_population,\n          {%- endif %}\n          {% if \"std_dev_sample\" not in exclude_measures -%}\n            {{ dbt_profiler.measure_std_dev_sample(column_name, data_type) }} as std_dev_sample,\n          {%- endif %}\n          cast(current_timestamp as {{ dbt_profiler.type_string() }}) as profiled_at,\n          {{ loop.index }} as _column_position\n        from source_data\n        {% if group_by %}\n          group by {{ group_by | join(\", \") }}\n        {% endif %}\n        {% if not loop.last %}union all{% endif %}\n      {% endfor %}\n    )\n\n    select top 100 percent\n      {%- for group_by_column in group_by %}\n        {{ group_by_column }},\n      {%- endfor %}\n      column_name,\n      data_type,\n      {% for measure in include_measures %}\n        {{ measure }},\n      {% endfor %}\n      profiled_at\n    from column_profiles\n    order by {% if group_by %}{{ group_by | join(\", \") }},{% endif %} _column_position asc\n  {% endset %}\n\n  {% do return(profile_sql) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.assert_relation_exists", "macro.dbt.run_query", "macro.dbt_profiler.select_from_information_schema_columns", "macro.dbt_profiler.measure_row_count", "macro.dbt_profiler.measure_not_null_proportion", "macro.dbt_profiler.measure_distinct_proportion", "macro.dbt_profiler.measure_distinct_count", "macro.dbt_profiler.measure_is_unique", "macro.dbt_profiler.measure_min", "macro.dbt_profiler.measure_max", "macro.dbt_profiler.measure_avg", "macro.dbt_profiler.measure_median", "macro.dbt_profiler.measure_std_dev_population", "macro.dbt_profiler.measure_std_dev_sample", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.061538, "supported_languages": null}, "macro.dbt_profiler.get_profile_table": {"name": "get_profile_table", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/get_profile_table.sql", "original_file_path": "macros/get_profile_table.sql", "unique_id": "macro.dbt_profiler.get_profile_table", "macro_sql": "{% macro get_profile_table(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], where_clause=none) %}\n\n{%- set relation = dbt_profiler.get_relation(\n  relation=relation,\n  relation_name=relation_name,\n  schema=schema,\n  database=database\n) -%}\n{%- set profile_sql = dbt_profiler.get_profile(relation=relation, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n{{ log(profile_sql, info=False) }}\n{% set results = run_query(profile_sql) %}\n{% set results = results.rename(results.column_names | map('lower')) %}\n{% do return(results) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_relation", "macro.dbt_profiler.get_profile", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.062457, "supported_languages": null}, "macro.dbt_profiler.print_profile_schema": {"name": "print_profile_schema", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/print_profile_schema.sql", "original_file_path": "macros/print_profile_schema.sql", "unique_id": "macro.dbt_profiler.print_profile_schema", "macro_sql": "{% macro print_profile_schema(relation=none, relation_name=none, schema=none, database=none, exclude_measures=[], include_columns=[], exclude_columns=[], model_description=\"\", column_description=\"\", where_clause=none) %}\n\n{%- set column_dicts = [] -%}\n{%- set results = dbt_profiler.get_profile_table(relation=relation, relation_name=relation_name, schema=schema, database=database, exclude_measures=exclude_measures, include_columns=include_columns, exclude_columns=exclude_columns, where_clause=where_clause) -%}\n\n{% if execute %}\n  {% for row in results.rows %}\n\n    {% set row_dict = row.dict() %}\n    {% set column_name = row_dict.pop(\"column_name\") %}\n\n    {% set meta_dict = {} %}\n    {% for key, value in row_dict.items() %}\n      {% set column = results.columns.get(key) %}\n      {% do meta_dict.update({key: column.data_type.jsonify(value)}) %}\n    {% endfor %}\n\n    {% set column_dict = {\"name\": column_name, \"description\": column_description, \"meta\": meta_dict} %}\n    {% do column_dicts.append(column_dict) %}\n  {% endfor %}\n\n  {% set schema_dict = {\n    \"version\": 2,\n    \"models\": [\n      {\n        \"name\": relation_name,\n        \"description\": model_description,\n        \"columns\": column_dicts\n      }\n    ]\n  } %}\n  {% set schema_yaml = toyaml(schema_dict) %}\n\n  {{ log(schema_yaml, info=True) }}\n  {% do return(schema_dict) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_profiler.get_profile_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.064493, "supported_languages": null}, "macro.dbt_profiler.measure_row_count": {"name": "measure_row_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_row_count", "macro_sql": "\n\n{%- macro measure_row_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_row_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_row_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.066852, "supported_languages": null}, "macro.dbt_profiler.default__measure_row_count": {"name": "default__measure_row_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_row_count", "macro_sql": "{%- macro default__measure_row_count(column_name, data_type) -%}\ncast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.066981, "supported_languages": null}, "macro.dbt_profiler.measure_not_null_proportion": {"name": "measure_not_null_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_not_null_proportion", "macro_sql": "\n\n{%- macro measure_not_null_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_not_null_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.067202, "supported_languages": null}, "macro.dbt_profiler.default__measure_not_null_proportion": {"name": "default__measure_not_null_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_not_null_proportion", "macro_sql": "{%- macro default__measure_not_null_proportion(column_name, data_type) -%}\nsum(case when {{ adapter.quote(column_name) }} is null then 0 else 1 end) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.067383, "supported_languages": null}, "macro.dbt_profiler.measure_distinct_proportion": {"name": "measure_distinct_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_distinct_proportion", "macro_sql": "\n\n{%- macro measure_distinct_proportion(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_proportion\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_distinct_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.06757, "supported_languages": null}, "macro.dbt_profiler.default__measure_distinct_proportion": {"name": "default__measure_distinct_proportion", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_distinct_proportion", "macro_sql": "{%- macro default__measure_distinct_proportion(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) / cast(count(*) as {{ dbt.type_numeric() }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.067852, "supported_languages": null}, "macro.dbt_profiler.measure_distinct_count": {"name": "measure_distinct_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_distinct_count", "macro_sql": "\n\n{%- macro measure_distinct_count(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_distinct_count\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_distinct_count"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.068044, "supported_languages": null}, "macro.dbt_profiler.default__measure_distinct_count": {"name": "default__measure_distinct_count", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_distinct_count", "macro_sql": "{%- macro default__measure_distinct_count(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.068285, "supported_languages": null}, "macro.dbt_profiler.measure_is_unique": {"name": "measure_is_unique", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_is_unique", "macro_sql": "\n\n{%- macro measure_is_unique(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_is_unique\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_is_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0684779, "supported_languages": null}, "macro.dbt_profiler.default__measure_is_unique": {"name": "default__measure_is_unique", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_is_unique", "macro_sql": "{%- macro default__measure_is_unique(column_name, data_type) -%}\n{%- if not dbt_profiler.is_struct_dtype(data_type) -%}\n    count(distinct {{ adapter.quote(column_name) }}) = count(*)\n{%- else -%}\n    null\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_struct_dtype"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.06868, "supported_languages": null}, "macro.dbt_profiler.sqlserver__measure_is_unique": {"name": "sqlserver__measure_is_unique", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sqlserver__measure_is_unique", "macro_sql": "{%- macro sqlserver__measure_is_unique(column_name, data_type) -%}\ncase when count(distinct {{ adapter.quote(column_name) }}) = count(*) then 1 else 0 end\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.068806, "supported_languages": null}, "macro.dbt_profiler.measure_min": {"name": "measure_min", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_min", "macro_sql": "\n\n{%- macro measure_min(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_min\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_min"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.068987, "supported_languages": null}, "macro.dbt_profiler.default__measure_min": {"name": "default__measure_min", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_min", "macro_sql": "{%- macro default__measure_min(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(min({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_date_or_time_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.069332, "supported_languages": null}, "macro.dbt_profiler.measure_max": {"name": "measure_max", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_max", "macro_sql": "\n\n{%- macro measure_max(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_max\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_max"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0696058, "supported_languages": null}, "macro.dbt_profiler.default__measure_max": {"name": "default__measure_max", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_max", "macro_sql": "{%- macro default__measure_max(column_name, data_type) -%}\n{%- if (dbt_profiler.is_numeric_dtype(data_type) or dbt_profiler.is_date_or_time_dtype(data_type)) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    cast(max({{ adapter.quote(column_name) }}) as {{ dbt_profiler.type_string() }})\n{%- else -%}\n    cast(null as {{ dbt_profiler.type_string() }})\n{%- endif -%}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_date_or_time_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt_profiler.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.069985, "supported_languages": null}, "macro.dbt_profiler.measure_avg": {"name": "measure_avg", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_avg", "macro_sql": "\n\n{%- macro measure_avg(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_avg\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_avg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.070189, "supported_languages": null}, "macro.dbt_profiler.default__measure_avg": {"name": "default__measure_avg", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_avg", "macro_sql": "{%- macro default__measure_avg(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    avg({{ adapter.quote(column_name) }})\n{%- elif dbt_profiler.is_logical_dtype(data_type) -%}\n    avg(case when {{ adapter.quote(column_name) }} then 1 else 0 end)\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt_profiler.is_logical_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.070567, "supported_languages": null}, "macro.dbt_profiler.redshift__measure_avg": {"name": "redshift__measure_avg", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.redshift__measure_avg", "macro_sql": "{%- macro redshift__measure_avg(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    avg({{ adapter.quote(column_name) }}::float)\n{%- elif dbt_profiler.is_logical_dtype(data_type) -%}\n    avg(case when {{ adapter.quote(column_name) }} then 1.0 else 0.0 end)\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt_profiler.is_logical_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.070935, "supported_languages": null}, "macro.dbt_profiler.measure_median": {"name": "measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_median", "macro_sql": "\n\n{%- macro measure_median(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_median\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.bigquery__measure_median"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.071211, "supported_languages": null}, "macro.dbt_profiler.default__measure_median": {"name": "default__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_median", "macro_sql": "{%- macro default__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    median({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.071487, "supported_languages": null}, "macro.dbt_profiler.bigquery__measure_median": {"name": "bigquery__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.bigquery__measure_median", "macro_sql": "{%- macro bigquery__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    APPROX_QUANTILES({{ adapter.quote(column_name) }}, 100)[OFFSET(50)]\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0718122, "supported_languages": null}, "macro.dbt_profiler.postgres__measure_median": {"name": "postgres__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.postgres__measure_median", "macro_sql": "{%- macro postgres__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont(0.5) within group (order by {{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0720892, "supported_languages": null}, "macro.dbt_profiler.sql_server__measure_median": {"name": "sql_server__measure_median", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sql_server__measure_median", "macro_sql": "{%- macro sql_server__measure_median(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    percentile_cont({{ adapter.quote(column_name) }}, 0.5) over ()\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.07236, "supported_languages": null}, "macro.dbt_profiler.measure_std_dev_population": {"name": "measure_std_dev_population", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_std_dev_population", "macro_sql": "\n\n{%- macro measure_std_dev_population(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_population\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_std_dev_population"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.072542, "supported_languages": null}, "macro.dbt_profiler.default__measure_std_dev_population": {"name": "default__measure_std_dev_population", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_std_dev_population", "macro_sql": "{%- macro default__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_pop({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.072803, "supported_languages": null}, "macro.dbt_profiler.sqlserver__measure_std_dev_population": {"name": "sqlserver__measure_std_dev_population", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sqlserver__measure_std_dev_population", "macro_sql": "{%- macro sqlserver__measure_std_dev_population(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdevp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.073028, "supported_languages": null}, "macro.dbt_profiler.measure_std_dev_sample": {"name": "measure_std_dev_sample", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.measure_std_dev_sample", "macro_sql": "\n\n{%- macro measure_std_dev_sample(column_name, data_type) -%}\n  {{ return(adapter.dispatch(\"measure_std_dev_sample\", macro_namespace=\"dbt_profiler\")(column_name, data_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.default__measure_std_dev_sample"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.073215, "supported_languages": null}, "macro.dbt_profiler.default__measure_std_dev_sample": {"name": "default__measure_std_dev_sample", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.default__measure_std_dev_sample", "macro_sql": "{%- macro default__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) and not dbt_profiler.is_struct_dtype(data_type) -%}\n    stddev_samp({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt_profiler.is_struct_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.073477, "supported_languages": null}, "macro.dbt_profiler.sqlserver__measure_std_dev_sample": {"name": "sqlserver__measure_std_dev_sample", "resource_type": "macro", "package_name": "dbt_profiler", "path": "macros/measures.sql", "original_file_path": "macros/measures.sql", "unique_id": "macro.dbt_profiler.sqlserver__measure_std_dev_sample", "macro_sql": "{%- macro sqlserver__measure_std_dev_sample(column_name, data_type) -%}\n\n{%- if dbt_profiler.is_numeric_dtype(data_type) -%}\n    stdev({{ adapter.quote(column_name) }})\n{%- else -%}\n    cast(null as {{ dbt.type_numeric() }})\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_profiler.is_numeric_dtype", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0737002, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.078578, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.079262, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.08026, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0811892, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.081877, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0826838, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.082876, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.082974, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0859342, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.093154, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.093353, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.093427, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.093995, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.095455, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.095778, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.096032, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.096281, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.096591, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.0967832, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.096981, "supported_languages": null}, "macro.testgen.get_test_suggestions": {"name": "get_test_suggestions", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_aggregation/get_test_suggestions.sql", "original_file_path": "macros/test_aggregation/get_test_suggestions.sql", "unique_id": "macro.testgen.get_test_suggestions", "macro_sql": "{% macro get_test_suggestions(\n        table_relation,\n        sample = false,\n        limit = 10000,\n        resource_type = \"models\",\n        column_config = {},\n        exclude_types = [],\n        exclude_cols = [],\n        tests = [\"uniqueness\", \"accepted_values\", \"range\", \"string_length\", \"recency\"],\n        uniqueness_composite_key_length = 1,\n        accepted_values_max_cardinality = 5,\n        range_stddevs = 0,\n        string_length_stddevs = 0,\n        recency_stddevs = 1,\n        dbt_config = None,\n        return_object = false\n    ) %}\n    {# Run macro for the specific target DB #}\n    {% if execute %}\n        {% if \"uniqueness\" in tests %}\n            {% set dbt_config = testgen.get_uniqueness_test_suggestions(\n                table_relation=table_relation,\n                sample=sample,\n                limit=limit,\n                resource_type=resource_type,\n                column_config=column_config,\n                exclude_types=exclude_types,\n                exclude_cols=exclude_cols,\n                composite_key_length=uniqueness_composite_key_length,\n                dbt_config=dbt_config\n            ) %}\n        {% endif %}\n\n        {% if \"accepted_values\" in tests %}\n            {% set dbt_config = testgen.get_accepted_values_test_suggestions(\n                table_relation=table_relation,\n                sample=sample,\n                limit=limit,\n                resource_type=resource_type,\n                column_config=column_config,\n                exclude_types=exclude_types,\n                exclude_cols=exclude_cols,\n                max_cardinality=accepted_values_max_cardinality,\n                dbt_config=dbt_config\n            ) %}\n        {% endif %}\n\n        {% if \"range\" in tests %}\n            {% set dbt_config = testgen.get_range_test_suggestions(\n                table_relation=table_relation,\n                sample=sample,\n                limit=limit,\n                resource_type=resource_type,\n                column_config=column_config,\n                exclude_types=exclude_types,\n                exclude_cols=exclude_cols,\n                stddevs=range_stddevs,\n                dbt_config=dbt_config\n            ) %}\n        {% endif %}\n\n        {% if \"string_length\" in tests %}\n            {% set dbt_config = testgen.get_string_length_test_suggestions(\n                table_relation=table_relation,\n                sample=sample,\n                limit=limit,\n                resource_type=resource_type,\n                column_config=column_config,\n                exclude_types=exclude_types,\n                exclude_cols=exclude_cols,\n                stddevs=string_length_stddevs,\n                dbt_config=dbt_config\n            ) %}\n        {% endif %}\n\n        {% if \"recency\" in tests %}\n            {% set dbt_config = testgen.get_recency_test_suggestions(\n                table_relation=table_relation,\n                sample=sample,\n                limit=limit,\n                resource_type=resource_type,\n                column_config=column_config,\n                exclude_types=exclude_types,\n                exclude_cols=exclude_cols,\n                stddevs=recency_stddevs,\n                dbt_config=dbt_config\n            ) %}\n        {% endif %}\n\n        {% if return_object %}\n            {{ return(dbt_config) }}\n        {% else %}\n            {% set the_yaml = testgen.to_yaml(dbt_config) %}\n            {{ print(the_yaml) }}\n            {{ return(the_yaml) }}\n        {% endif %}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.testgen.get_uniqueness_test_suggestions", "macro.testgen.get_accepted_values_test_suggestions", "macro.testgen.get_range_test_suggestions", "macro.testgen.get_string_length_test_suggestions", "macro.testgen.get_recency_test_suggestions", "macro.testgen.to_yaml"]}, "description": "Generates YAML schema file that includes tests for your data", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "testgen://macros/schema.yml", "arguments": [{"name": "table_relation", "type": "Relation", "description": "The [dbt Relation](https://docs.getdbt.com/reference/dbt-classes#relation) \nyou wish to generate tests for.\nExample: ref(\"mymodel\")\n"}, {"name": "sample", "type": "bool", "description": "Take a random sample when using the `limit` argument"}, {"name": "limit", "type": "integer", "description": "Use only this number of records to generate tests."}, {"name": "resource_type", "type": "string", "description": "The type of resource that `table_relation` is - 'models', 'seeds', or 'sources'"}, {"name": "column_config", "type": "dict", "description": "Configurations to set on columns. Example - {'quote': true}"}, {"name": "exclude_types", "type": "list", "description": "Column types to exclude from tests."}, {"name": "exclude_cols", "type": "list", "description": "Columns to exclude from tests."}, {"name": "tags", "type": "list", "description": "Tags to put on the tests."}, {"name": "tests", "type": "list", "description": "Types of tests to generate. Example: ['uniqueness', 'accepted_values', 'range', 'string_length', 'recency']"}, {"name": "uniqueness_composite_key_length", "type": "integer", "description": "Max length of the composite key for uniqueness tests. Default value is 1."}, {"name": "accepted_values_max_cardinality", "type": "integer", "description": "Max cardinality of column to include in generated tests. Default value is 5."}, {"name": "range_stddevs", "type": "integer", "description": "Number of standard deviations to add to the range in the generated range tests. Default value is 0."}, {"name": "string_length_stddevs", "type": "integer", "description": "Number of standard deviations to add to the string length range in the generated string_length tests. Default value is 0."}, {"name": "recency_stddevs", "type": "integer", "description": "Number of standard deviations to add to the recency interval in the generated recency tests. Default value is 1."}, {"name": "dbt_config", "type": "dict", "description": "Existing dbt_config dict to merge generated tests into."}, {"name": "return_object", "type": "bool", "description": "Return the DBT Schema file as a dict object instead of printing YAML."}], "created_at": 1714072384.0163789, "supported_languages": null}, "macro.testgen.get_string_length_test_suggestions": {"name": "get_string_length_test_suggestions", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_string_length_test_suggestions.sql", "original_file_path": "macros/test_generation/get_string_length_test_suggestions.sql", "unique_id": "macro.testgen.get_string_length_test_suggestions", "macro_sql": "{% macro get_string_length_test_suggestions(\n        table_relation,\n        sample = false,\n        limit = None,\n        resource_type = \"models\",\n        column_config = {},\n        exclude_types = [],\n        exclude_cols = [],\n        stddevs = 0,\n        dbt_config = None\n    ) %}\n    {# Run macro for the specific target DB #}\n    {% if execute %}\n        {{ return(adapter.dispatch('get_string_length_test_suggestions', 'testgen')(table_relation, sample, limit, resource_type, column_config, exclude_types, exclude_cols, stddevs, dbt_config, **kwargs)) }}\n    {% endif%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.testgen.default__get_string_length_test_suggestions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1022851, "supported_languages": null}, "macro.testgen.default__get_string_length_test_suggestions": {"name": "default__get_string_length_test_suggestions", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_string_length_test_suggestions.sql", "original_file_path": "macros/test_generation/get_string_length_test_suggestions.sql", "unique_id": "macro.testgen.default__get_string_length_test_suggestions", "macro_sql": "{% macro default__get_string_length_test_suggestions(\n        table_relation,\n        sample = false,\n        limit = None,\n        resource_type = \"models\",\n        column_config = {},\n        exclude_types = [],\n        exclude_cols = [],\n        stddevs = 0,\n        dbt_config = None\n    ) \n%}\n    {% set columns = adapter.get_columns_in_relation(table_relation) %}\n    {% set columns = testgen.exclude_column_types(columns, exclude_types) %}\n    {% set columns = testgen.exclude_column_names(columns, exclude_cols) %}\n\n    {# {{ print(columns) }} #}\n\n    {% set string_cols = [] %}\n    {% for column in columns %}\n        {# {{ print(column.data_type) }} #}\n        {% if column.is_string() or column.data_type|lower in [\"string\"] %}\n            {% do string_cols.append(column) %}\n        {% endif %}\n    {% endfor %}\n\n    {# {{ print(string_cols) }} #}\n\n    {% if string_cols|length == 0 %}\n        {{ return(dbt_config) }}\n    {% endif %}\n\n    {% if limit != None %}\n        {% if sample == true %}\n            {% set limit_stmt = \"ORDER BY \" ~ testgen.get_random_function() ~ \"() LIMIT \" ~ limit %}\n        {% else %}\n            {% set limit_stmt = \"LIMIT \" ~ limit %}\n        {% endif %}\n    {% else %}\n        {% set limit_stmt = \"\" %}\n    {% endif %}\n\n    {% set min_max_exprs = [] %}\n    {% for column in string_cols %}\n        {% do min_max_exprs.append(\n            \"SELECT '\" ~ column.column ~ \"' AS COLNAME, \" ~ \n                \"MIN(LENGTH(\" ~ adapter.quote(column.column) ~ \")) as COL_MIN, \" ~ \n                \"MAX(LENGTH(\" ~ adapter.quote(column.column) ~ \")) as COL_MAX, \" ~ \n                \"STDDEV(LENGTH(\" ~ adapter.quote(column.column) ~ \")) as COL_STDDEV, \" ~ \n                loop.index ~ \" AS ORDERING \" ~ \n            \"FROM base \n            WHERE \" ~ adapter.quote(column.column) ~ \" IS NOT NULL\"\n        ) %}\n    {% endfor %}\n\n\n    {% set min_max_sql %}\n        WITH base AS (\n            SELECT * FROM {{ table_relation }}\n            {{ limit_stmt }}\n        )\n        SELECT * FROM (\n            {{ min_max_exprs | join(\"\\nUNION ALL\\n\") }}\n        ) t1\n        ORDER BY ORDERING ASC\n    {% endset %}\n\n    {% set results = testgen.query_as_list(min_max_sql) %}\n\n    {# {{ print(results) }} #}\n\n    {% set column_tests = [] %}\n    {% for result in results %}\n\n        {# {{ print(result) }} #}\n\n        {% set min_val = testgen.cast_number(result[1]) %}\n        {% set max_val = testgen.cast_number(result[2]) %}\n        {% set stddev = testgen.cast_number(result[3]) %}\n\n        {% if min_val == max_val %}\n            {% set test = {\n                    \"dbt_expectations.expect_column_value_lengths_to_equal\": {\n                        \"value\": min_val,\n                        \"row_condition\": adapter.quote(result[0]) ~ \" is not null\"\n                    }\n                }\n            %}\n        {% else %}\n            {% set min_val = min_val - stddevs*stddev %}\n            {% set max_val = max_val + stddevs*stddev %}\n            {% if min_val < 0 %}\n                {% set min_val = 0 %}\n            {% endif %}\n            {% set test = {\n                    \"dbt_expectations.expect_column_value_lengths_to_be_between\": {\n                        \"min_value\": testgen.cast_number(min_val),\n                        \"max_value\": testgen.cast_number(max_val),\n                        \"row_condition\": adapter.quote(result[0]) ~ \" is not null\"\n                    }\n                }\n            %}\n        {% endif %}\n\n        {% set col_config = {\n                \"name\": result[0],\n                \"tests\": [test]\n            }\n        %}\n\n        {% for k,v in column_config.items() %}\n            {% do col_config.update({k: v}) %}\n        {% endfor %}\n\n        {% do column_tests.append(col_config) %}\n    {% endfor %}\n\n    {% set model = {\"name\": table_relation.identifier,  \"columns\": column_tests} %}\n\n    {% set new_dbt_config = {resource_type: [model]} %}\n\n    {% set merged_dbt_config = testgen.merge_dbt_configs(dbt_config, new_dbt_config) %}\n\n    {% do return(merged_dbt_config) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.testgen.exclude_column_types", "macro.testgen.exclude_column_names", "macro.testgen.get_random_function", "macro.testgen.query_as_list", "macro.testgen.cast_number", "macro.testgen.merge_dbt_configs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.105736, "supported_languages": null}, "macro.testgen.sql_agg_array": {"name": "sql_agg_array", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "original_file_path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "unique_id": "macro.testgen.sql_agg_array", "macro_sql": "{% macro sql_agg_array(colname) %}\n     {{ return(adapter.dispatch('sql_agg_array', 'testgen')(colname)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.testgen.bigquery__sql_agg_array"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.107316, "supported_languages": null}, "macro.testgen.default__sql_agg_array": {"name": "default__sql_agg_array", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "original_file_path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "unique_id": "macro.testgen.default__sql_agg_array", "macro_sql": "{% macro default__sql_agg_array(colname) %}\n    {{ return(\"array_agg(\" ~ adapter.quote(colname) ~ \"::VARCHAR)\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.107502, "supported_languages": null}, "macro.testgen.redshift__sql_agg_array": {"name": "redshift__sql_agg_array", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "original_file_path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "unique_id": "macro.testgen.redshift__sql_agg_array", "macro_sql": "{% macro redshift__sql_agg_array(colname) %}\n    {{ return(\"split_to_array(listagg(\" ~ adapter.quote(colname) ~ \"::VARCHAR, '|'), '|') \") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.107667, "supported_languages": null}, "macro.testgen.bigquery__sql_agg_array": {"name": "bigquery__sql_agg_array", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "original_file_path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "unique_id": "macro.testgen.bigquery__sql_agg_array", "macro_sql": "{% macro bigquery__sql_agg_array(colname) %}\n    {{ return(\"array_agg(CAST(\" ~ adapter.quote(colname) ~ \" AS STRING))\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.107832, "supported_languages": null}, "macro.testgen.databricks__sql_agg_array": {"name": "databricks__sql_agg_array", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "original_file_path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "unique_id": "macro.testgen.databricks__sql_agg_array", "macro_sql": "{% macro databricks__sql_agg_array(colname) %}\n    {{ return(\"to_json(array_agg(CAST(\" ~ adapter.quote(colname) ~ \" AS STRING)))\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.108031, "supported_languages": null}, "macro.testgen.get_accepted_values_test_suggestions": {"name": "get_accepted_values_test_suggestions", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "original_file_path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "unique_id": "macro.testgen.get_accepted_values_test_suggestions", "macro_sql": "{% macro get_accepted_values_test_suggestions(\n        table_relation,\n        sample = false,\n        limit = None,\n        resource_type = \"models\",\n        column_config = {},\n        exclude_types = [\"float\"],\n        exclude_cols = [],\n        max_cardinality = 5,\n        dbt_config = None\n    ) %}\n    {# Run macro for the specific target DB #}\n    {% if execute %}\n        {{ return(\n            adapter.dispatch('get_accepted_values_test_suggestions', 'testgen')(\n                table_relation, \n                sample, \n                limit, \n                resource_type,\n                column_config,\n                exclude_types, \n                exclude_cols, \n                max_cardinality, \n                dbt_config,\n                **kwargs)\n            ) \n        }}\n    {% endif%}\n{% endmacro %}", "depends_on": {"macros": ["macro.testgen.default__get_accepted_values_test_suggestions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.108692, "supported_languages": null}, "macro.testgen.default__get_accepted_values_test_suggestions": {"name": "default__get_accepted_values_test_suggestions", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "original_file_path": "macros/test_generation/get_accepted_values_test_suggestions.sql", "unique_id": "macro.testgen.default__get_accepted_values_test_suggestions", "macro_sql": "{% macro default__get_accepted_values_test_suggestions(\n        table_relation,\n        sample = false,\n        limit = None,\n        resource_type = \"models\",\n        column_config = {},\n        exclude_types = [\"float\"],\n        exclude_cols = [],\n        max_cardinality = 5,\n        dbt_config = None\n    ) \n%}\n    {% set columns = adapter.get_columns_in_relation(table_relation) %}\n    {% set columns = testgen.exclude_column_types(columns, exclude_types) %}\n    {% set columns = testgen.exclude_column_names(columns, exclude_cols) %}\n\n    {# {{ print(columns) }} #}\n    {% if columns|length == 0 %}\n        {{ return(dbt_config) }}\n    {% endif %}\n\n    {# {{ print(columns) }} #}\n\n    {% set count_distinct_exprs = [] %}\n    {% for column in columns %}\n        {# Use capitals for colnames because of snowflake #}\n        {% do count_distinct_exprs.append(\n            \"\n            select \" ~ loop.index ~ \" AS ORDERING, \n                '\" ~ column.column ~ \"' AS COLNAME, \n                count(1) as CARDINALITY, \" ~ \n                testgen.sql_agg_array(column.column) ~ \" AS UNIQUE_VALUES\n            from (\n                select \" ~ adapter.quote(column.column) ~ \"\n                from base\n                group by \" ~ adapter.quote(column.column) ~ \"\n            ) t1\n            \"\n        ) %}\n    {% endfor %}\n\n    {% if limit != None %}\n        {% if sample == true %}\n            {% set limit_stmt = \"ORDER BY \" ~ testgen.get_random_function() ~ \"() LIMIT \" ~ limit %}\n        {% else %}\n            {% set limit_stmt = \"LIMIT \" ~ limit %}\n        {% endif %}\n    {% else %}\n        {% set limit_stmt = \"\" %}\n    {% endif %}\n\n    {% set count_distinct_sql %}\n        WITH base AS (\n            SELECT * FROM {{ table_relation }}\n            {{ limit_stmt }}\n        )\n        SELECT * FROM (\n            {{ count_distinct_exprs | join(\"\\nUNION ALL\\n\") }}\n        ) t2\n        WHERE CARDINALITY <= {{ max_cardinality|string }}\n        ORDER BY ORDERING ASC\n    {% endset %}\n\n    {# {{ print(count_distinct_sql) }} #}\n\n    {% set cardinality_results = testgen.query_as_list(count_distinct_sql) %}\n\n    {# {{ print(cardinality_results) }} #}\n\n    {% set column_tests = [] %}\n    {% for cardinality_result in cardinality_results %}\n\n        {# {{ print(cardinality_result.COLNAME) }} #}\n\n        {% set col_config = {\n                \"name\": cardinality_result[1],\n                \"tests\": [\n                    {\"accepted_values\": {\"values\": fromjson(cardinality_result[3])|sort}}\n                ]\n            }\n        %}\n\n        {% for k,v in column_config.items() %}\n            {% do col_config.update({k: v}) %}\n        {% endfor %}\n\n        {% do column_tests.append(col_config) %}\n    {% endfor %}\n\n    {% set new_dbt_config = {resource_type: [{\"name\": table_relation.identifier, \"columns\": column_tests}]} %}\n\n    {# {{ print(new_dbt_config) }} #}\n\n    {% set merged_dbt_config = testgen.merge_dbt_configs(dbt_config, new_dbt_config) %}\n\n    {% do return(merged_dbt_config) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.testgen.exclude_column_types", "macro.testgen.exclude_column_names", "macro.testgen.sql_agg_array", "macro.testgen.get_random_function", "macro.testgen.query_as_list", "macro.testgen.merge_dbt_configs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.111184, "supported_languages": null}, "macro.testgen.get_recency_test_suggestions": {"name": "get_recency_test_suggestions", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_recency_test_suggestions.sql", "original_file_path": "macros/test_generation/get_recency_test_suggestions.sql", "unique_id": "macro.testgen.get_recency_test_suggestions", "macro_sql": "{% macro get_recency_test_suggestions(\n        table_relation,\n        sample = false,\n        limit = None,\n        resource_type = \"models\",\n        column_config = {},\n        exclude_types = [],\n        exclude_cols = [],\n        stddevs = 1,\n        dbt_config = None\n    ) %}\n    {# Run macro for the specific target DB #}\n    {% if execute %}\n        {{ return(\n            adapter.dispatch('get_recency_test_suggestions', 'testgen')(\n                table_relation, \n                sample, \n                limit, \n                resource_type,\n                column_config,\n                exclude_types, \n                exclude_cols,\n                stddevs,\n                dbt_config,\n                **kwargs)\n            ) \n        }}\n    {% endif%}\n{% endmacro %}", "depends_on": {"macros": ["macro.testgen.default__get_recency_test_suggestions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1134322, "supported_languages": null}, "macro.testgen.default__get_recency_test_suggestions": {"name": "default__get_recency_test_suggestions", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_recency_test_suggestions.sql", "original_file_path": "macros/test_generation/get_recency_test_suggestions.sql", "unique_id": "macro.testgen.default__get_recency_test_suggestions", "macro_sql": "{% macro default__get_recency_test_suggestions(\n        table_relation,\n        sample = false,\n        limit = None,\n        resource_type = \"models\",\n        column_config = {},\n        exclude_types = [],\n        exclude_cols = [],\n        stddevs = 1,\n        dbt_config = None\n    ) \n%}\n    {% set columns = adapter.get_columns_in_relation(table_relation) %}\n    {% set columns = testgen.exclude_column_types(columns, exclude_types) %}\n    {% set columns = testgen.exclude_column_names(columns, exclude_cols) %}\n\n    {% set timestamp_cols = [] %}\n    {% for col in columns %}\n        {% if col.data_type|lower in [\"timestamp\", \"date\"] %}\n            {% do timestamp_cols.append(col) %}\n        {% endif %}\n    {% endfor %}\n\n    {% if timestamp_cols|length == 0 %}\n        {{ return(dbt_config) }}\n    {% endif %}\n\n    {% if limit != None %}\n        {% if sample == true %}\n            {% set limit_stmt = \"ORDER BY \" ~ testgen.get_random_function() ~ \"() LIMIT \" ~ limit %}\n        {% else %}\n            {% set limit_stmt = \"LIMIT \" ~ limit %}\n        {% endif %}\n    {% else %}\n        {% set limit_stmt = \"\" %}\n    {% endif %}\n\n    {% set timestep_exprs = [] %}\n    {% for col in timestamp_cols %}\n        {% set col_sql %}\n        SELECT \n            MAX(minutes_diff) AS max_minutes_diff,\n            AVG(minutes_diff) AS avg_minutes_diff,\n            STDDEV(minutes_diff) AS stddev_minutes_diff,\n            {{ loop.index }} AS ordering\n        FROM (\n            SELECT \n                {{ dbt.datediff(\"LAG(\" ~ adapter.quote(col.column) ~ \", 1) OVER(ORDER BY \" ~ adapter.quote(col.column) ~ \")\", adapter.quote(col.column), \"minute\") }} AS minutes_diff\n            FROM  base\n        ) t2\n        WHERE minutes_diff <> 0 \n        {% endset %}\n        {% do timestep_exprs.append(col_sql) %}\n    {% endfor %}\n\n    {% set timestep_sql %}\n    WITH base AS (\n            SELECT * FROM {{ table_relation }}\n            {{ limit_stmt }}\n        )\n    {{ timestep_exprs | join(\"\\nUNION ALL\\n\") }}\n    ORDER BY ordering ASC\n    {% endset %}\n\n    {# {{ print(timestep_sql) }} #}\n\n    {% set recency_results = zip(timestamp_cols, testgen.query_as_list(timestep_sql)) %}\n\n    {% set table_tests = [] %}\n    {% for result in recency_results %}\n        {% set max_timestep = result[1][0] %}\n        {% set avg_timestep = result[1][1] %}\n        {% set stddev_timestep = result[1][2] %}\n\n        {% set interval = avg_timestep + (stddev_timestep*stddevs) %}\n        \n        {% if interval >= 60*24 %}\n            {% set datepart = \"day\" %}\n            {% set interval = interval / (60*24) %}\n        {% elif interval >= 60 %}\n            {% set datepart = \"hour\" %}\n            {% set interval = interval / 60 %}\n        {% else %}\n            {% set datepart = \"minute\" %}\n        {% endif %}\n\n        {% set test_config = {\n            \"dbt_utils.recency\": {\n                \"field\": result[0].column,\n                \"datepart\": datepart,\n                \"interval\": interval|int\n            }\n        } %}\n        {% do table_tests.append(test_config) %}\n    {% endfor %}\n\n\n\n    {% set model = {\"name\": table_relation.identifier} %}\n    {% if table_tests != [] %}\n        {% do model.update({\"tests\": table_tests}) %} \n    {% endif %}\n\n    {% set new_dbt_config = {resource_type: [model]} %}\n\n    {# {{ print(new_dbt_config) }} #}\n\n    {% set merged_dbt_config = testgen.merge_dbt_configs(dbt_config, new_dbt_config) %}\n\n    {% do return(merged_dbt_config) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.testgen.exclude_column_types", "macro.testgen.exclude_column_names", "macro.testgen.get_random_function", "macro.dbt.datediff", "macro.testgen.query_as_list", "macro.testgen.merge_dbt_configs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.116462, "supported_languages": null}, "macro.testgen.get_uniqueness_test_suggestions": {"name": "get_uniqueness_test_suggestions", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_uniqueness_test_suggestions.sql", "original_file_path": "macros/test_generation/get_uniqueness_test_suggestions.sql", "unique_id": "macro.testgen.get_uniqueness_test_suggestions", "macro_sql": "{% macro get_uniqueness_test_suggestions(\n        table_relation,\n        sample = false,\n        limit = None,\n        resource_type = \"models\",\n        column_config = {},\n        exclude_types = [\"float\"],\n        exclude_cols = [],\n        composite_key_length = 1,\n        dbt_config = None\n    ) %}\n    {# Run macro for the specific target DB #}\n    {% if execute %}\n        {{ return(\n            adapter.dispatch('get_uniqueness_test_suggestions', 'testgen')(table_relation, sample, limit, resource_type, column_config, exclude_types, exclude_cols, composite_key_length, dbt_config, **kwargs)\n        ) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.testgen.default__get_uniqueness_test_suggestions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1195982, "supported_languages": null}, "macro.testgen.default__get_uniqueness_test_suggestions": {"name": "default__get_uniqueness_test_suggestions", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_uniqueness_test_suggestions.sql", "original_file_path": "macros/test_generation/get_uniqueness_test_suggestions.sql", "unique_id": "macro.testgen.default__get_uniqueness_test_suggestions", "macro_sql": "{% macro default__get_uniqueness_test_suggestions(\n        table_relation,\n        sample = false,\n        limit = None,\n        resource_type = \"models\",\n        column_config = {},\n        exclude_types = [\"float\"],\n        exclude_cols = [],\n        composite_key_length = 1,\n        dbt_config = None\n    ) \n%}\n    {% set columns = adapter.get_columns_in_relation(table_relation) %}\n    {% set columns = testgen.exclude_column_types(columns, exclude_types) %}\n    {% set columns = testgen.exclude_column_names(columns, exclude_cols) %}\n\n    {% set column_names = [] %}\n    {% for col in columns %}\n        {% do column_names.append(col.column) %}\n    {% endfor %}\n\n    {% if column_names|length == 0 %}\n        {{ return(dbt_config) }}\n    {% endif %}\n\n    {% set column_combinations = [] %}\n    {% for i in range(composite_key_length) %}\n        {% for col_combo in modules.itertools.combinations(column_names, i + 1)%}\n            {% do column_combinations.append(col_combo) %}\n        {% endfor %}\n    {% endfor %}\n\n    {# {{ print(column_combinations) }} #}\n\n    {% if limit %}\n        {% set limit_expr = \"LIMIT \" ~ limit|string %}\n    {% else %}\n        {% set limit_expr = \"\" %}\n    {% endif %}\n\n    {% if limit != None %}\n        {% if sample == true %}\n            {% set limit_stmt = \"ORDER BY \" ~ testgen.get_random_function() ~ \"() LIMIT \" ~ limit %}\n        {% else %}\n            {% set limit_stmt = \"LIMIT \" ~ limit %}\n        {% endif %}\n    {% else %}\n        {% set limit_stmt = \"\" %}\n    {% endif %}\n\n    {% set count_distinct_exprs = [] %}\n    {% for column_combo in column_combinations %}\n        {% set column_combo_quoted = [] %}\n        {% for col in column_combo %}\n            {% do column_combo_quoted.append(adapter.quote(col))%}\n        {% endfor %}\n        {% do count_distinct_exprs.append(\n            \"SELECT \" ~ loop.index ~ \" AS ORDERING, count(1) AS CARDINALITY\n            from (\n                SELECT 1 FROM base\n                GROUP BY \" ~ column_combo_quoted|join(\", \") ~ \"\n            ) t\"\n        ) %}\n    {% endfor %}\n\n    {% set count_distinct_sql %}\n    WITH base AS (\n            SELECT * FROM {{ table_relation }}\n            {{ limit_stmt }}\n        )\n    {{ count_distinct_exprs | join(\"\\nUNION ALL\\n\") }}\n    ORDER BY ordering ASC\n    {% endset %}\n\n    {% set count_sql %}\n        WITH base AS (\n            SELECT * FROM {{ table_relation }}\n            {{ limit_stmt }}\n        )\n        SELECT count(1) AS TABLE_COUNT FROM base\n    {% endset%}\n\n    {% set table_count = testgen.query_as_list(count_sql)[0][0] %}\n\n    {% set cardinality_results = zip(column_combinations, testgen.query_as_list(count_distinct_sql)) %}\n\n    {# {{ print(table_count) }}\n    {{ print(cardinality_results|list) }} #}\n\n    {% set unique_keys = [] %}\n    {% for cardinality_result in cardinality_results %}\n        {% if cardinality_result[1][1] == table_count %}\n            {# {{ print(cardinality_result) }} #}\n            {% do unique_keys.append(cardinality_result[0]) %}\n        {% endif %}\n    {% endfor %}\n\n\n    {# This needs to be refactored and pushed up to the query, so unnecessary distinct counts arent run #}\n    {% set deduped_unique_keys = [] %}\n    {% for unique_key in unique_keys %}\n        {% if unique_key|length == 1 %}\n            {% do deduped_unique_keys.append(unique_key) %}\n        {% else %}\n            {% set permutations = [] %}\n            {% for key_length in range(unique_key|length) %}\n                {% if key_length > 0: %}\n                    {% for perm in modules.itertools.permutations(unique_key, key_length) %}\n                        {% do permutations.append(perm) %}\n                    {% endfor %}\n                {% endif %}\n            {% endfor %}\n\n            {% set ns = namespace(already_accounted_for=false) %}\n            {% for perm in permutations %}\n                {% if perm in deduped_unique_keys %}\n                    {% set ns.already_accounted_for = true %}\n                {% endif %}\n            {% endfor %}\n\n            {% if not ns.already_accounted_for %}\n                {% do deduped_unique_keys.append(unique_key) %}\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n\n    {% set column_tests = [] %}\n    {% set table_tests = [] %}  \n    {% for unique_key in deduped_unique_keys %}\n        {% if unique_key|length == 1 %}\n            {# {% set tests = [\n                    {\"unique\": test_config},\n                    {\"not_null\": test_config}\n            ] %}\n\n            {% if test_config == {} %}\n                \n            {% endif %} #}\n\n            {% set tests = [\"unique\", \"not_null\"] %}\n\n            {% set col_config = {\n                    \"name\": unique_key[0],\n                    \"tests\": tests\n                }\n            %}\n\n            {% for k,v in column_config.items() %}\n                {% do col_config.update({k: v}) %}\n            {% endfor %}\n\n            {% do column_tests.append(col_config) %}\n        {% else %}\n\n            {% do table_tests.append({\n                \"dbt_utils.unique_combination_of_columns\": {\n                    \"combination_of_columns\": unique_key\n                }\n            }) %}\n        {% endif %}\n    {% endfor %}\n\n    {% set model = {\"name\": table_relation.identifier,  \"columns\": column_tests} %}\n    {% if table_tests != [] %}\n        {% do model.update({\"tests\": table_tests}) %} \n    {% endif %}\n\n    {# {{ print(model) }} #}\n\n    {% set new_dbt_config = {resource_type: [model]} %}\n\n    {# {{ print(dbt_config) }} #}\n\n    {% set merged_dbt_config = testgen.merge_dbt_configs(dbt_config, new_dbt_config) %}\n\n    {% do return(merged_dbt_config) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.testgen.exclude_column_types", "macro.testgen.exclude_column_names", "macro.testgen.get_random_function", "macro.testgen.query_as_list", "macro.testgen.merge_dbt_configs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1242251, "supported_languages": null}, "macro.testgen.get_range_test_suggestions": {"name": "get_range_test_suggestions", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_range_test_suggestions.sql", "original_file_path": "macros/test_generation/get_range_test_suggestions.sql", "unique_id": "macro.testgen.get_range_test_suggestions", "macro_sql": "{% macro get_range_test_suggestions(\n        table_relation,\n        sample = false,\n        limit = None,\n        resource_type = \"models\",\n        column_config = {},\n        exclude_types = [],\n        exclude_cols = [],\n        stddevs = 0,\n        dbt_config = None\n    ) %}\n    {# Run macro for the specific target DB #}\n    {% if execute %}\n        {{ return(adapter.dispatch('get_range_test_suggestions', 'testgen')(table_relation, sample, limit, resource_type, column_config, exclude_types, exclude_cols, stddevs, dbt_config, **kwargs)) }}\n    {% endif%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.testgen.default__get_range_test_suggestions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.127402, "supported_languages": null}, "macro.testgen.default__get_range_test_suggestions": {"name": "default__get_range_test_suggestions", "resource_type": "macro", "package_name": "testgen", "path": "macros/test_generation/get_range_test_suggestions.sql", "original_file_path": "macros/test_generation/get_range_test_suggestions.sql", "unique_id": "macro.testgen.default__get_range_test_suggestions", "macro_sql": "{% macro default__get_range_test_suggestions(\n        table_relation,\n        sample = false,\n        limit = None,\n        resource_type = \"models\",\n        column_config = {},\n        exclude_types = [],\n        exclude_cols = [],\n        stddevs = 0,\n        dbt_config = None\n    ) \n%}\n    {% set columns = adapter.get_columns_in_relation(table_relation) %}\n    {% set columns = testgen.exclude_column_types(columns, exclude_types) %}\n    {% set columns = testgen.exclude_column_names(columns, exclude_cols) %}\n\n    {% set number_cols = [] %}\n    {% for column in columns %}\n        {% if column.is_number() %}\n            {% do number_cols.append(column) %}\n        {% endif %}\n    {% endfor %}\n\n    {% if number_cols|length == 0 %}\n        {{ return(dbt_config) }}\n    {% endif %}\n\n    {% if limit != None %}\n        {% if sample == true %}\n            {% set limit_stmt = \"ORDER BY \" ~ testgen.get_random_function() ~ \"() LIMIT \" ~ limit %}\n        {% else %}\n            {% set limit_stmt = \"LIMIT \" ~ limit %}\n        {% endif %}\n    {% else %}\n        {% set limit_stmt = \"\" %}\n    {% endif %}\n\n    {% set min_max_exprs = [] %}\n    {% for column in number_cols %}\n        {% do min_max_exprs.append(\n            \"SELECT '\" ~ column.column ~ \"' AS COLNAME, \" ~ \n                \"MIN(\" ~ adapter.quote(column.column) ~ \") as COL_MIN, \" ~ \n                \"MAX(\" ~ adapter.quote(column.column) ~ \") as COL_MAX, \" ~ \n                \"STDDEV(\" ~ adapter.quote(column.column) ~ \") as COL_STDDEV, \" ~ \n                loop.index ~ \" AS ORDERING \" ~ \n            \"FROM base\"\n        ) %}\n    {% endfor %}\n\n\n    {% set min_max_sql %}\n        WITH base AS (\n            SELECT * FROM {{ table_relation }}\n            {{ limit_stmt }}\n        )\n        SELECT * FROM (\n            {{ min_max_exprs | join(\"\\nUNION ALL\\n\") }}\n        ) t1\n        ORDER BY ORDERING ASC\n    {% endset %}\n\n    {% set results = testgen.query_as_list(min_max_sql) %}\n\n    {% set column_tests = [] %}\n    {% for result in results %}\n        {% set min_val = testgen.cast_number(result[1]) %}\n        {% set max_val = testgen.cast_number(result[2]) %}\n        {% set stddev = testgen.cast_number(result[3]) %}\n        {% set col_config = {\n                \"name\": result[0],\n                \"tests\": [\n                    {\n                        \"dbt_utils.accepted_range\": {\n                            \"min_value\": testgen.cast_number(min_val - (stddevs*stddev / 2)),\n                            \"max_value\": testgen.cast_number(max_val + (stddevs*stddev / 2) )\n                        }\n                    }\n                ]\n            }\n        %}\n\n        {% for k,v in column_config.items() %}\n            {% do col_config.update({k: v}) %}\n        {% endfor %}\n\n        {% do column_tests.append(col_config) %}\n    {% endfor %}\n\n    {% set model = {\"name\": table_relation.identifier,  \"columns\": column_tests} %}\n\n    {% set new_dbt_config = {resource_type: [model]} %}\n\n    {% set merged_dbt_config = testgen.merge_dbt_configs(dbt_config, new_dbt_config) %}\n\n    {% do return(merged_dbt_config) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.testgen.exclude_column_types", "macro.testgen.exclude_column_names", "macro.testgen.get_random_function", "macro.testgen.query_as_list", "macro.testgen.cast_number", "macro.testgen.merge_dbt_configs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.130537, "supported_languages": null}, "macro.testgen.merge_dbt_configs": {"name": "merge_dbt_configs", "resource_type": "macro", "package_name": "testgen", "path": "macros/helpers/merge_dbt_configs.sql", "original_file_path": "macros/helpers/merge_dbt_configs.sql", "unique_id": "macro.testgen.merge_dbt_configs", "macro_sql": "{% macro merge_dbt_configs(dbt_config_1, dbt_config_2) %}\n    {% if dbt_config_1 == None %}\n        {{ return(dbt_config_2) }}\n    {% endif %}\n\n    {% if dbt_config_2 == None %}\n        {{ return(dbt_config_1) }}\n    {% endif %}\n\n    {% set new_config = {} %}\n\n    {# Want to preserve ordering, so don't use sets #}\n    {% set resource_types = [] %}\n    {# {{ print(dbt_config_1) }} #}\n    {% for resource_type in dbt_config_1.keys()|list + dbt_config_2.keys()|list %}\n        \n        {% if resource_type not in resource_types and resource_type in [\"models\", \"sources\", \"seeds\"] %}\n            {# {{ print(resource_type) }} #}\n            {% do resource_types.append(resource_type) %}\n        {% endif %}\n    {% endfor %}\n\n    {% for resource_type in resource_types %}\n        {% do new_config.update({resource_type: []}) %}\n\n        {% if resource_type not in dbt_config_1.keys() %}\n            {% do new_config.update({resource_type: dbt_config_2[resource_type]}) %}\n            \n        {% elif resource_type not in dbt_config_2.keys() %}\n            {% do new_config.update({resource_type: dbt_config_1[resource_type]}) %}\n        {% else %}\n            {% set model_names = [] %}\n\n            {% set config_1_model_lookup = {} %}\n            {% for model in dbt_config_1[resource_type] %}\n                {% do model_names.append(model[\"name\"]) %}\n                {% do config_1_model_lookup.update({model[\"name\"]: model}) %}\n            {% endfor %}\n\n            {% set config_2_model_lookup = {} %}\n            {% for model in dbt_config_2[resource_type] %}\n                {% if model[\"name\"] not in model_names %}\n                    {% do model_names.append(model[\"name\"]) %}\n                {% endif %}\n                {% do config_2_model_lookup.update({model[\"name\"]: model}) %}\n            {% endfor %}\n\n            {# {{ print(model_names) }} #}\n\n            {# {{ print(config_1_model_lookup) }} #}\n\n            {# {{ print(config_2_model_lookup) }} #}\n\n            {% set new_models = [] %}\n            {% for model_name in model_names %}\n                {% set model_tests = [] %}\n                {% if model_name in config_1_model_lookup.keys() %}\n                    {% if \"tests\" in config_1_model_lookup[model_name].keys() %}\n                        {% for model_test in config_1_model_lookup[model_name][\"tests\"] %}\n                            {% do model_tests.append(model_test) %}\n                        {% endfor %}\n                    {% endif %}\n                {% endif %}\n\n                {% if model_name in config_2_model_lookup.keys() %}\n                    {% if \"tests\" in config_2_model_lookup[model_name].keys() %}\n                        {% for model_test in config_2_model_lookup[model_name][\"tests\"] %}\n                            {% do model_tests.append(model_test) %}\n                        {% endfor %}\n                    {% endif %}\n                {% endif %}\n\n                {% set model = {\"name\": model_name} %}\n\n                {% if model_tests != [] %}\n                    {% do model.update({\"tests\": model_tests})%}\n                {% endif %}\n\n                {% set col_names = [] %}\n\n                {% set config_1_col_lookup = {} %}\n                {% if model_name in config_1_model_lookup.keys() %}\n                    {% for col in config_1_model_lookup[model_name][\"columns\"] %}\n                        {% do col_names.append(col[\"name\"]) %}\n                        {% do config_1_col_lookup.update({col[\"name\"]: col}) %}\n                    {% endfor %}\n                {% endif %}\n                \n                {% set config_2_col_lookup = {} %}\n                {% if model_name in config_2_model_lookup.keys() %}\n                    {% for col in config_2_model_lookup[model_name][\"columns\"] %}\n                        {% if col[\"name\"] not in col_names %}\n                            {% do col_names.append(col[\"name\"]) %}\n                        {% endif %}\n                        {% do config_2_col_lookup.update({col[\"name\"]: col}) %}\n                    {% endfor %}\n                {% endif %}\n\n                {% set new_columns = [] %}\n                {% for col_name in col_names %}\n                    {% set new_column = {\n                            \"name\": col_name\n                        }\n                    %}\n                    {% if col_name not in config_1_col_lookup.keys() %}\n                        {% for k, v in config_2_col_lookup[col_name].items() %}\n                            {% do new_column.update({k: v}) %}\n                        {% endfor %}\n                        {% set col_tests = config_2_col_lookup[col_name][\"tests\"] %}\n                    {% elif col_name not in config_2_col_lookup.keys() %}\n                        {% for k, v in config_1_col_lookup[col_name].items() %}\n                            {% do new_column.update({k: v}) %}\n                        {% endfor %}\n                        {% set col_tests = config_1_col_lookup[col_name][\"tests\"] %}\n                    {% else %}\n                        {% for k, v in config_1_col_lookup[col_name].items()|list + config_2_col_lookup[col_name].items()|list %}\n                            {% do new_column.update({k: v}) %}\n                        {% endfor %}\n                        {% set col_tests = config_1_col_lookup[col_name][\"tests\"] + config_2_col_lookup[col_name][\"tests\"] %}\n                    {% endif %}\n\n                    {% do new_column.update({\"tests\": col_tests}) %}\n\n                    {% do new_columns.append(new_column) %}\n                {% endfor %}\n\n                {% do model.update({\"columns\": new_columns})%}\n                \n                {% do new_models.append(model)%}\n            {% endfor %}\n        {% do new_config.update({resource_type: new_models}) %}\n        {% endif %}\n    {% endfor %}\n\n    {# {{ print(new_config) }} #}\n\n    \n\n    {{ return(new_config) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1420171, "supported_languages": null}, "macro.testgen.get_random_function": {"name": "get_random_function", "resource_type": "macro", "package_name": "testgen", "path": "macros/helpers/sql_functions.sql", "original_file_path": "macros/helpers/sql_functions.sql", "unique_id": "macro.testgen.get_random_function", "macro_sql": "{% macro get_random_function() %}\n    {{ return(adapter.dispatch('get_random_function', 'testgen')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.testgen.bigquery__get_random_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.142553, "supported_languages": null}, "macro.testgen.default__get_random_function": {"name": "default__get_random_function", "resource_type": "macro", "package_name": "testgen", "path": "macros/helpers/sql_functions.sql", "original_file_path": "macros/helpers/sql_functions.sql", "unique_id": "macro.testgen.default__get_random_function", "macro_sql": "{% macro default__get_random_function(colname) %}\n    {{ return(\"RANDOM\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.142692, "supported_languages": null}, "macro.testgen.bigquery__get_random_function": {"name": "bigquery__get_random_function", "resource_type": "macro", "package_name": "testgen", "path": "macros/helpers/sql_functions.sql", "original_file_path": "macros/helpers/sql_functions.sql", "unique_id": "macro.testgen.bigquery__get_random_function", "macro_sql": "{% macro bigquery__get_random_function(colname) %}\n    {{ return(\"RAND\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.142816, "supported_languages": null}, "macro.testgen.cast_number": {"name": "cast_number", "resource_type": "macro", "package_name": "testgen", "path": "macros/helpers/formatting.sql", "original_file_path": "macros/helpers/formatting.sql", "unique_id": "macro.testgen.cast_number", "macro_sql": "{% macro cast_number(number) %}\n    {% set number = number|string|float|string %}\n    {% if number[-2:] == '.0' %}\n        {% set number = number|int %}\n    {% else %}\n        {% if number|string %}\n\n        {% endif %}\n        {% set number = number|float %}\n    {% endif %}\n    {{ return(number) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1433759, "supported_languages": null}, "macro.testgen.query_as_list": {"name": "query_as_list", "resource_type": "macro", "package_name": "testgen", "path": "macros/helpers/database.sql", "original_file_path": "macros/helpers/database.sql", "unique_id": "macro.testgen.query_as_list", "macro_sql": "{% macro query_as_list(query) %}\n    {% set results = run_query(query) %}\n    {{ return(results.rows) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1436002, "supported_languages": null}, "macro.testgen.to_yaml": {"name": "to_yaml", "resource_type": "macro", "package_name": "testgen", "path": "macros/helpers/to_yaml.sql", "original_file_path": "macros/helpers/to_yaml.sql", "unique_id": "macro.testgen.to_yaml", "macro_sql": "{% macro to_yaml(the_obj) %}\n{{ return(toyaml(fromjson(tojson(the_obj)))) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.143798, "supported_languages": null}, "macro.testgen.exclude_column_types": {"name": "exclude_column_types", "resource_type": "macro", "package_name": "testgen", "path": "macros/helpers/columns.sql", "original_file_path": "macros/helpers/columns.sql", "unique_id": "macro.testgen.exclude_column_types", "macro_sql": "{% macro exclude_column_types(columns, exclude_types) %}\n    {% set filtered_columns = [] %}\n    {% for col in columns %}\n        {% if col.is_string() and \"string\" not in exclude_types %}\n            {% do filtered_columns.append(col) %}\n        {% elif col.is_numeric() and \"numeric\" not in exclude_types %}\n            {% do filtered_columns.append(col) %}\n        {% elif col.is_number() and \"number\" not in exclude_types %}\n            {% do filtered_columns.append(col) %}\n        {% elif col.is_integer() and \"integer\" not in exclude_types %}\n            {% do filtered_columns.append(col) %}\n        {% elif col.is_float() and \"float\" not in exclude_types %}\n            {% do filtered_columns.append(col) %}\n        {% elif col.data_type not in exclude_types %}\n            {% do filtered_columns.append(col) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(filtered_columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1451719, "supported_languages": null}, "macro.testgen.exclude_column_names": {"name": "exclude_column_names", "resource_type": "macro", "package_name": "testgen", "path": "macros/helpers/columns.sql", "original_file_path": "macros/helpers/columns.sql", "unique_id": "macro.testgen.exclude_column_names", "macro_sql": "{% macro exclude_column_names(columns, exclude_cols) %}\n    {% set filtered_columns = [] %}\n    {% for col in columns %}\n        {% if col.column not in exclude_cols %}\n            {% do filtered_columns.append(col) %}\n        {% endif %}\n    {% endfor %}\n    {{ return(filtered_columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1455, "supported_languages": null}, "macro.dq_tools.except": {"name": "except", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dq_tools.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', macro_namespace = 'dq_tools')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.145736, "supported_languages": null}, "macro.dq_tools.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dq_tools.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.145816, "supported_languages": null}, "macro.dq_tools.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "unique_id": "macro.dq_tools.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1458821, "supported_languages": null}, "macro.dq_tools.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', macro_namespace = 'dq_tools')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dq_tools.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.146473, "supported_languages": null}, "macro.dq_tools.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.146545, "supported_languages": null}, "macro.dq_tools.redshift__type_string": {"name": "redshift__type_string", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.146624, "supported_languages": null}, "macro.dq_tools.postgres__type_string": {"name": "postgres__type_string", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.146689, "supported_languages": null}, "macro.dq_tools.snowflake__type_string": {"name": "snowflake__type_string", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1467562, "supported_languages": null}, "macro.dq_tools.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', macro_namespace = 'dq_tools')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dq_tools.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1469219, "supported_languages": null}, "macro.dq_tools.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.147004, "supported_languages": null}, "macro.dq_tools.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.147159, "supported_languages": null}, "macro.dq_tools.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', macro_namespace = 'dq_tools')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dq_tools.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.147323, "supported_languages": null}, "macro.dq_tools.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.147393, "supported_languages": null}, "macro.dq_tools.bigquery__type_float": {"name": "bigquery__type_float", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.147459, "supported_languages": null}, "macro.dq_tools.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', macro_namespace = 'dq_tools')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dq_tools.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.147614, "supported_languages": null}, "macro.dq_tools.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.147687, "supported_languages": null}, "macro.dq_tools.bigquery__type_numeric": {"name": "bigquery__type_numeric", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.147752, "supported_languages": null}, "macro.dq_tools.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', macro_namespace = 'dq_tools')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dq_tools.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.147905, "supported_languages": null}, "macro.dq_tools.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.147972, "supported_languages": null}, "macro.dq_tools.bigquery__type_bigint": {"name": "bigquery__type_bigint", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.148032, "supported_languages": null}, "macro.dq_tools.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', macro_namespace = 'dq_tools')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dq_tools.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.148181, "supported_languages": null}, "macro.dq_tools.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.148245, "supported_languages": null}, "macro.dq_tools.bigquery__type_int": {"name": "bigquery__type_int", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "unique_id": "macro.dq_tools.bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1483068, "supported_languages": null}, "macro.dq_tools.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dq_tools.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', macro_namespace = 'dq_tools')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1487858, "supported_languages": null}, "macro.dq_tools.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dq_tools.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.148931, "supported_languages": null}, "macro.dq_tools.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dq_tools.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.149075, "supported_languages": null}, "macro.dq_tools.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "unique_id": "macro.dq_tools.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.149215, "supported_languages": null}, "macro.dq_tools.transaction_begin": {"name": "transaction_begin", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/transaction.sql", "original_file_path": "macros/cross_db_utils/transaction.sql", "unique_id": "macro.dq_tools.transaction_begin", "macro_sql": "{%- macro transaction_begin() -%}\n  {{ return(adapter.dispatch('transaction_begin', macro_namespace = 'dq_tools')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dq_tools.default__transaction_begin"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.149518, "supported_languages": null}, "macro.dq_tools.default__transaction_begin": {"name": "default__transaction_begin", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/transaction.sql", "original_file_path": "macros/cross_db_utils/transaction.sql", "unique_id": "macro.dq_tools.default__transaction_begin", "macro_sql": "{% macro default__transaction_begin() %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1495948, "supported_languages": null}, "macro.dq_tools.snowflake__transaction_begin": {"name": "snowflake__transaction_begin", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/transaction.sql", "original_file_path": "macros/cross_db_utils/transaction.sql", "unique_id": "macro.dq_tools.snowflake__transaction_begin", "macro_sql": "{% macro snowflake__transaction_begin() %}\n    begin;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.149675, "supported_languages": null}, "macro.dq_tools.transaction_commit": {"name": "transaction_commit", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/transaction.sql", "original_file_path": "macros/cross_db_utils/transaction.sql", "unique_id": "macro.dq_tools.transaction_commit", "macro_sql": "\n\n\n\n{%- macro transaction_commit() -%}\n  {{ return(adapter.dispatch('transaction_commit', macro_namespace = 'dq_tools')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dq_tools.default__transaction_commit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.149836, "supported_languages": null}, "macro.dq_tools.default__transaction_commit": {"name": "default__transaction_commit", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/transaction.sql", "original_file_path": "macros/cross_db_utils/transaction.sql", "unique_id": "macro.dq_tools.default__transaction_commit", "macro_sql": "{% macro default__transaction_commit() %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.149976, "supported_languages": null}, "macro.dq_tools.snowflake__transaction_commit": {"name": "snowflake__transaction_commit", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/transaction.sql", "original_file_path": "macros/cross_db_utils/transaction.sql", "unique_id": "macro.dq_tools.snowflake__transaction_commit", "macro_sql": "{% macro snowflake__transaction_commit() %}\n    commit;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.150039, "supported_languages": null}, "macro.dq_tools.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dq_tools.current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', macro_namespace = 'dq_tools')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dq_tools.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.150502, "supported_languages": null}, "macro.dq_tools.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dq_tools.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n    current_timestamp::{{ dq_tools.type_timestamp()}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dq_tools.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1506, "supported_languages": null}, "macro.dq_tools.redshift__current_timestamp": {"name": "redshift__current_timestamp", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dq_tools.redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() -%}\n    getdate()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.150723, "supported_languages": null}, "macro.dq_tools.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dq_tools.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n    current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.150818, "supported_languages": null}, "macro.dq_tools.current_timestamp_in_utc": {"name": "current_timestamp_in_utc", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dq_tools.current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', macro_namespace = 'dq_tools')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dq_tools.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.150988, "supported_languages": null}, "macro.dq_tools.default__current_timestamp_in_utc": {"name": "default__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dq_tools.default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dq_tools.current_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.151216, "supported_languages": null}, "macro.dq_tools.snowflake__current_timestamp_in_utc": {"name": "snowflake__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dq_tools.snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dq_tools.current_timestamp()}})::{{dq_tools.type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.current_timestamp", "macro.dq_tools.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.151435, "supported_languages": null}, "macro.dq_tools.postgres__current_timestamp_in_utc": {"name": "postgres__current_timestamp_in_utc", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "unique_id": "macro.dq_tools.postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dq_tools.type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.151546, "supported_languages": null}, "macro.dq_tools.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dq_tools.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dq_tools') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dq_tools.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.151839, "supported_languages": null}, "macro.dq_tools.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dq_tools.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.151963, "supported_languages": null}, "macro.dq_tools.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "unique_id": "macro.dq_tools.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n  date_trunc({{date}}, {{ datepart | upper }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.152096, "supported_languages": null}, "macro.dq_tools.store_test_results": {"name": "store_test_results", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/store_test_results.sql", "original_file_path": "macros/artifacts/test/store_test_results.sql", "unique_id": "macro.dq_tools.store_test_results", "macro_sql": "{% macro store_test_results(results, log_tbl=ref('dq_tools', 'dq_issue_log'), batch=1000) -%}\n\n  {%- set enable_store_result = var('dq_tools_enable_store_test_results', false) -%}\n  {%- if var('dbt_test_results_to_db', false) or not execute %}\n    {# Compatible to prev funcs to avoid duplicates of test results captured #}\n    {% set enable_store_result = false %}\n  {% endif -%}\n  {%- if not enable_store_result or not execute %}\n    {{ log(\"Ignored as `store_test_results` functionality is NOT being enabled\", true) if execute }}\n    {{ return('') }}\n  {% endif -%}\n  \n\n  {%- set test_results = [] %}\n  {%- for result in results if result.node.resource_type | lower == 'test' and result.status | lower not in ['error', 'skipped'] %}\n    {%- set test_results = test_results.append(result) -%}\n  {% endfor -%}\n\n  {%- if (test_results | length) == 0 %}\n    {{ log(\"Found no test results to process.\", true) if execute }}\n    {{ return('') -}}\n  {% endif -%}\n\n  {{ log(\"Centralizing \" ~ test_results|length ~ \" test results in \" ~ log_tbl, true) if execute -}}\n\n  {% set no_of_tables = dq_tools.__get_tables_from_graph() | length %}\n  {% for i in range(0, (test_results | length), batch) -%}\n  \n    {% set chunk_items = test_results[i:i+batch] %}\n    insert into {{ log_tbl }}\n    (\n       check_timestamp\n      ,table_name\n      ,table_query\n      ,column_name\n      ,ref_table\n      ,ref_column\n      ,dq_issue_type\n      ,invocation_id\n      ,dq_model\n      ,severity\n      ,kpi_category\n      ,no_of_records\n      ,no_of_records_scanned\n      ,no_of_records_failed\n      ,no_of_table_columns\n      ,no_of_tables\n      ,test_unique_id\n    )\n\n    with logs as (\n\n    {%- for result in chunk_items %}\n    \n      {{ dq_tools.__select_test_result(result) }}\n      {{ \"union all\" if not loop.last }}\n\n    {%- endfor -%}\n    )\n\n    select    _timestamp as check_timestamp\n              ,table_name\n              ,table_query\n              ,column_name\n              ,ref_table\n              ,ref_column\n              ,dq_issue_type\n              ,dbt_invocation_id as invocation_id\n              ,dq_model\n              ,test_severity_config as severity\n              ,test_kpi_category_config as kpi_category\n              ,no_of_records\n              ,no_of_records_scanned\n              ,no_of_records_failed\n              ,no_of_table_columns\n              ,{{ no_of_tables }} as no_of_tables\n              ,test_unique_id\n\n    from      logs;\n\n  {% endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dq_tools.__get_tables_from_graph", "macro.dq_tools.__select_test_result"]}, "description": "# Purpose\nSelect only the test results and store it into DWH table.\n\nAdd \"{{ store_test_results(results) }}\" to an `on-run-end:` block in dbt_project.yml\n\n# Technical perspective\nIntegrated from [store_test_failures.sql](https://gist.github.com/lbk-fishtown/e1a2ae63dd4b9832294dda7f4be0d5c5)\n\nSmaple data in `results` variable by test type:\n### Generic Test (CompiledGenericTestNode)\n\n  ```python\n  RunResult(\n    status=<TestStatus.Pass: 'pass'>,\n    timing=[\n      TimingInfo(name='compile', started_at=datetime.datetime(2022, 8, 25, 7, 33, 2, 104081), completed_at=datetime.datetime(2022, 8, 25, 7, 33, 6, 329281)),\n      TimingInfo(name='execute', started_at=datetime.datetime(2022, 8, 25, 7, 33, 6, 329711), completed_at=datetime.datetime(2022, 8, 25, 7, 33, 7, 41025))\n    ],\n    thread_id='Thread-2',\n    execution_time=5.455570936203003,\n    adapter_response={},\n    message=None,\n    failures=0,\n    node=CompiledGenericTestNode(\n      raw_sql='<actual model code in one line>',\n      test_metadata=TestMetadata(\n        name='relationships_where_db',\n        kwargs={'from_condition': 'a_id < 0', 'to': \"ref('data_test_relationships_b')\", 'to_condition': 'b_id < 0', 'field': 'b_id', 'column_name': 'a_id', 'model': \"{{ get_where_subquery(ref('data_test_relationships_a')) }}\"},\n        namespace='dq_tools'\n      ),\n      compiled=True,\n      database='DQ_TOOLS',\n      schema='dq_tools_integration_tests_snowflake_dbt_test__audit',\n      fqn=['dq_tools_integration_tests', 'generic_tests', 'dq_tools_relationships_where_db_data_test_relationships_a_a_id__b_id__a_id_0__ref_data_test_relationships_b___b_id_0'],\n      unique_id='test.dq_tools_integration_tests.dq_tools_relationships_where_db_data_test_relationships_a_a_id__b_id__a_id_0__ref_data_test_relationships_b___b_id_0.f7a24f1838',\n      package_name='dq_tools_integration_tests',\n      root_path='/Users/admin/Documents/sources/bi-chapter/dq-tools/integration_tests',\n      path='dq_tools_relationships_where_d_06c3883fe1e3cb0f9f22ae8248249810.sql',\n      original_file_path='models/generic_tests/data_test_relationships.yml',\n      name='dq_tools_relationships_where_db_data_test_relationships_a_a_id__b_id__a_id_0__ref_data_test_relationships_b___b_id_0',\n      resource_type=<NodeType.Test: 'test'>, alias='dq_tools_relationships_where_d_06c3883fe1e3cb0f9f22ae8248249810',\n      checksum=FileHash(\n        name='none',\n        checksum=''\n      ),\n      config=TestConfig(\n        _extra={},\n        enabled=True,\n        alias='dq_tools_relationships_where_d_06c3883fe1e3cb0f9f22ae8248249810',\n        schema='dbt_test__audit',\n        database=None,\n        tags=[],\n        meta={},\n        materialized='test',\n        severity='warn',\n        store_failures=None,\n        where=None,\n        limit=None,\n        fail_calc='count(*)',\n        warn_if='!= 0',\n        error_if='!= 0'\n      ),\n      _event_status={'node_status': <RunningStatus.Executing: 'executing'>},\n      tags=[],\n      refs=[['data_test_relationships_b'], ['data_test_relationships_a']],\n      sources=[],\n      metrics=[],\n      depends_on=DependsOn(\n        macros=['macro.dq_tools.test_relationships_where_db', 'macro.dbt.get_where_subquery', 'macro.dbt.should_store_failures', 'macro.dbt.statement'],\n        nodes=['seed.dq_tools_integration_tests.data_test_relationships_b', 'seed.dq_tools_integration_tests.data_test_relationships_a']\n      ),\n      description='',\n      columns={},\n      meta={},\n      docs=Docs(show=True),\n      patch_path=None,\n      compiled_path='target/compiled/dq_tools_integration_tests/models/generic_tests/data_test_relationships.yml/dq_tools_relationships_where_d_06c3883fe1e3cb0f9f22ae8248249810.sql',\n      build_path='target/run/dq_tools_integration_tests/models/generic_tests/data_test_relationships.yml/dq_tools_relationships_where_d_06c3883fe1e3cb0f9f22ae8248249810.sql',\n      deferred=False,\n      unrendered_config={'severity': 'warn', 'alias': 'dq_tools_relationships_where_d_06c3883fe1e3cb0f9f22ae8248249810'},\n      created_at=1661168082.5305338,\n      config_call_dict={'severity': 'warn', 'alias': 'dq_tools_relationships_where_d_06c3883fe1e3cb0f9f22ae8248249810'}, compiled_sql='\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n    \\n\\n\\n    with left_table as (\\n\\n        select\\n          a_id as ref_id\\n\\n        from DQ_TOOLS.dq_tools_integration_tests_snowflake_seed.data_test_relationships_a\\n\\n        where a_id is not null\\n          and a_id < 0\\n          \\n\\n      ),\\n\\n      right_table as (\\n\\n        select\\n          b_id as ref_id\\n\\n        from DQ_TOOLS.dq_tools_integration_tests_snowflake_seed.data_test_relationships_b\\n\\n        where b_id is not null\\n          and b_id < 0\\n\\n      )\\n\\n      select\\n          *\\n      from left_table\\n          left join right_table\\n          on left_table.ref_id = right_table.ref_id\\n      where right_table.ref_id is null\\n\\n\\n',\n      extra_ctes_injected=True,\n      extra_ctes=[],\n      relation_name=None,\n      _pre_injected_sql=None,\n      column_name='a_id',\n      file_key_name='seeds.data_test_relationships_a'\n    ),\n    agate_table=None\n  )\n  ```\n\n#### Singular Test (CompiledSingularTestNode)\n\n  ```python\n  RunResult(\n    status=<TestStatus.Pass: 'pass'>,\n    timing=[\n      TimingInfo(name='compile', started_at=datetime.datetime(2022, 8, 25, 7, 33, 2, 103945), completed_at=datetime.datetime(2022, 8, 25, 7, 33, 2, 161586)),\n      TimingInfo(name='execute', started_at=datetime.datetime(2022, 8, 25, 7, 33, 2, 161871), completed_at=datetime.datetime(2022, 8, 25, 7, 33, 5, 367202))\n    ],\n    thread_id='Thread-1',\n    execution_time=3.7876031398773193,\n    adapter_response={},\n    message=None,\n    failures=0,\n    node=CompiledSingularTestNode(\n      raw_sql='<actual model code in one line>',\n      compiled=True,\n      database='DQ_TOOLS',\n      schema='dq_tools_integration_tests_snowflake_dbt_test__audit',\n      fqn=['dq_tools_integration_tests', 'general', 'assert_dq_issue_log_table_creation'],\n      unique_id='test.dq_tools_integration_tests.assert_dq_issue_log_table_creation',\n      package_name='dq_tools_integration_tests',\n      root_path='/Users/admin/Documents/sources/bi-chapter/dq-tools/integration_tests',\n      path='general/assert_dq_issue_log_table_creation.sql',\n      original_file_path='tests/general/assert_dq_issue_log_table_creation.sql',\n      name='assert_dq_issue_log_table_creation',\n      resource_type=<NodeType.Test: 'test'>,\n      alias='assert_dq_issue_log_table_creation',\n      checksum=FileHash(\n        name='sha256',\n        checksum='c6f1bb222565802847412e06e47ddfe86222614652f682bc3a7bc67c6ac74528'\n      ),\n      config=TestConfig(\n        _extra={},\n        enabled=True,\n        alias=None,\n        schema='dbt_test__audit',\n        database=None,\n        tags=[],\n        meta={'kpi_category': 'Validity'},\n        materialized='test',\n        severity='error',\n        store_failures=None,\n        where=None,\n        limit=None,\n        fail_calc='count(*)',\n        warn_if='!= 0',\n        error_if='!= 0'\n      ),\n      _event_status={'node_status': <RunningStatus.Executing: 'executing'>},\n      tags=[],\n      refs=[],\n      sources=[],\n      metrics=[],\n      depends_on=DependsOn(\n        macros=['macro.dbt.should_store_failures', 'macro.dbt.statement'],\n        nodes=[]\n      ),\n      description='',\n      columns={},\n      meta={'kpi_category': 'Validity'},\n      docs=Docs(show=True),\n      patch_path=None,\n      compiled_path='target/compiled/dq_tools_integration_tests/tests/general/assert_dq_issue_log_table_creation.sql',\n      build_path='target/run/dq_tools_integration_tests/tests/general/assert_dq_issue_log_table_creation.sql',\n      deferred=False,\n      unrendered_config={'severity': 'error', 'meta': {'kpi_category': 'Validity'}},\n      created_at=1661168082.324693,\n      config_call_dict={'meta': {'kpi_category': 'Validity'}},\n      compiled_sql=\"\\n\\nwith tables as (\\n\\n  select  *\\n  from    information_schema.tables\\n  where   table_schema = 'DQ_RAW'\\n    and   table_name = 'DQ_ISSUE_LOG'\\n\\n)\\n\\nselect  1\\nwhere   not exists (select 1 from tables limit 1)\",\n      extra_ctes_injected=True,\n      extra_ctes=[],\n      relation_name=None,\n      _pre_injected_sql=None\n    ),\n    agate_table=None\n  )\n  ```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/store_test_results.yml", "arguments": [], "created_at": 1714072384.3070269, "supported_languages": null}, "macro.dq_tools.__get_test_coverage_exclusion": {"name": "__get_test_coverage_exclusion", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/__get_test_coverage_exclusion.sql", "original_file_path": "macros/artifacts/test/utilities/__get_test_coverage_exclusion.sql", "unique_id": "macro.dq_tools.__get_test_coverage_exclusion", "macro_sql": "{% macro __get_test_coverage_exclusion(rule=var('dbt_dq_tool_test_coverage_exclusion', {})) %}\n\n  {% set databases = [] %}\n  {% for rule in rule.get('by_database', []) %}\n    {% do databases.append(generate_database_name(rule)) %}\n  {% endfor %}\n\n  {% set schemas = [] %}\n  {% for rule in rule.get('by_schema', []) %}\n    {% do schemas.append(generate_schema_name(rule)) %}\n  {% endfor %}\n\n  {% set tables = [] %}\n  {% for rule in rule.get('by_table', []) %}\n    {% do tables.append(generate_alias_name(rule)) %}\n  {% endfor %}\n\n  {{ return({\n    \"databases\": databases,\n    \"schemas\": schemas,\n    \"tables\": tables\n  }) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_database_name", "macro.dbt.generate_schema_name", "macro.dbt.generate_alias_name"]}, "description": "Returns rules for test coverage exclusion", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/__get_test_coverage_exclusion.yml", "arguments": [], "created_at": 1714072384.307128, "supported_languages": null}, "macro.dq_tools.__get_test_coverage_exclusion_sql": {"name": "__get_test_coverage_exclusion_sql", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/__get_test_coverage_exclusion.sql", "original_file_path": "macros/artifacts/test/utilities/__get_test_coverage_exclusion.sql", "unique_id": "macro.dq_tools.__get_test_coverage_exclusion_sql", "macro_sql": "{% macro __get_test_coverage_exclusion_sql(table_name='table_name') %}\n\n  {% set rule = dq_tools.__get_test_coverage_exclusion() %}\n  \n  {% set query -%}\n    (\n      {% if rule.databases -%}\n        (\n          lower(split({{ table_name }}, '.')[0]) in (\n            {%- for rule in rule.databases -%}\n              '{{ rule | lower }}' {% if not loop.last %},{% endif %}\n            {%- endfor -%}\n          )\n        )\n      {%- else -%}\n        --no database exclusions\n      {%- endif %}\n      \n      {% if rule.schemas -%}\n        {% if rule.databases %}or{% endif %}\n        (\n          lower(split({{ table_name }}, '.')[1]) in (\n            {%- for rule in rule.schemas -%}\n              '{{ rule | lower }}' {% if not loop.last %},{% endif %}\n            {%- endfor -%}\n          )\n        )\n      {%- else -%}\n        --no schema exclusions\n      {%- endif %}\n      \n      {% if rule.tables -%}\n        {% if rule.databases or rule.schemas %}or{% endif %}\n        (\n          lower(split({{ table_name }}, '.')[2]) in (\n            {%- for rule in rule.tables -%}\n              '{{ rule | lower }}' {% if not loop.last %},{% endif %}\n            {%- endfor -%}\n          )\n        )\n      {%- else -%}\n        --no table exclusions\n      {%- endif %}\n      \n      {% if not rule.databases and not rule.schemas and not rule.tables -%}\n        0=1\n      {%- endif %}\n    )\n  {%- endset %}\n\n  {{ return(query) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.__get_test_coverage_exclusion"]}, "description": "Returns rules for test coverage exclusion as a `WHERE` condition", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/__get_test_coverage_exclusion.yml", "arguments": [], "created_at": 1714072384.307169, "supported_languages": null}, "macro.dq_tools.__get_relation_ref": {"name": "__get_relation_ref", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/relation/__get_relation_ref.sql", "original_file_path": "macros/artifacts/test/utilities/relation/__get_relation_ref.sql", "unique_id": "macro.dq_tools.__get_relation_ref", "macro_sql": "{% macro __get_relation_ref(model_name) %}\n\n  {% if execute %}\n\n    {% for item in graph.nodes.values() | selectattr(\"name\", \"equalto\", model_name) %}\n      {% set relation = adapter.get_relation(\n                          database=item.database,\n                          schema=item.schema,\n                          identifier=item.alias or item.name) %}\n      {{ return(relation) }}\n    {% endfor %}\n\n  {% endif %}\n\n  {{ return('') }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Find the ref node in `graph` variable and return the relation string if found. Otherwise empty.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/relation/relation.yml", "arguments": [], "created_at": 1714072384.307332, "supported_languages": null}, "macro.dq_tools.__get_to_relation": {"name": "__get_to_relation", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/relation/__get_to_relation.sql", "original_file_path": "macros/artifacts/test/utilities/relation/__get_to_relation.sql", "unique_id": "macro.dq_tools.__get_to_relation", "macro_sql": "{% macro __get_to_relation(test_node) %}\n\n  {% set to_model = (\n          (test_node.test_metadata.kwargs.to if test_node.test_metadata.kwargs.to is defined else none)\n      or  (test_node.test_metadata.kwargs.compare_model if test_node.test_metadata.kwargs.compare_model is defined else none)\n    ) if test_node.test_metadata is defined  else none\n  %}\n\n  {% if to_model is not none %}\n\n    {% if to_model.startswith('ref') %}\n      {# to_model = ref('model') #}\n      {% set to_model = to_model.split('\\'')[1].strip() %}\n      {{ return(dq_tools.__get_relation_ref(to_model)) }}\n\n    {% elif to_model.startswith('source') %}\n\n      {# to_model = source('source','table') #}\n      {% set re = modules.re %}\n      {% set result = re.search('\\((.*?)\\)', to_model) %}\n      {% if result is none %}\n        {{ return('') }}\n      {% endif %}\n      {% set result = result.group(1) %}\n\n      {% set to_source = result.split(',')[0].strip()[1:-1] %}\n      {% set to_table = result.split(',')[1].strip()[1:-1] %}\n      {{ return(dq_tools.__get_relation_source(to_source, to_table)) }}\n\n    {% endif %}\n\n  {% endif %}\n\n  {{ return(to_model if to_model is not none else '') }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.__get_relation_ref", "macro.dq_tools.__get_relation_source"]}, "description": "Get to-relation string only applicable to the relationship test. Otherwise returns empty.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/relation/relation.yml", "arguments": [], "created_at": 1714072384.307294, "supported_languages": null}, "macro.dq_tools.__get_relation_source": {"name": "__get_relation_source", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/relation/__get_relation_source.sql", "original_file_path": "macros/artifacts/test/utilities/relation/__get_relation_source.sql", "unique_id": "macro.dq_tools.__get_relation_source", "macro_sql": "{% macro __get_relation_source(source_name, table_name) %}\n\n  {% if execute %}\n\n    {% for item in graph.sources.values() | selectattr(\"source_name\", \"equalto\", source_name) %}\n      {% if item.name == table_name %}\n\n        {% set relation -%}\n          {{ source(source_name, table_name) }}\n        {%- endset %}\n        {{ return(relation) }}\n\n      {% endif %}\n    {% endfor %}\n\n  {% endif %}\n\n  {{ return('') }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Find the source node in `graph` variable and return the relation string if found. Otherwise empty.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/relation/relation.yml", "arguments": [], "created_at": 1714072384.3073668, "supported_languages": null}, "macro.dq_tools.__get_relation": {"name": "__get_relation", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/relation/__get_relation.sql", "original_file_path": "macros/artifacts/test/utilities/relation/__get_relation.sql", "unique_id": "macro.dq_tools.__get_relation", "macro_sql": "{% macro __get_relation(test_model) %}\n\n  {% if execute %}\n    {% if test_model.type == 'ref' %}\n\n      {{ return(dq_tools.__get_relation_ref(test_model.name)) }}\n\n    {% elif test_model.type == 'source' %}\n\n      {{ return(dq_tools.__get_relation_source(test_model.source_name, test_model.name)) }}\n\n    {% endif %}\n\n  {% endif %}\n\n  {{ return('') }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.__get_relation_ref", "macro.dq_tools.__get_relation_source"]}, "description": "Get relation string for a node if found in the `graph` variable e.g. relationship test\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/relation/relation.yml", "arguments": [], "created_at": 1714072384.307256, "supported_languages": null}, "macro.dq_tools.__get_test_model": {"name": "__get_test_model", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/general/__get_test_model.sql", "original_file_path": "macros/artifacts/test/utilities/general/__get_test_model.sql", "unique_id": "macro.dq_tools.__get_test_model", "macro_sql": "{% macro __get_test_model(test_node) %}\n\n  {% if test_node.test_metadata is defined %}\n\n    {% set re = modules.re %}\n\n    {#\n      test_node.test_metadata.kwargs.model = \"{{ get_where_subquery(source('name', 'table')) }}\" or\n      test_node.test_metadata.kwargs.model = \"{{ get_where_subquery(ref('table')) }}\"\n    #}\n    {% set result = re.search('\\((.*?)\\)', test_node.test_metadata.kwargs.model) %}\n    {% if result is none %}\n      {{ return(none) }}\n    {% endif %}\n\n    {#\n      relation_func = \"source('name', 'table')\" or\n      relation_func = \"ref('table')\" or \"ref('package', 'table')\"\n    #}\n    {% set relation_func = result.group(1) ~ ')' %}\n\n    {% set parts = relation_func.split(',') %}\n    {% if relation_func.startswith('ref') %}\n\n      {% if parts | length > 1 %}\n        {{ return(\n          {\n            'type': 'ref',\n            'name': re.search('\\'(.*?)\\'', parts[1]).group(1),\n            'package_name': re.search('\\'(.*?)\\'', parts[0]).group(1)\n          }\n        )}}\n      {% else %}\n        {{ return(\n          {\n            'type': 'ref',\n            'name': re.search('\\'(.*?)\\'', parts[0]).group(1),\n            'package_name': ''\n          }\n        )}}\n      {% endif %}\n\n    {% elif relation_func.startswith('source') and (parts | length) > 1 %}\n\n      {{ return(\n        {\n          'type': 'source',\n          'name': re.search('\\'(.*?)\\'', parts[1]).group(1),\n          'source_name': re.search('\\'(.*?)\\'', parts[0]).group(1)\n        }\n      )}}\n\n    {% endif %}\n\n  {% endif %}\n\n  {{ return(none) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Return a dict specifying some info of the model where test is performed\n\nThe dict object schema:\n```python\n{\n  'type': 'string: value is [ref or source]',\n  'name': 'string: model name',\n  'package_name': 'string: available if type=ref',\n  'source_name': 'string: available if type=source'\n}\n```\nif the dict's type currently supporting: ref, source. Otherwise return as `None`.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/general/_general.yml", "arguments": [], "created_at": 1714072384.307487, "supported_languages": null}, "macro.dq_tools.__get_where_subquery": {"name": "__get_where_subquery", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/general/__get_where_subquery.sql", "original_file_path": "macros/artifacts/test/utilities/general/__get_where_subquery.sql", "unique_id": "macro.dq_tools.__get_where_subquery", "macro_sql": "{% macro __get_where_subquery(test_model, config, sql_escape=false) %}\n\n  {% if not test_model %}\n    {{ return('') }}\n  {% endif %}\n\n  {% set relation = dq_tools.__get_relation(test_model) %}\n  {% if not relation %}\n    {{ return('') }}\n  {% endif %}\n\n\n  {% set where = config.get('where', none) %}\n  {% if where is not none %}\n    {%- set filtered -%}\n      (select * from {{ relation }} where {{ where | replace(\"'\", \"\\\\'\") if sql_escape else where }}) dbt_subquery\n    {%- endset -%}\n    {% do return(filtered) %}\n  {%- else -%}\n    {% do return(relation) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.__get_relation"]}, "description": "Return the relation string of the model:\n```\n{database}.{schema}.{table}\n```\n\nBut if there is a config.where presenting it will become the subquery:\n```\n(select * from {database}.{schema}.{table} where {where}) as dbt_subquery\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/general/_general.yml", "arguments": [], "created_at": 1714072384.307594, "supported_languages": null}, "macro.dq_tools.__get_test_type": {"name": "__get_test_type", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/general/__get_test_type.sql", "original_file_path": "macros/artifacts/test/utilities/general/__get_test_type.sql", "unique_id": "macro.dq_tools.__get_test_type", "macro_sql": "{% macro __get_test_type(test_node) %}\n\n  {%- set test_type = '' -%}\n\n  {%- if test_node.test_metadata is defined -%}\n    {%- set test_type = 'generic' -%}\n  {%- elif test_node.name is defined -%}\n    {%- set test_type = 'singular' -%}\n  {%- endif %}\n\n  {{ return(test_type) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Return test type which is singular or generic", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/general/_general.yml", "arguments": [], "created_at": 1714072384.307559, "supported_languages": null}, "macro.dq_tools.__get_test_name": {"name": "__get_test_name", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/general/__get_test_name.sql", "original_file_path": "macros/artifacts/test/utilities/general/__get_test_name.sql", "unique_id": "macro.dq_tools.__get_test_name", "macro_sql": "{% macro __get_test_name(test_node) %}\n\n  {%- if test_node.test_metadata is defined -%}\n\n    {{ return(test_node.test_metadata.name) }}\n\n  {%- elif test_node.name is defined -%}\n\n    {{ return(test_node.name) }}\n\n  {%- endif %}\n\n  {{ return('') }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Return test (function) name", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/general/_general.yml", "arguments": [], "created_at": 1714072384.307523, "supported_languages": null}, "macro.dq_tools.__select_test_result": {"name": "__select_test_result", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/general/__select_test_result.sql", "original_file_path": "macros/artifacts/test/utilities/general/__select_test_result.sql", "unique_id": "macro.dq_tools.__select_test_result", "macro_sql": "{% macro __select_test_result(result) -%}\n\n  {%- set dbt_cloud_account_id = env_var(\"DBT_CLOUD_ACCOUNT_ID\", \"manual\") -%}\n  {%- set dbt_cloud_project_id = env_var(\"DBT_CLOUD_ACCOUNT_ID\", \"manual\") -%}\n  {%- set dbt_cloud_job_id = env_var(\"DBT_CLOUD_ACCOUNT_ID\", \"manual\") -%}\n  {%- set dbt_cloud_run_id = env_var(\"DBT_CLOUD_ACCOUNT_ID\", \"manual\") -%}\n\n  {%- set test_type = dq_tools.__get_test_type(result.node) -%}\n  {%- set testing_model = dq_tools.__get_test_model(result.node) -%}\n  {%- set testing_model_relation = dq_tools.__get_relation(testing_model) -%}\n  /* {{ testing_model }} */\n\n  select   '{{ result.node.unique_id }}' as test_unique_id\n          ,'{{ result.node.alias }}' as test_name\n          ,'{{ result.node.name }}' as test_name_long\n          ,'{{ result.node.database ~ \".\" ~ result.node.schema ~ \".\" ~ result.node.name }}' as dq_model\n          ,'{{ result.node.config.severity | lower }}' as test_severity_config\n          ,'{{ dq_tools.__get_kpi_categorize(result.node) }}' as test_kpi_category_config\n          ,'{{ dq_tools.__get_dq_issue_type(result.node) }}' as dq_issue_type\n          ,'{{ result.status }}' as test_result\n          ,'{{ testing_model_relation }}' as table_name\n          ,'{{ dq_tools.__get_where_subquery(\n                testing_model,\n                result.node.config,\n                sql_escape=true) }}' as table_query\n          ,'{{ dq_tools.__get_to_relation(result.node) }}' as ref_table\n          ,'{{ dq_tools.__get_column_name(result.node) | escape }}' as column_name\n          ,{% if test_type == 'generic' %}\n              {{ adapter.get_columns_in_relation(testing_model_relation) | length }}\n            {% else %}null{% endif %} as no_of_table_columns\n          ,'{{ dq_tools.__get_to_column_name(result.node) | escape }}' as ref_column\n          ,{% if test_type == 'generic' %}(\n              select  count(*)\n              from    {{ testing_model_relation }}\n            ){% else %}null{% endif %} as no_of_records\n          ,{% if test_type == 'generic' %}(\n              select  count(*)\n              from    {{ dq_tools.__get_where_subquery(testing_model, result.node.config) }}\n            ){% else %}null{% endif %} as no_of_records_scanned\n          ,coalesce({{ result.failures or 'null' }}, 0) as no_of_records_failed\n          ,'{{ test_type }}' as test_type\n          ,'{{ result.execution_time }}' as execution_time_seconds\n          ,'{{ result.node.original_file_path }}' as file_test_defined\n          ,'{{ target.name }}' as dbt_target_name\n          ,'{{ invocation_id }}' as dbt_invocation_id\n          ,'{{ dbt_cloud_account_id }}' as _audit_account_id\n          ,'{{ dbt_cloud_project_id }}' as _audit_project_id\n          ,'{{ dbt_cloud_job_id }}' as _audit_job_id\n          ,'{{ dbt_cloud_run_id }}' as _audit_run_id\n          ,concat(\n            '{{ env_var(\"DBT_CLOUD_URL\", \"https://cloud.getdbt.com/#/accounts/\") ~ dbt_cloud_account_id }}',\n            '/projects/{{ dbt_cloud_account_id }}',\n            '/runs/{{ dbt_cloud_run_id }} '\n          ) as audit_run_url\n          ,{{ dq_tools.current_timestamp_in_utc() }} as _timestamp\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dq_tools.__get_test_type", "macro.dq_tools.__get_test_model", "macro.dq_tools.__get_relation", "macro.dq_tools.__get_kpi_categorize", "macro.dq_tools.__get_dq_issue_type", "macro.dq_tools.__get_where_subquery", "macro.dq_tools.__get_to_relation", "macro.dq_tools.__get_column_name", "macro.dq_tools.__get_to_column_name", "macro.dq_tools.current_timestamp_in_utc"]}, "description": "Build select statement containing all parsable fields from the test result node.\n\nList of fields:\n- `test_name`:\n  Value generated by dbt, sometime having hashed value e.g. dq_tools_relationships_where_d_54ea91e37e41670064d820d826bfea36\n\n- `test_name_long`:\n  Value generated by dbt without hashed string e.g. dq_tools_relationships_where_db_data_test_relationships_a_a_id__b_id__ref_data_test_relationships_b___b_id_0\n\n- `test_severity_config`:\n  Severity value was configued to the test e.g. warn, error\n\n- `test_kpi_category_config`:\n  KPI Category was configured to the test via `config.kpi_category` or `meta.kpi_category` or auto-assigned based on test name.\n  See {{ __get_kpi_categorize }}\n\n- `dq_issue_type`:\n  Same behaviour as `test_kpi_category_config`.\n  See {{ __get_dq_issue_type }}\n\n- `test_result`:\n  Value generated by dbt which are pass, fail or skip\n\n- `table_name`:\n  Relation string value consists of {database}.{schema}.{table}.\n  And if having `where` config, it will become the subquery `(select * from {database}.{schema}.{table} where {where}) as dbt_subquery\n\n- `ref_table`:\n  Relation string value consists of {database}.{schema}.{table} if the test is type of relationship.\n  See {{ __get_to_relation }}\n\n- `column_name`:\n  Combination of column names which related to the model's test defined\n\n- `ref_column`:\n  Column name of the referenced model where the relationship test is defined\n\n- `no_of_records`:\n  Count(*) from the `table_name`\n\n- `no_of_records_failed`:\n  Value generated by dbt which is `result.failures`\n\n- `test_type`:\n  General type of the test which are singular or generic.\n  See {{ __get_test_type }}\n\n- `execution_time_seconds`:\n  Value generated by dbt which is `result.execution_time`\n\n- `file_test_defined`:\n  Value generated by dbt which is `result.node.original_file_path`\n\n- `dbt_target_name`:\n  Value taken from `target.name`\n\n- `dbt_invocation_id`:\n  Invocation ID that generated by dbt\n\n- `_audit_account_id`:\n  Account ID - Placeholder if we're using dbt Cloud, configured via the environment variable\n\n- `_audit_project_id`:\n  Project ID - builtin environment variable in dbt Cloud [here](https://docs.getdbt.com/docs/dbt-cloud/using-dbt-cloud/cloud-environment-variables#special-environment-variables)\n\n- `_audit_job_id`:\n  Job ID - builtin environment variable in dbt Cloud [here](https://docs.getdbt.com/docs/dbt-cloud/using-dbt-cloud/cloud-environment-variables#special-environment-variables)\n\n- `_audit_run_id`:\n  Run ID - builtin environment variable in dbt Cloud [here](https://docs.getdbt.com/docs/dbt-cloud/using-dbt-cloud/cloud-environment-variables#special-environment-variables)\n\n- `_audit_run_url`:\n  The URL of dbt Cloud's run built from the `_audit` IDs.\n  Sample value: https://cloud.getdbt.com/#/accounts/{_audit_account_id}/projects/{_audit_project_id}/runs/{_audit_run_id}\n\n- `_timestamp`:\n  The timestamp when the test result is recorded", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/general/_general.yml", "arguments": [], "created_at": 1714072384.30745, "supported_languages": null}, "macro.dq_tools.__get_to_column_name": {"name": "__get_to_column_name", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/column/__get_to_column_name.sql", "original_file_path": "macros/artifacts/test/utilities/column/__get_to_column_name.sql", "unique_id": "macro.dq_tools.__get_to_column_name", "macro_sql": "{% macro __get_to_column_name(test_node) %}\n\n  {%- if test_node.test_metadata is defined\n        and (\n          test_node.test_metadata.kwargs.to is defined\n          or test_node.test_metadata.kwargs.compare_model is defined\n        )\n        and test_node.test_metadata.kwargs.field is defined -%}\n\n    {{ return(test_node.test_metadata.kwargs.field) }}\n\n  {%- endif %}\n\n  {{ return('') }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Return referenced column name (probably happen in relationship test)", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/column/column.yml", "arguments": [], "created_at": 1714072384.307714, "supported_languages": null}, "macro.dq_tools.__get_column_name": {"name": "__get_column_name", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/column/__get_column_name.sql", "original_file_path": "macros/artifacts/test/utilities/column/__get_column_name.sql", "unique_id": "macro.dq_tools.__get_column_name", "macro_sql": "{% macro __get_column_name(test_node) %}\n\n  {%- if test_node.test_metadata is defined -%}\n\n    {{ return(test_node.test_metadata.kwargs.column_name or test_node.test_metadata.kwargs.field) }}\n\n  {%- endif %}\n\n  {{ return('') }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Return column name", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/column/column.yml", "arguments": [], "created_at": 1714072384.307678, "supported_languages": null}, "macro.dq_tools.__get_kpi_categorize": {"name": "__get_kpi_categorize", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/dq/__get_kpi_categorize.sql", "original_file_path": "macros/artifacts/test/utilities/dq/__get_kpi_categorize.sql", "unique_id": "macro.dq_tools.__get_kpi_categorize", "macro_sql": "{% macro __get_kpi_categorize(test_node) %}\n\n  {% if test_node.test_metadata is defined\n    and test_node.test_metadata.kwargs.kpi_category is defined %}\n    {# 1. Find value in kwargs.kpi_category -#}\n    {{ return(test_node.test_metadata.kwargs.kpi_category) }}\n  {% endif %}\n\n  {% if test_node.config.meta.kpi_category is defined %}\n    {# 2. Find value in meta.kpi_category -#}\n    {{ return(test_node.config.meta.kpi_category) }}\n  {% endif %}\n\n  {# 3. Auto-assign KPI -#}\n  {{ return(dq_tools.__auto_categorize_kpi(test_node)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.__auto_categorize_kpi"]}, "description": "Get `kpi_catogory` configured in the test. Otherwise value is auto-assigned.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/dq/dq.yml", "arguments": [], "created_at": 1714072384.307796, "supported_languages": null}, "macro.dq_tools.__auto_categorize_kpi": {"name": "__auto_categorize_kpi", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/dq/__get_kpi_categorize.sql", "original_file_path": "macros/artifacts/test/utilities/dq/__get_kpi_categorize.sql", "unique_id": "macro.dq_tools.__auto_categorize_kpi", "macro_sql": "{% macro __auto_categorize_kpi(test_node) %}\n\n  {% if dq_tools.__get_test_type(test_node) == 'singular' %}\n    {{ return('Validity') }} {# Should be same as expression_is_true default config -#}\n  {% endif %}\n\n  {%- set test_name = dq_tools.__get_test_name(test_node) -%}\n  {# Accuracy #}\n  {% set accuracies = ['accepted_values'] %}\n  {% for item in accuracies if item in test_name %}\n    {{ return('Accuracy') }}\n  {% endfor %}\n\n  {# Consistency #}\n  {% set consistencies = ['equal_rowcount','equality','relationships'] %}\n  {% for item in consistencies if item in test_name %}\n    {{ return('Consistency') }}\n  {% endfor %}\n\n  {# Completeness #}\n  {% set completenesses = ['not_null'] %}\n  {% for item in completenesses if item in test_name %}\n    {{ return('Completeness') }}\n  {% endfor %}\n\n  {# Timeliness #}\n  {% set timelinesses = ['recency'] %}\n  {% for item in timelinesses if item in test_name %}\n    {{ return('Timeliness') }}\n  {% endfor %}\n\n  {# Validity #}\n  {% set validities = ['expression_is_true'] %}\n  {% for item in validities if item in test_name %}\n    {{ return('Validity') }}\n  {% endfor %}\n\n  {# Uniqueness #}\n  {% set uniquenesses = ['unique'] %}\n  {% for item in uniquenesses if item in test_name %}\n    {{ return('Uniqueness') }}\n  {% endfor %}\n\n  {{ return('Other') }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.__get_test_type", "macro.dq_tools.__get_test_name"]}, "description": "Get `kpi_catogory` based on the test name\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/dq/dq.yml", "arguments": [], "created_at": 1714072384.3078341, "supported_languages": null}, "macro.dq_tools.__get_dq_issue_type": {"name": "__get_dq_issue_type", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/dq/__get_dq_issue_type.sql", "original_file_path": "macros/artifacts/test/utilities/dq/__get_dq_issue_type.sql", "unique_id": "macro.dq_tools.__get_dq_issue_type", "macro_sql": "{% macro __get_dq_issue_type(test_node) %}\n\n  {% if test_node.test_metadata is defined\n    and test_node.test_metadata.kwargs.dq_issue_type is defined %}\n    {# 1. Find value in kwargs.dq_issue_type -#}\n    {{ return(test_node.test_metadata.kwargs.dq_issue_type) }}\n  {% endif %}\n\n  {% if test_node.config.meta.dq_issue_type is defined %}\n    {# 2. Find value in meta.dq_issue_type -#}\n    {{ return(test_node.config.meta.dq_issue_type) }}\n  {% endif %}\n\n  {# 3. Auto-assign DQ issue type -#}\n  {{ return(dq_tools.__auto_dq_issue_type(test_node)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.__auto_dq_issue_type"]}, "description": "Get `dq_issue_type` configured in the test. Otherwise value is auto-assigned.\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/dq/dq.yml", "arguments": [], "created_at": 1714072384.307872, "supported_languages": null}, "macro.dq_tools.__auto_dq_issue_type": {"name": "__auto_dq_issue_type", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/test/utilities/dq/__get_dq_issue_type.sql", "original_file_path": "macros/artifacts/test/utilities/dq/__get_dq_issue_type.sql", "unique_id": "macro.dq_tools.__auto_dq_issue_type", "macro_sql": "{% macro __auto_dq_issue_type(test_node) %}\n\n  {% if dq_tools.__get_test_type(test_node) == 'singular' %}\n    {{ return('business test') }}\n  {% endif %}\n\n  {%- set test_name = dq_tools.__get_test_name(test_node) -%}\n\n  {% if test_name.endswith('_where_db') %}\n    {% set test_name = test_name[0:-9] %}\n  {% endif %}\n  {% if test_name.endswith('_db') %}\n    {% set test_name = test_name[0:-3] %}\n  {% endif %}\n\n\n  {{ return(test_name | replace('_', ' ')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.__get_test_type", "macro.dq_tools.__get_test_name"]}, "description": "Get `kpi_catogory` based on the test name", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/test/utilities/dq/dq.yml", "arguments": [], "created_at": 1714072384.307909, "supported_languages": null}, "macro.dq_tools.__get_tables_from_graph": {"name": "__get_tables_from_graph", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/artifacts/graph/__get_tables_from_graph.sql", "original_file_path": "macros/artifacts/graph/__get_tables_from_graph.sql", "unique_id": "macro.dq_tools.__get_tables_from_graph", "macro_sql": "{% macro __get_tables_from_graph() %}\n\n    {% set nodes = [] %}\n    {% if  execute %}\n        {% do nodes.extend(graph.sources.values()) %}\n        {% do nodes.extend(graph.nodes.values() | selectattr(\"resource_type\", \"in\", ['model','snapshot','seed'])) %}\n    {% endif %}\n    {{ return(nodes) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Returns all graph materializable nodes which are source, model, seed, snapshot", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dq_tools://macros/artifacts/graph/__get_tables_from_graph.yml", "arguments": [], "created_at": 1714072384.307991, "supported_languages": null}, "macro.dq_tools.dq_exec_custom_test_db": {"name": "dq_exec_custom_test_db", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/singular_tests/dq_exec_custom_test_db.sql", "original_file_path": "macros/singular_tests/dq_exec_custom_test_db.sql", "unique_id": "macro.dq_tools.dq_exec_custom_test_db", "macro_sql": "{% macro dq_exec_custom_test_db(business_test_code, business_test_comment, sql_cmd, severity_level) %}\n\n{% set severity_level = kwargs.get('severity_level', 'warn') %}\n{% set sql_cmd_c = sql_cmd | replace('\\'','\\'\\'') %}\n{% set p_invocation_id = invocation_id %}\n\n\n{{\n    config(\n      severity = severity_level\n    )\n}}\n\n{% set sql_cmd %}\n\n    begin;\n\n    insert into {{ var('dbt_dq_tool_database', target.database) }}.DBT.DQ_BUSINESS_CHECK_LOG (business_check_code, business_check_comment, check_timestamp, no_of_records, invocation_id, dq_model, severity, sql_cmd)\n\n    with subsql as\n    (\n    -- custom query\n    {{ sql_cmd }}\n    )\n\n    select\n            -- each business check has to have a unique business_test_code. you can filter on in later\n            '{{ business_test_code }}' as business_test_code,\n            -- explain the purpose of the test, this will be shown in the report\n            '{{ business_test_comment }}' as business_test_comment,\n            to_timestamp_ntz(convert_timezone('UTC', current_timestamp)) check_timestamp,\n            count(*) no_of_records,\n            '{{ p_invocation_id }}' invocation_id,\n            '{{ this }}' dq_model,\n            '{{ severity_level }}' severity,\n            '{{ sql_cmd_c }}' sql_cmd\nfrom subsql\nhaving no_of_records > 0;\n\ncommit;\n\n{% endset %}\n\n\n{% if execute %}\n   {% do run_query(sql_cmd) %}\n\n   select 1\n   from {{ var('dbt_dq_tool_database', target.database) }}.DBT.DQ_BUSINESS_CHECK_LOG\n   where invocation_id='{{ p_invocation_id }}'\n         and dq_model = '{{ this }}'\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1755662, "supported_languages": null}, "macro.dq_tools.test_equal_rowcount_where_db": {"name": "test_equal_rowcount_where_db", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/generic_tests/test_equal_rowcount_where_db.sql", "original_file_path": "macros/generic_tests/test_equal_rowcount_where_db.sql", "unique_id": "macro.dq_tools.test_equal_rowcount_where_db", "macro_sql": "{% test equal_rowcount_where_db(model, compare_model) %}\n\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\n{% set compare_model_where = kwargs.get('compare_model_where', kwargs.get('arg')) %}\n{% set severity_level = kwargs.get('severity_level', 'warn') %}\n{% set kpi_category = kwargs.get('kpi_category', 'Consistency') %}\n{% set p_invocation_id = invocation_id %}\n{% set model_text = model | replace(\"'\", \"''\") %}\n{% set columns_csv = kwargs.get('columns_csv', '*') %}\n{% set compare_columns_csv = kwargs.get('compare_columns_csv', kwargs.get('columns_csv', '*')) %}\n\n\n{% if kpi_category not in ['Accuracy', 'Consistency', 'Completeness', 'Timeliness', 'Validity', 'Uniqueness'] %}\n    {% set kpi_category = 'Other'%}\n{% endif %}\n\n\n\n{{\n    config(\n      severity = severity_level\n    )\n}}\n\n{% set sql_cmd %}\n\n    {{ dq_tools.transaction_begin() }}\n\n    insert into {{ var('dbt_dq_tool_database', target.database) }}.{{var('dbt_dq_tool_schema', target.schema)}}.dq_issue_log (check_timestamp, table_name, dq_issue_type, ref_table, invocation_id, dq_model, severity, kpi_category, no_of_records, no_of_records_failed)\n      (\n        with left_table as (\n\n          select\n            count({{ columns_csv }}) as count_a\n\n          from {{model}}\n\n          {% if where %} where {{ where }} {% endif %}\n\n        ),\n\n        right_table as (\n\n          select\n            count({{ compare_columns_csv }}) as count_b\n\n          from {{ compare_model }}\n\n          {% if compare_model_where %} where {{ compare_model_where }} {% endif %}\n\n        ),\n\n        final as (\n\n            select abs (\n                (select count_a from left_table) - (select count_b from right_table)\n            ) as diff_count\n        )\n\n        select\n            {{ dq_tools.current_timestamp() }} check_timestamp\n          , '{{ model_text }}' table_name\n          , 'equal row count' dq_issue_type\n          , '{{ compare_model }}' ref_table\n\n          , '{{ p_invocation_id }}' invocation_id\n          , '{{ this }}' dq_model\n          , '{{ severity_level }}' severity\n          , '{{ kpi_category }}' kpi_category\n          , (select count_a from left_table) as no_of_records\n          , diff_count as no_of_records_failed\n        from final\n\n      );\n\n    {{ dq_tools.transaction_commit() }}\n\n{% endset %}\n\n{% if var('dbt_test_results_to_db', False) %}\n   {% do run_query(sql_cmd) %}\n{% endif %}\n\n    with left_table as (\n\n        select\n          count({{ columns_csv }}) as count_a\n\n        from {{model}}\n\n        {% if where %} where {{ where }} {% endif %}\n\n      ),\n\n      right_table as (\n\n        select\n          count({{ compare_columns_csv }}) as count_b\n\n        from {{ compare_model }}\n\n        {% if compare_model_where %} where {{ compare_model_where }} {% endif %}\n\n      ),\n\n      final as (\n\n          select abs (\n              (select count_a from left_table) - (select count_b from right_table)\n          ) as diff_count\n      )\n\n      select\n          1\n      from final\n      where diff_count > 0\n\n{% endtest %}", "depends_on": {"macros": ["macro.dq_tools.transaction_begin", "macro.dq_tools.current_timestamp", "macro.dq_tools.transaction_commit", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.179578, "supported_languages": null}, "macro.dq_tools.test_accepted_values_where_db": {"name": "test_accepted_values_where_db", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/generic_tests/test_accepted_values_where_db.sql", "original_file_path": "macros/generic_tests/test_accepted_values_where_db.sql", "unique_id": "macro.dq_tools.test_accepted_values_where_db", "macro_sql": "{% test accepted_values_where_db(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\n{% set severity_level = kwargs.get('severity_level', 'warn') %}\n{% set kpi_category = kwargs.get('kpi_category', 'Accuracy') %}\n{% set p_invocation_id = invocation_id %}\n{% set model_text = model | replace(\"'\", \"''\") %}\n\n{% set values_sql %}\n    (\n    {%- for value in values %}\n        '{{value}}'\n        {%- if not loop.last -%},\n        {%-  else -%} )\n        {%- endif %}\n    {%- endfor %}\n\n{% endset%}\n\n\n{% if kpi_category not in ['Accuracy', 'Consistency', 'Completeness', 'Timeliness', 'Validity', 'Uniqueness'] %}\n    {% set kpi_category = 'Other' %}\n{% endif %}\n\n\n{{\n    config(\n      severity = severity_level\n    )\n}}\n\n\n{% set sql_cmd %}\n\n   {{ dq_tools.transaction_begin() }}\n\n    insert into {{ var('dbt_dq_tool_database', target.database) }}.{{var('dbt_dq_tool_schema', target.schema)}}.dq_issue_log (check_timestamp, table_name, column_name, dq_issue_type, invocation_id, dq_model, severity, kpi_category, no_of_records, no_of_records_failed)\n    select\n          {{ dq_tools.current_timestamp() }} check_timestamp\n       , '{{ model_text }}' table_name\n       , '{{ column_name }}' column_name\n       , 'accepted value' dq_issue_type\n\n       , '{{ p_invocation_id }}' invocation_id\n       , '{{ this }}' dq_model\n       , '{{ severity_level }}' severity\n       , '{{ kpi_category }}' kpi_category\n       , count(*) no_of_records\n       , sum(case when {{ column_name }} not in {{ values_sql }} then 1 else 0 end) no_of_records_failed\n\n    from {{ model }}\n    {% if where %} where {{ where }} {% endif %}\n    group by check_timestamp, table_name, column_name, dq_issue_type, invocation_id, dq_model, severity, kpi_category;\n\n    {{ dq_tools.transaction_commit() }}\n{% endset %}\n\n{% if var('dbt_test_results_to_db', False) %}\n   {% do run_query(sql_cmd) %}\n{% endif %}\n\n    with cte as (\n        select\n            {{ column_name }}\n        from {{ model }}\n        {% if where %} where {{ where }} {% endif %}\n    )\n\n    select\n        *\n    from cte\n    where {{ column_name }} not in {{ values_sql }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dq_tools.transaction_begin", "macro.dq_tools.current_timestamp", "macro.dq_tools.transaction_commit", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1827369, "supported_languages": null}, "macro.dq_tools.test_relationships_where_db": {"name": "test_relationships_where_db", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/generic_tests/test_relationships_where_db.sql", "original_file_path": "macros/generic_tests/test_relationships_where_db.sql", "unique_id": "macro.dq_tools.test_relationships_where_db", "macro_sql": "{% test relationships_where_db(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n{% set from_condition = kwargs.get('from_condition', \"1=1\") %}\n{% set to_condition = kwargs.get('to_condition', \"1=1\") %}\n{% set severity_level = kwargs.get('severity_level', 'warn') %}\n{% set kpi_category = kwargs.get('kpi_category', 'Consistency') %}\n{% set p_invocation_id = invocation_id %}\n{% set model_text = model | replace(\"'\", \"''\") %}\n{% set field_text = field | replace(\"'\", \"''\") %}\n\n\n{% if kpi_category not in ['Accuracy', 'Consistency', 'Completeness', 'Timeliness', 'Validity', 'Uniqueness'] %}\n    {% set kpi_category = 'Other'%}\n{% endif %}\n\n\n\n{{\n    config(\n      severity = severity_level\n    )\n}}\n\n{% set sql_cmd %}\n\n    {{ dq_tools.transaction_begin() }}\n\n    insert into {{ var('dbt_dq_tool_database', target.database) }}.{{var('dbt_dq_tool_schema', target.schema)}}.dq_issue_log (check_timestamp, table_name, column_name, dq_issue_type, ref_table, ref_column, invocation_id, dq_model, severity, kpi_category, no_of_records, no_of_records_failed)\n      (\n        with left_table as (\n\n          select\n            {{column_name}} as ref_id\n\n          from {{model}}\n\n          where {{column_name}} is not null\n            and {{from_condition}}\n            {% if where %} and {{ where }} {% endif %}\n\n        ),\n\n        right_table as (\n\n          select\n            {{field}} as ref_id\n\n          from {{to}}\n\n          where {{field}} is not null\n            and {{to_condition}}\n\n        )\n\n        select\n            {{ dq_tools.current_timestamp() }} check_timestamp\n          , '{{ model_text }}' table_name\n          , '{{ column_name }}' column_name\n          , 'reference integrity' dq_issue_type\n          , '{{ to }}' ref_table\n          , '{{ field_text }}' ref_column\n\n          , '{{ p_invocation_id }}' invocation_id\n          , '{{ this }}' dq_model\n          , '{{ severity_level }}' severity\n          , '{{ kpi_category }}' kpi_category\n          , count(*) no_of_records\n          , sum(case when right_table.ref_id is null then 1 else 0 end) no_of_records_failed\n        from left_table\n               left join right_table\n                on left_table.ref_id = right_table.ref_id\n        group by check_timestamp, table_name, column_name, dq_issue_type, invocation_id, dq_model, severity, kpi_category\n\n      );\n\n    {{ dq_tools.transaction_commit() }}\n\n{% endset %}\n\n{% if var('dbt_test_results_to_db', False) %}\n\n    {% do run_query(sql_cmd) %}\n{% endif %}\n\n    with left_table as (\n\n        select\n          {{column_name}} as ref_id\n\n        from {{model}}\n\n        where {{column_name}} is not null\n          and {{from_condition}}\n          {% if where %} and {{ where }} {% endif %}\n\n      ),\n\n      right_table as (\n\n        select\n          {{field}} as ref_id\n\n        from {{to}}\n\n        where {{field}} is not null\n          and {{to_condition}}\n\n      )\n\n      select\n          *\n      from left_table\n          left join right_table\n          on left_table.ref_id = right_table.ref_id\n      where right_table.ref_id is null\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dq_tools.transaction_begin", "macro.dq_tools.current_timestamp", "macro.dq_tools.transaction_commit", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.1869051, "supported_languages": null}, "macro.dq_tools.test_equality_where_db": {"name": "test_equality_where_db", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/generic_tests/test_equality_where_db.sql", "original_file_path": "macros/generic_tests/test_equality_where_db.sql", "unique_id": "macro.dq_tools.test_equality_where_db", "macro_sql": "{% test equality_where_db(model, compare_model) %}\n\n{% set compare_columns = kwargs.get('compare_columns', None) %}\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\n{% set compare_model_where = kwargs.get('compare_model_where', kwargs.get('arg')) %}\n{% set severity_level = kwargs.get('severity_level', 'warn') %}\n{% set kpi_category = kwargs.get('kpi_category', 'Consistency') %}\n{% set p_invocation_id = invocation_id %}\n{% set model_text = model | replace(\"'\", \"''\") %}\n\n\n{% if kpi_category not in ['Accuracy', 'Consistency', 'Completeness', 'Timeliness', 'Validity', 'Uniqueness'] %}\n    {% set kpi_category = 'Other'%}\n{% endif %}\n\n\n{%- if not compare_columns -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\n\n{{\n    config(\n      severity = severity_level\n    )\n}}\n\n{% set sql_cmd %}\n\n    {{ dq_tools.transaction_begin() }}\n\n    insert into {{ var('dbt_dq_tool_database', target.database) }}.{{var('dbt_dq_tool_schema', target.schema)}}.dq_issue_log (check_timestamp, table_name, dq_issue_type, ref_table, invocation_id, dq_model, severity, kpi_category, no_of_records, no_of_records_failed)\n      (\n        with left_table as (\n\n          select\n            *\n          from {{model}}\n\n          {% if where %} where {{ where }} {% endif %}\n\n        ),\n\n        right_table as (\n\n          select\n            *\n          from {{ compare_model }}\n\n          {% if compare_model_where %} where {{ compare_model_where }} {% endif %}\n\n        ),\n\n        left_minus_right as (\n\n            select {{ compare_cols_csv }} from left_table\n            {{ dq_tools.except() }}\n            select {{ compare_cols_csv }} from right_table\n\n        ),\n\n        right_minus_left as (\n\n            select {{ compare_cols_csv }} from right_table\n            {{ dq_tools.except() }}\n            select {{ compare_cols_csv }} from left_table\n\n        ),\n\n        unionized as (\n            select * from left_minus_right\n            union all\n            select * from right_minus_left\n        )\n\n        select\n            {{ dq_tools.current_timestamp() }} check_timestamp\n          , '{{ model_text }}' table_name\n          , 'equality' dq_issue_type\n          , '{{ compare_model }}' ref_table\n\n          , '{{ p_invocation_id }}' invocation_id\n          , '{{ this }}' dq_model\n          , '{{ severity_level }}' severity\n          , '{{ kpi_category }}' kpi_category\n          , (select count(*) from left_table) as no_of_records\n          , (select count(*) from unionized) as no_of_records_failed\n      );\n\n    {{ dq_tools.transaction_commit() }}\n\n{% endset %}\n\n{% if var('dbt_test_results_to_db', False) %}\n   {% do run_query(sql_cmd) %}\n{% endif %}\n\n    with left_table as (\n\n          select\n            *\n          from {{model}}\n\n          {% if where %} where {{ where }} {% endif %}\n\n        ),\n\n        right_table as (\n\n          select\n            *\n          from {{ compare_model }}\n\n          {% if compare_model_where %} where {{ compare_model_where }} {% endif %}\n\n        ),\n\n        left_minus_right as (\n\n            select {{ compare_cols_csv }} from left_table\n            {{ dq_tools.except() }}\n            select {{ compare_cols_csv }} from right_table\n\n        ),\n\n        right_minus_left as (\n\n            select {{ compare_cols_csv }} from right_table\n            {{ dq_tools.except() }}\n            select {{ compare_cols_csv }} from left_table\n\n        ),\n\n        unionized as (\n            select * from left_minus_right\n            union all\n            select * from right_minus_left\n        )\n\n        select *\n        from unionized\n\n{% endtest %}", "depends_on": {"macros": ["macro.dq_tools.transaction_begin", "macro.dq_tools.except", "macro.dq_tools.current_timestamp", "macro.dq_tools.transaction_commit", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.192383, "supported_languages": null}, "macro.dq_tools.test_unique_where_db": {"name": "test_unique_where_db", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/generic_tests/test_unique_where_db.sql", "original_file_path": "macros/generic_tests/test_unique_where_db.sql", "unique_id": "macro.dq_tools.test_unique_where_db", "macro_sql": "{% test unique_where_db(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\n{% set severity_level = kwargs.get('severity_level', 'warn') %}\n{% set kpi_category = kwargs.get('kpi_category', 'Uniqueness') %}\n{% set p_invocation_id = invocation_id %}\n{% set model_text = model | replace(\"'\", \"''\") %}\n\n\n{% if kpi_category not in ['Accuracy', 'Consistency', 'Completeness', 'Timeliness', 'Validity', 'Uniqueness'] %}\n    {% set kpi_category = 'Other'%}\n{% endif %}\n\n\n\n{{\n    config(\n      severity = severity_level\n    )\n}}\n\n{% set sql_cmd %}\n\n    {{ dq_tools.transaction_begin() }}\n\n    insert into {{ var('dbt_dq_tool_database', target.database) }}.{{var('dbt_dq_tool_schema', target.schema)}}.dq_issue_log (check_timestamp, table_name, column_name, dq_issue_type, invocation_id, dq_model, severity, kpi_category, no_of_records, no_of_records_failed)\n      (\n\n        with duplications as (\n            select\n                row_number() over (partition by {{ column_name }} order by 1) duplicated_value\n            from {{ model }}\n            {% if where %} where {{ where }} {% endif %}\n        )\n\n        select\n            {{ dq_tools.current_timestamp() }} check_timestamp\n          , '{{ model_text }}' table_name\n          , '{{ column_name }}' column_name\n          , 'uniqueness' dq_issue_type\n\n          , '{{ p_invocation_id }}' invocation_id\n          , '{{ this }}' dq_model\n          , '{{ severity_level }}' severity\n          , '{{ kpi_category }}' kpi_category\n          , count(*) no_of_records\n          , sum(case when duplicated_value>1 then 1 else 0 end) no_of_records_failed\n        from duplications\n\n      );\n\n    {{ dq_tools.transaction_commit() }}\n\n{% endset %}\n\n\n{% if var('dbt_test_results_to_db', False) %}\n    {% do run_query(sql_cmd) %}\n{% endif %}\n\n    with duplications as (\n        select\n            row_number() over (partition by {{ column_name }} order by 1) duplicated_value\n        from {{ model }}\n        {% if where %} where {{ where }} {% endif %}\n    )\n\n    select\n        *\n    from duplications\n    where duplicated_value > 1\n\n{% endtest %}", "depends_on": {"macros": ["macro.dq_tools.transaction_begin", "macro.dq_tools.current_timestamp", "macro.dq_tools.transaction_commit", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.194856, "supported_languages": null}, "macro.dq_tools.test_expression_is_true_db": {"name": "test_expression_is_true_db", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/generic_tests/test_expression_is_true_db.sql", "original_file_path": "macros/generic_tests/test_expression_is_true_db.sql", "unique_id": "macro.dq_tools.test_expression_is_true_db", "macro_sql": "{% test expression_is_true_db(model, condition) %}\n\n{% set expression = kwargs.get('expression', kwargs.get('arg')) %}\n{% set severity_level = kwargs.get('severity_level', 'warn') %}\n{% set kpi_category = kwargs.get('kpi_category', 'Validity') %}\n{% set p_invocation_id = invocation_id %}\n{% set model_text = model | replace(\"'\", \"''\") %}\n\n\n{% if kpi_category not in ['Accuracy', 'Consistency', 'Completeness', 'Timeliness', 'Validity', 'Uniqueness'] %}\n    {% set kpi_category = 'Other'%}\n{% endif %}\n\n\n\n{{\n    config(\n      severity = severity_level\n    )\n}}\n\n{% set sql_cmd %}\n\n   {{ dq_tools.transaction_begin() }}\n\n    insert into {{ var('dbt_dq_tool_database', target.database) }}.{{var('dbt_dq_tool_schema', target.schema)}}.dq_issue_log (check_timestamp, table_name, dq_issue_type, invocation_id, dq_model, severity, kpi_category, no_of_records, no_of_records_failed)\n    select\n          {{ dq_tools.current_timestamp() }} check_timestamp\n       , '{{ model_text }}' table_name\n       , 'expression' dq_issue_type\n\n       , '{{ p_invocation_id }}' invocation_id\n       , '{{ this }}' dq_model\n       , '{{ severity_level }}' severity\n       , '{{ kpi_category }}' kpi_category\n       , count(*) no_of_records\n       , sum(case when not {{ expression }} then 1 else 0 end) no_of_records_failed\n\n    from {{ model }}\n    group by check_timestamp, table_name, dq_issue_type, invocation_id, dq_model, severity, kpi_category;\n\n    {{ dq_tools.transaction_commit() }}\n{% endset %}\n\n{% if var('dbt_test_results_to_db', False) %}\n   {% do run_query(sql_cmd) %}\n{% endif %}\n\n    select\n       *\n    from {{ model }}\n    where not {{ expression }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dq_tools.transaction_begin", "macro.dq_tools.current_timestamp", "macro.dq_tools.transaction_commit", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.196665, "supported_languages": null}, "macro.dq_tools.test_not_null_where_db": {"name": "test_not_null_where_db", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/generic_tests/test_not_null_where_db.sql", "original_file_path": "macros/generic_tests/test_not_null_where_db.sql", "unique_id": "macro.dq_tools.test_not_null_where_db", "macro_sql": "{% test not_null_where_db(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set where = kwargs.get('where', kwargs.get('arg')) %}\n{% set severity_level = kwargs.get('severity_level', 'warn') %}\n{% set kpi_category = kwargs.get('kpi_category', 'Completeness') %}\n{% set p_invocation_id = invocation_id %}\n{% set model_text = model | replace(\"'\", \"''\") %}\n\n\n{% if kpi_category not in ['Accuracy', 'Consistency', 'Completeness', 'Timeliness', 'Validity', 'Uniqueness'] %}\n    {% set kpi_category = 'Other'%}\n{% endif %}\n\n\n\n{{\n    config(\n      severity = severity_level\n    )\n}}\n\n{% set sql_cmd %}\n\n    {{ dq_tools.transaction_begin() }}\n\n    insert into {{ var('dbt_dq_tool_database', target.database) }}.{{var('dbt_dq_tool_schema', target.schema)}}.dq_issue_log (check_timestamp, table_name, column_name, dq_issue_type, invocation_id, dq_model, severity, kpi_category, no_of_records, no_of_records_failed)\n    select\n          {{ dq_tools.current_timestamp() }} check_timestamp\n       , '{{ model_text }}' table_name\n       , '{{ column_name }}' column_name\n       , 'null value' dq_issue_type\n\n       , '{{ p_invocation_id }}' invocation_id\n       , '{{ this }}' dq_model\n       , '{{ severity_level }}' severity\n       , '{{ kpi_category }}' kpi_category\n       , count(*) no_of_records\n       , sum(case when {{ column_name }} is null then 1 else 0 end) no_of_records_failed\n\n    from {{ model }}\n    {% if where %} where {{ where }} {% endif %}\n    group by check_timestamp, table_name, column_name, dq_issue_type, invocation_id, dq_model, severity, kpi_category;\n\n    {{ dq_tools.transaction_commit() }}\n{% endset %}\n\n{% if var('dbt_test_results_to_db', False) %}\n   {% do run_query(sql_cmd) %}\n{% endif %}\n\n    with cte as (\n        select\n            {{ column_name}}\n        from {{ model }}\n        {% if where %} where {{ where }} {% endif %}\n    )\n    select\n        *\n    from cte\n    where {{ column_name }} is null\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dq_tools.transaction_begin", "macro.dq_tools.current_timestamp", "macro.dq_tools.transaction_commit", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.198944, "supported_languages": null}, "macro.dq_tools.test_recency_db": {"name": "test_recency_db", "resource_type": "macro", "package_name": "dq_tools", "path": "macros/generic_tests/test_recency_db.sql", "original_file_path": "macros/generic_tests/test_recency_db.sql", "unique_id": "macro.dq_tools.test_recency_db", "macro_sql": "{% test recency_db(model, datepart, interval) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set severity_level = kwargs.get('severity_level', 'warn') %}\n{% set kpi_category = kwargs.get('kpi_category', 'Timeliness') %}\n{% set p_invocation_id = invocation_id %}\n{% set model_text = model | replace(\"'\", \"''\") %}\n\n\n{% if kpi_category not in ['Accuracy', 'Consistency', 'Completeness', 'Timeliness', 'Validity', 'Uniqueness'] %}\n    {% set kpi_category = 'Other'%}\n{% endif %}\n\n\n\n{{\n    config(\n      severity = severity_level\n    )\n}}\n\n{% set sql_cmd %}\n\n   {{ dq_tools.transaction_begin() }}\n\n    insert into {{ var('dbt_dq_tool_database', target.database) }}.{{var('dbt_dq_tool_schema', target.schema)}}.dq_issue_log (check_timestamp, table_name, column_name, dq_issue_type, invocation_id, dq_model, severity, kpi_category, no_of_records, no_of_records_failed)\n    (\n      with max_date as\n      (\n         select\n         max({{column_name}}) max_date_value\n         from {{model}}\n      )\n\n      select\n            {{ dq_tools.current_timestamp() }} check_timestamp\n         , '{{ model_text }}' table_name\n         , '{{ column_name }}' column_name\n         , 'recency' dq_issue_type\n\n         , '{{ p_invocation_id }}' invocation_id\n         , '{{ this }}' dq_model\n         , '{{ severity_level }}' severity\n         , '{{ kpi_category }}' kpi_category\n         , 1 no_of_records\n         , case when max_date_value >= {{ dq_tools.dateadd(datepart, interval * -1, dq_tools.current_timestamp()) }} then 0 else 1 end no_of_records_failed\n      from max_date\n    );\n\n    {{ dq_tools.transaction_commit() }}\n{% endset %}\n\n{% if var('dbt_test_results_to_db', False) %}\n   {% do run_query(sql_cmd) %}\n{% endif %}\n      {%- set threshold = dq_tools.dateadd(datepart, interval * -1, dq_tools.current_timestamp()) -%}\n      with max_date as\n      (\n         select   max({{column_name}}) max_date_value\n         from     {{model}}\n      )\n      select   max_date_value\n               ,{{ threshold }} as threshold\n      from     max_date\n      where    max_date_value < {{ threshold }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dq_tools.transaction_begin", "macro.dq_tools.current_timestamp", "macro.dq_tools.dateadd", "macro.dq_tools.transaction_commit", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.201534, "supported_languages": null}, "macro.dbt_datamocktool.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(model, input_mapping, depends_on) %}\r\n    {% set ns=namespace(\r\n        test_sql=\"(select 1) raw_code\",\r\n        rendered_mappings={},\r\n        graph_model=none\r\n    ) %}\r\n\r\n    {% do dbt_datamocktool.__set_rendered_mappings(ns, input_mapping) %}\r\n\r\n    {% if execute %}\r\n        {# inside an execute block because graph nodes aren't well-defined during parsing #}\r\n        {% set ns.graph_model = dbt_datamocktool.__get_graph_model(project_name, model.schema, model.name) %}\r\n        {% set ns.test_sql = ns.graph_model.raw_code %}\r\n        \r\n        {% do dbt_datamocktool.__render_sql_and_replace_references(ns, input_mapping) %}\r\n\r\n        {# mock_model_relation is the mocked model name #}\r\n        {% set mock_model_relation = dbt_datamocktool._get_model_to_mock(\r\n            model, suffix=('_dmt_' ~ modules.datetime.datetime.now().strftime(\"%S%f\"))\r\n        ) %}\r\n\r\n        {% do dbt_datamocktool._create_mock_table_or_view(mock_model_relation, ns.test_sql) %}\r\n\r\n\r\n    {% endif %}\r\n    {% for k in depends_on %}\r\n        -- depends_on: {{ k }}\r\n    {% endfor %}\r\n    \r\n    {{ mock_model_relation }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_datamocktool.__set_rendered_mappings", "macro.dbt_datamocktool.__get_graph_model", "macro.dbt_datamocktool.__render_sql_and_replace_references", "macro.dbt_datamocktool._get_model_to_mock", "macro.dbt_datamocktool._create_mock_table_or_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.203922, "supported_languages": null}, "macro.dbt_datamocktool.get_unit_test_incremental_sql": {"name": "get_unit_test_incremental_sql", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool.get_unit_test_incremental_sql", "macro_sql": "{% macro get_unit_test_incremental_sql(model, input_mapping, depends_on) %}\r\n    {% set ns=namespace(\r\n        test_sql=\"(select 1) raw_code\",\r\n        rendered_mappings={},\r\n        graph_model=none\r\n    ) %}\r\n\r\n    {# doing this outside the execute block allows dbt to infer the proper dependencies #}\r\n    {% do dbt_datamocktool.__set_rendered_mappings(ns, input_mapping) %}\r\n\r\n    {% if execute %}\r\n        {# inside an execute block because graph nodes aren't well-defined during parsing #}\r\n        {% set ns.graph_model = dbt_datamocktool.__get_graph_model(project_name, model.schema, model.name) %}\r\n\r\n        {% set ns.test_sql = ns.graph_model.raw_code %}\r\n\r\n        {# replace is_incremental blocks to true to enable incremental code #}\r\n        {% set ns.test_sql = ns.test_sql|replace('is_incremental()','true') %}     \r\n        \r\n        {% do dbt_datamocktool.__render_sql_and_replace_references(ns, input_mapping) %}\r\n\r\n        {# after rendering - replace \"this\" with mock project and model #}\r\n        {# TODO: try catch  -- if this not exists in input mapping #}\r\n        {% set ns.test_sql = ns.test_sql|replace(this.dataset, model.dataset) %}     \r\n        {% set ns.test_sql = ns.test_sql|replace(this.table, input_mapping.this) %}     \r\n        \r\n        {% set mock_model_relation = dbt_datamocktool._get_model_to_mock(\r\n            model, suffix=('_dmt_' ~ modules.datetime.datetime.now().strftime(\"%S%f\"))\r\n        ) %}\r\n\r\n        {# mock current model state from input #}\r\n        {{ log(\"copying base table\", info=True) }}\r\n        {% do dbt_datamocktool._create_mock_table_or_view(mock_model_relation, \"select * from \" ~ input_mapping.this) %}\r\n        \r\n        {% set unique_key=ns.graph_model.config.unique_key or none %}\r\n        {# mock merge statement#}\r\n        {# need sql to be wrapped in parentheses  - see bq_generate_incremental_build_sql #}\r\n        {% do dbt_datamocktool._create_mock_merge_table(mock_model_relation, \"(\" + ns.test_sql + \")\", dest_columns=adapter.get_columns_in_relation(mock_model_relation), unique_key=unique_key) %}\r\n\r\n    {% endif %}\r\n    {% for k in depends_on %}\r\n        -- depends_on: {{ k }}\r\n    {% endfor %}\r\n    \r\n    {{ mock_model_relation }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_datamocktool.__set_rendered_mappings", "macro.dbt_datamocktool.__get_graph_model", "macro.dbt_datamocktool.__render_sql_and_replace_references", "macro.dbt_datamocktool._get_model_to_mock", "macro.dbt_datamocktool._create_mock_table_or_view", "macro.dbt_datamocktool._create_mock_merge_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2056031, "supported_languages": null}, "macro.dbt_datamocktool._get_model_to_mock": {"name": "_get_model_to_mock", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool._get_model_to_mock", "macro_sql": "{% macro _get_model_to_mock(model, suffix) %}\r\n    {{ return(adapter.dispatch('_get_model_to_mock', 'dbt_datamocktool')(model, suffix)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_datamocktool.default___get_model_to_mock"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.205882, "supported_languages": null}, "macro.dbt_datamocktool.default___get_model_to_mock": {"name": "default___get_model_to_mock", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool.default___get_model_to_mock", "macro_sql": "{% macro default___get_model_to_mock(model, suffix) %}\r\n    {{ return(make_temp_relation(model.incorporate(type='table'), suffix=suffix)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.206078, "supported_languages": null}, "macro.dbt_datamocktool.spark___get_model_to_mock": {"name": "spark___get_model_to_mock", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool.spark___get_model_to_mock", "macro_sql": "{% macro spark___get_model_to_mock(model, suffix) %}\r\n    {{ return(make_temp_relation(model.incorporate(type='table').include(schema=False), suffix=suffix)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.206295, "supported_languages": null}, "macro.dbt_datamocktool.sqlserver___get_model_to_mock": {"name": "sqlserver___get_model_to_mock", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool.sqlserver___get_model_to_mock", "macro_sql": "{% macro sqlserver___get_model_to_mock(model, suffix) %}\r\n    {% set schema = \"datamocktool_tmp\" %}\r\n    {% if not adapter.check_schema_exists(database=model.database, schema=schema) %}\r\n        {% do adapter.create_schema(api.Relation.create(database=model.database, schema=schema)) %}\r\n    {% endif %}\r\n    {% set tmp_identifier = model.identifier ~ suffix %}\r\n    {# SQL Server requires us to specify a table type because it calls `drop_relation_script()` from `create_table_as()`.\r\n    I'd prefer to use something like RelationType.table, but can't find a way to access the relation types #}\r\n    {{ return(model.incorporate(type='view', path={\"identifier\": tmp_identifier, \"schema\": schema})) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.206829, "supported_languages": null}, "macro.dbt_datamocktool._create_mock_table_or_view": {"name": "_create_mock_table_or_view", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool._create_mock_table_or_view", "macro_sql": "{% macro _create_mock_table_or_view(model, test_sql) %}\r\n    {{ return(adapter.dispatch('_create_mock_table_or_view', 'dbt_datamocktool')(model, test_sql)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_datamocktool.default___create_mock_table_or_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2070148, "supported_languages": null}, "macro.dbt_datamocktool.default___create_mock_table_or_view": {"name": "default___create_mock_table_or_view", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool.default___create_mock_table_or_view", "macro_sql": "{% macro default___create_mock_table_or_view(model, test_sql) %}\r\n    {% do run_query(create_table_as(True, model, test_sql)) %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.207181, "supported_languages": null}, "macro.dbt_datamocktool.sqlserver___create_mock_table_or_view": {"name": "sqlserver___create_mock_table_or_view", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool.sqlserver___create_mock_table_or_view", "macro_sql": "{% macro sqlserver___create_mock_table_or_view(model, test_sql) %}\r\n    {% do run_query(create_view_as(model, test_sql)) %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.207328, "supported_languages": null}, "macro.dbt_datamocktool._create_mock_merge_table": {"name": "_create_mock_merge_table", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool._create_mock_merge_table", "macro_sql": "{% macro _create_mock_merge_table(model, test_sql, dest_columns, unique_key) %}\r\n    {{ return(adapter.dispatch('_create_mock_merge_table', 'dbt_datamocktool')(model, test_sql, dest_columns, unique_key)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_datamocktool.default___create_mock_merge_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.207556, "supported_languages": null}, "macro.dbt_datamocktool.default___create_mock_merge_table": {"name": "default___create_mock_merge_table", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool.default___create_mock_merge_table", "macro_sql": "{% macro default___create_mock_merge_table(model, test_sql, dest_columns, unique_key) %}\r\n    {% do run_query(get_merge_sql(model, test_sql, dest_columns=dest_columns, unique_key=unique_key)) %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.207763, "supported_languages": null}, "macro.dbt_datamocktool.__set_rendered_mappings": {"name": "__set_rendered_mappings", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool.__set_rendered_mappings", "macro_sql": "{% macro __set_rendered_mappings(ns, input_mapping) %}\r\n    {% for k, v in input_mapping.items() %}\r\n        {% do ns.rendered_mappings.update({k: render(v)}) %}    \r\n    {% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.208023, "supported_languages": null}, "macro.dbt_datamocktool.__get_graph_model": {"name": "__get_graph_model", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool.__get_graph_model", "macro_sql": "{% macro __get_graph_model(project_name, model_schema, model_name) %}  \r\n    {% set graph_model = graph.nodes.get(\"model.\" + project_name + \".\" + model_name) %}\r\n    {# if the model uses an alias, the above call was unsuccessful, so loop through the graph to grab it by the alias instead #}\r\n    {% if graph_model is none %}\r\n        {% for node in graph.nodes.values() %}\r\n            {% if node.alias == model_name and node.schema == model_schema %}\r\n                {% set graph_model = node %}\r\n                {{ return(graph_model) }}\r\n            {% endif %}\r\n        {% endfor %}\r\n    {% endif %}\r\n    {{ return(graph_model) }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2087948, "supported_languages": null}, "macro.dbt_datamocktool.__render_sql_and_replace_references": {"name": "__render_sql_and_replace_references", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_get_test_sql.sql", "original_file_path": "macros/dmt_get_test_sql.sql", "unique_id": "macro.dbt_datamocktool.__render_sql_and_replace_references", "macro_sql": "{% macro __render_sql_and_replace_references(ns, input_mapping) %}\r\n    {#- Replace the keys first, before the sql code is rendered -#}\r\n    {% for k, v in ns.rendered_mappings.items() %}\r\n        {% set ns.test_sql = ns.test_sql|replace(\"{{ \"~render(k)~\" }}\", v) %}\r\n    {% endfor %}\r\n\r\n    {#- Render the original sql after all reference values are set according to the provided input\r\n    mapping. -#}\r\n    {% set ns.test_sql = render(ns.test_sql) %}\r\n\r\n    {#- Replace left over rendered keys with their reference values. This is only necessary, if the\r\n    unit test is defined within a macro, since then the input mapping is already rendered within\r\n    the macro itself.-#}\r\n    {% for k, v in ns.rendered_mappings.items() %}\r\n        {% set ns.test_sql = ns.test_sql|replace(k, v) %}\r\n    {% endfor %}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.209374, "supported_languages": null}, "macro.dbt_datamocktool.unit_test": {"name": "unit_test", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_unit_test.sql", "original_file_path": "macros/dmt_unit_test.sql", "unique_id": "macro.dbt_datamocktool.unit_test", "macro_sql": "{%- macro unit_test(model, input_mapping, expected_output, name, description, compare_columns, exclude_columns, depends_on) -%}\n    {%- set test_sql = dbt_datamocktool.get_unit_test_sql(model, input_mapping, depends_on)|trim -%}\n    {%- set test_report = dbt_datamocktool.test_equality(expected_output, name, compare_model=test_sql, compare_columns=compare_columns, exclude_columns=exclude_columns) -%}\n    {{ test_report }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_datamocktool.get_unit_test_sql", "macro.dbt_datamocktool.test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.212158, "supported_languages": null}, "macro.dbt_datamocktool.test_unit_test": {"name": "test_unit_test", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_unit_test.sql", "original_file_path": "macros/dmt_unit_test.sql", "unique_id": "macro.dbt_datamocktool.test_unit_test", "macro_sql": "{%- test unit_test(model, input_mapping, expected_output, name, description, compare_columns, exclude_columns, depends_on) -%}\n     {{ dbt_datamocktool.unit_test(model, input_mapping, expected_output, name, description, compare_columns, exclude_columns, depends_on) }}\n {%- endtest -%}\n\n", "depends_on": {"macros": ["macro.dbt_datamocktool.unit_test"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.212405, "supported_languages": null}, "macro.dbt_datamocktool.unit_test_incremental": {"name": "unit_test_incremental", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_unit_test.sql", "original_file_path": "macros/dmt_unit_test.sql", "unique_id": "macro.dbt_datamocktool.unit_test_incremental", "macro_sql": "{% macro unit_test_incremental(model, input_mapping, expected_output, name, description, compare_columns, exclude_columns, depends_on) %}\n    {%- set test_sql = dbt_datamocktool.get_unit_test_incremental_sql(model, input_mapping, depends_on)|trim -%}\n    {%- set test_report = dbt_datamocktool.test_equality(expected_output, name, compare_model=test_sql, compare_columns=compare_columns, exclude_columns=exclude_columns) -%}\n    {{ test_report }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_datamocktool.get_unit_test_incremental_sql", "macro.dbt_datamocktool.test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2127428, "supported_languages": null}, "macro.dbt_datamocktool.test_unit_test_incremental": {"name": "test_unit_test_incremental", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_unit_test.sql", "original_file_path": "macros/dmt_unit_test.sql", "unique_id": "macro.dbt_datamocktool.test_unit_test_incremental", "macro_sql": "{% test unit_test_incremental(model, input_mapping, expected_output, name, description, compare_columns, exclude_columns, depends_on) %}\n     {{ dbt_datamocktool.unit_test_incremental(model, input_mapping, expected_output, name, description, compare_columns, exclude_columns, depends_on) }}\n {% endtest %}", "depends_on": {"macros": ["macro.dbt_datamocktool.unit_test_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2129889, "supported_languages": null}, "macro.dbt_datamocktool.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_unit_test.sql", "original_file_path": "macros/dmt_unit_test.sql", "unique_id": "macro.dbt_datamocktool.test_equality", "macro_sql": "\n\n{%- macro test_equality(model, name, compare_model, compare_columns=[], exclude_columns=[]) -%}\n\n    -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs.\n    {%- if not execute -%}\n        {{ return('') }}\n    {%- endif -%}\n\n    -- Setup\n    {%- do dbt_utils._is_relation(model, 'test_equality') -%}\n    {%- if compare_columns|length and exclude_columns|length -%}\n        {{ exceptions.raise_compiler_error(\"You cannot provide both compare_columns and exclude_columns\") }}\n    {%- endif -%}\n\n    -- If compare_columns have been provided, we need to query the schema to get the list of columns\n    -- to exclude\n    {%- if compare_columns|length -%}\n        {%- set all_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted')  -%}\n        {%- set exclude_columns = [] -%}\n        {%- for col in all_columns -%}\n            -- In postgres columns come quoted with \"\n            {%- set col = col|replace('\"',\"\") -%}\n            -- In Bigquery columns come quoted with backticks\n            {%- set col = col|replace('`',\"\") -%}\n            {%- if col|upper not in compare_columns|map('upper') -%}\n                {%- do exclude_columns.append(col) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- else -%}\n        -- If we're comparing all columns, or if we're excluding certain columns, then we don't need\n        -- to query the schema, which means the modal can be an ephermeral model\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- endif -%}\n\n    {%- set tables_compared -%}\n    {{ audit_helper.compare_relations(\n        a_relation = model,\n        b_relation = compare_model,\n        exclude_columns = exclude_columns,\n        summarize = False\n    ) }}\n    {%- endset -%}\n\n    -- Run the comparison query\n    {%- set test_report = run_query(tables_compared) -%}\n    {%- if test_report.columns[0].values()|length -%}\n        {%- set test_status = 1 -%}\n    {%- else -%}\n        {%- set test_status = 0 -%}\n    {%- endif-%}\n\n    -- Print output if there are any rows within the table.\n    {%- if test_status == 1 -%}\n        {{ dbt_datamocktool.print_color('{YELLOW}The test <' ~ name ~ '> failed with the differences:') }}\n        {{ dbt_datamocktool.print_color('{RED}================================================================') }}\n        {% do test_report.print_table() %}\n        {{ dbt_datamocktool.print_color('{RED}================================================================') }}\n    {%- endif -%}\n\n    {{ return(tables_compared) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.audit_helper.compare_relations", "macro.dbt.run_query", "macro.dbt_datamocktool.print_color"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.214596, "supported_languages": null}, "macro.dbt_datamocktool.print_color": {"name": "print_color", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_unit_test.sql", "original_file_path": "macros/dmt_unit_test.sql", "unique_id": "macro.dbt_datamocktool.print_color", "macro_sql": "{% macro print_color(string) %}\n  {% do log(dbt_datamocktool.parse_colors(string ~ \"{RESET}\"), info=true) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_datamocktool.parse_colors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.214779, "supported_languages": null}, "macro.dbt_datamocktool.parse_colors": {"name": "parse_colors", "resource_type": "macro", "package_name": "dbt_datamocktool", "path": "macros/dmt_unit_test.sql", "original_file_path": "macros/dmt_unit_test.sql", "unique_id": "macro.dbt_datamocktool.parse_colors", "macro_sql": "{% macro parse_colors(string) %}\n  {{ return (string\n      .replace(\"{RED}\", \"\\x1b[0m\\x1b[31m\")\n      .replace(\"{YELLOW}\", \"\\x1b[0m\\x1b[33m\")\n      .replace(\"{RESET}\", \"\\x1b[0m\")) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.214999, "supported_languages": null}, "macro.dbt_segment.generate_sessionization_incremental_filter": {"name": "generate_sessionization_incremental_filter", "resource_type": "macro", "package_name": "dbt_segment", "path": "macros/generate_sessionization_incremental_filter.sql", "original_file_path": "macros/generate_sessionization_incremental_filter.sql", "unique_id": "macro.dbt_segment.generate_sessionization_incremental_filter", "macro_sql": "{% macro generate_sessionization_incremental_filter(merge_target, filter_tstamp, max_tstamp, operator) %}\n    {{ return(adapter.dispatch('generate_sessionization_incremental_filter', 'dbt_segment') (merge_target, filter_tstamp, max_tstamp, operator)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_segment.bigquery__generate_sessionization_incremental_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.215778, "supported_languages": null}, "macro.dbt_segment.default__generate_sessionization_incremental_filter": {"name": "default__generate_sessionization_incremental_filter", "resource_type": "macro", "package_name": "dbt_segment", "path": "macros/generate_sessionization_incremental_filter.sql", "original_file_path": "macros/generate_sessionization_incremental_filter.sql", "unique_id": "macro.dbt_segment.default__generate_sessionization_incremental_filter", "macro_sql": "{% macro default__generate_sessionization_incremental_filter(merge_target, filter_tstamp, max_tstamp, operator) %}\n    where {{ filter_tstamp }} {{ operator }} (\n        select\n            {{ dbt.dateadd(\n                'hour',\n                -var('segment_sessionization_trailing_window'),\n                'max(' ~ max_tstamp ~ ')'\n            ) }}\n        from {{ merge_target }} \n    )\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.216036, "supported_languages": null}, "macro.dbt_segment.bigquery__generate_sessionization_incremental_filter": {"name": "bigquery__generate_sessionization_incremental_filter", "resource_type": "macro", "package_name": "dbt_segment", "path": "macros/generate_sessionization_incremental_filter.sql", "original_file_path": "macros/generate_sessionization_incremental_filter.sql", "unique_id": "macro.dbt_segment.bigquery__generate_sessionization_incremental_filter", "macro_sql": "{% macro bigquery__generate_sessionization_incremental_filter(merge_target, filter_tstamp, max_tstamp, operator) %}\n    where {{ filter_tstamp }} {{ operator }} (\n        select \n            timestamp_sub(\n                max({{ max_tstamp }}), \n                interval {{ var('segment_sessionization_trailing_window') }} hour\n                )\n        from {{ merge_target }} \n    )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.216245, "supported_languages": null}, "macro.dbt_segment.postgres__generate_sessionization_incremental_filter": {"name": "postgres__generate_sessionization_incremental_filter", "resource_type": "macro", "package_name": "dbt_segment", "path": "macros/generate_sessionization_incremental_filter.sql", "original_file_path": "macros/generate_sessionization_incremental_filter.sql", "unique_id": "macro.dbt_segment.postgres__generate_sessionization_incremental_filter", "macro_sql": "{% macro postgres__generate_sessionization_incremental_filter(merge_target, filter_tstamp, max_tstamp, operator) %}\n    where cast({{ filter_tstamp }} as timestamp) {{ operator }} (\n        select\n            {{ dbt.dateadd(\n                'hour',\n                -var('segment_sessionization_trailing_window'),\n                'max(' ~ max_tstamp ~ ')'\n            ) }}\n        from {{ merge_target }} \n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2165031, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = False) %}\n    {{ return(adapter.dispatch('generate_model_import_ctes', 'codegen')(model_name, leading_commas)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_import_ctes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.221695, "supported_languages": null}, "macro.codegen.default__generate_model_import_ctes": {"name": "default__generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.default__generate_model_import_ctes", "macro_sql": "{% macro default__generate_model_import_ctes(model_name, leading_commas) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n            \n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n        \n            ',\n        'from_source':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark\n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n\n            ',\n        'from_var_1':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n            \n            ',\n        'from_var_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n            \n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark            \n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n            (\\)\\s*}})\n            \n            ',\n        'from_table_1':\n            '(?ix)\n            \n            # first matching group\n            # from or join followed by at least 1 whitespace character            \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)\n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period\n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # seventh matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n\n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period            \n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n\n            # seventh matching group\n            # at least 1 word character            \n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) \n            ([\\]`\\\"\\']?)\n            \n            # ninth matching group\n            # a period             \n            (\\.)\n            \n            # tenth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n            ([\\[`\\\"\\']?)\n            \n            # eleventh matching group\n            # at least 1 word character   \n            (\\w+)\n\n            # twelfth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_3':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character             \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\'])\n            \n            # third matching group\n            # at least 1 word character or space \n            ([\\w ]+)\n\n            # fourth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\'])(?=\\s|$)\n            \n            ',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ print(model_import_ctes) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.227226, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name=\"\") %}\n  {{ return(adapter.dispatch('generate_column_yaml', 'codegen')(column, model_yaml, column_desc_dict, include_data_types, parent_column_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2289732, "supported_languages": null}, "macro.codegen.default__generate_column_yaml": {"name": "default__generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_column_yaml", "macro_sql": "{% macro default__generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name) %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column_name  | lower ) %}\n    {% if include_data_types %}\n        {% do model_yaml.append('        data_type: ' ~ codegen.data_type_format_model(column)) %}\n    {% endif %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, include_data_types, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.data_type_format_model", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.230248, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False, include_data_types=True) -%}\n  {{ return(adapter.dispatch('generate_model_yaml', 'codegen')(model_names, upstream_descriptions, include_data_types)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.230509, "supported_languages": null}, "macro.codegen.default__generate_model_yaml": {"name": "default__generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_model_yaml", "macro_sql": "{% macro default__generate_model_yaml(model_names, upstream_descriptions, include_data_types) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2316039, "supported_languages": null}, "macro.codegen.create_base_models": {"name": "create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.create_base_models", "macro_sql": "{% macro create_base_models(source_name, tables) %}\n    {{ return(adapter.dispatch('create_base_models', 'codegen')(source_name, tables)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__create_base_models"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.231959, "supported_languages": null}, "macro.codegen.default__create_base_models": {"name": "default__create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.default__create_base_models", "macro_sql": "{% macro default__create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.232407, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n  {{ return(adapter.dispatch('generate_base_model', 'codegen')(source_name, table_name, leading_commas, case_sensitive_cols, materialized)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_base_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2333388, "supported_languages": null}, "macro.codegen.default__generate_base_model": {"name": "default__generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.default__generate_base_model", "macro_sql": "{% macro default__generate_base_model(source_name, table_name, leading_commas, case_sensitive_cols, materialized) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ print(base_model_sql) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.234566, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.236578, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=True, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False) %}\n    {{ return(adapter.dispatch('generate_source', 'codegen')(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2370281, "supported_languages": null}, "macro.codegen.default__generate_source": {"name": "default__generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.default__generate_source", "macro_sql": "{% macro default__generate_source(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_data_types %}\n                {% do sources_yaml.append('            data_type: ' ~ codegen.data_type_format_source(column)) %}\n            {% endif %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema", "macro.codegen.data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2390778, "supported_languages": null}, "macro.codegen.format_column": {"name": "format_column", "resource_type": "macro", "package_name": "codegen", "path": "macros/vendored/dbt_core/format_column.sql", "original_file_path": "macros/vendored/dbt_core/format_column.sql", "unique_id": "macro.codegen.format_column", "macro_sql": "{% macro format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.239563, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.24082, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.241243, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.241745, "supported_languages": null}, "macro.codegen.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.243235, "supported_languages": null}, "macro.codegen.data_type_format_source": {"name": "data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_source", "macro_sql": "{% macro data_type_format_source(column) -%}\n  {{ return(adapter.dispatch('data_type_format_source', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.243414, "supported_languages": null}, "macro.codegen.default__data_type_format_source": {"name": "default__data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_source", "macro_sql": "{% macro default__data_type_format_source(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2436008, "supported_languages": null}, "macro.codegen.data_type_format_model": {"name": "data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_model", "macro_sql": "{% macro data_type_format_model(column) -%}\n  {{ return(adapter.dispatch('data_type_format_model', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2437592, "supported_languages": null}, "macro.codegen.default__data_type_format_model": {"name": "default__data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_model", "macro_sql": "{% macro default__data_type_format_model(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2439492, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.251682, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.253837, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.255828, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2571452, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.257788, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.258365, "supported_languages": null}, "macro.dbt_date.trino__get_base_dates": {"name": "trino__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.trino__get_base_dates", "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.259097, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2598112, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2605739, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.260844, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"(row_number() over (order by 1) - 1)\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.261178, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2618802, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2622569, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2624252, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.262889, "supported_languages": null}, "macro.dbt_date.date": {"name": "date", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.date", "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.263191, "supported_languages": null}, "macro.dbt_date.datetime": {"name": "datetime", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.datetime", "macro_sql": "{% macro datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{ return(\n        modules.datetime.datetime(\n            year=year, month=month, day=day, hour=hour,\n            minute=minute, second=second, microsecond=microsecond,\n            tzinfo=modules.pytz.timezone(tz)\n        )\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.263702, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.265147, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith fsc_date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        fsc_date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.265687, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.26654, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.26674, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2669, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.267308, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2674801, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.268268, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.268497, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2686982, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.268877, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.269053, "supported_languages": null}, "macro.dbt_date.duckdb__day_name": {"name": "duckdb__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.duckdb__day_name", "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.269217, "supported_languages": null}, "macro.dbt_date.spark__day_name": {"name": "spark__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.spark__day_name", "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n{%- set f = 'E' if short else 'EEEE' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.269409, "supported_languages": null}, "macro.dbt_date.trino__day_name": {"name": "trino__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.trino__day_name", "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n{%- set f = 'a' if short else 'W' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.26959, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.270178, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.270344, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.270478, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.270584, "supported_languages": null}, "macro.dbt_date.spark__to_unixtimestamp": {"name": "spark__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.spark__to_unixtimestamp", "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.270677, "supported_languages": null}, "macro.dbt_date.trino__to_unixtimestamp": {"name": "trino__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__to_unixtimestamp", "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} AT TIME ZONE 'UTC')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.270826, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2710788, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.271502, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.27164, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.271976, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2722151, "supported_languages": null}, "macro.dbt_date.duckdb__week_start": {"name": "duckdb__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.duckdb__week_start", "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2723489, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.272932, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2730649, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.273188, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.273311, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.27344, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_start": {"name": "duckdb__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_start", "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.273569, "supported_languages": null}, "macro.dbt_date.spark__iso_week_start": {"name": "spark__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.spark__iso_week_start", "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2736971, "supported_languages": null}, "macro.dbt_date.trino__iso_week_start": {"name": "trino__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.trino__iso_week_start", "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.273825, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.274178, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.274336, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.274513, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2747362, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.274889, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.27522, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.27565, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.275788, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.275975, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.276221, "supported_languages": null}, "macro.dbt_date.spark__day_of_year": {"name": "spark__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.spark__day_of_year", "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%}\n    dayofyear({{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.276421, "supported_languages": null}, "macro.dbt_date.trino__day_of_year": {"name": "trino__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.trino__day_of_year", "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part('day_of_year', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.276541, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.276756, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.27877, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2790048, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.279238, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.279636, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.280106, "supported_languages": null}, "macro.dbt_date.trino__from_unixtimestamp": {"name": "trino__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__from_unixtimestamp", "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(from_unixtime({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"milliseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 6)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"microseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 3)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"nanoseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.280709, "supported_languages": null}, "macro.dbt_date.duckdb__from_unixtimestamp": {"name": "duckdb__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.duckdb__from_unixtimestamp", "macro_sql": "\n\n\n{%- macro duckdb__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2810051, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.281337, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.281625, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.281743, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2818592, "supported_languages": null}, "macro.dbt_date.trino__date_part": {"name": "trino__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.trino__date_part", "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2819688, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.282263, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.282444, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.282599, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.282784, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.285027, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.285373, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.285727, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.285985, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.286344, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.286657, "supported_languages": null}, "macro.dbt_date.duckdb__day_of_week": {"name": "duckdb__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.duckdb__day_of_week", "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.286805, "supported_languages": null}, "macro.dbt_date.spark__day_of_week": {"name": "spark__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.spark__day_of_week", "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.286987, "supported_languages": null}, "macro.dbt_date.trino__day_of_week": {"name": "trino__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.trino__day_of_week", "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('day_of_week', date) -%}\n\n    {%- if isoweek -%}\n        {{ dow }}\n    {%- else -%}\n        case\n            when {{ dow }} = 7 then 1\n            else {{ dow }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.287235, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.287622, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2878022, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.287925, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.288055, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.28837, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.bigquery__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.289026, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.289214, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.289394, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.28957, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2897642, "supported_languages": null}, "macro.dbt_date.duckdb__month_name": {"name": "duckdb__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.duckdb__month_name", "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.290015, "supported_languages": null}, "macro.dbt_date.spark__month_name": {"name": "spark__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.spark__month_name", "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n{%- set f = 'MMM' if short else 'MMMM' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.290244, "supported_languages": null}, "macro.dbt_date.trino__month_name": {"name": "trino__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.trino__month_name", "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n{%- set f = 'b' if short else 'M' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.290717, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.290951, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2913349, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2915032, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.291638, "supported_languages": null}, "macro.dbt_date.duckdb__week_of_year": {"name": "duckdb__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__week_of_year", "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.291759, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.bigquery__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.293206, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.29341, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.293555, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.293777, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2939572, "supported_languages": null}, "macro.dbt_date.duckdb__convert_timezone": {"name": "duckdb__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.duckdb__convert_timezone", "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.294125, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.294274, "supported_languages": null}, "macro.dbt_date.trino__convert_timezone": {"name": "trino__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.trino__convert_timezone", "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast((at_timezone(with_timezone(cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'), '{{ target_tz }}')) as {{ dbt.type_timestamp() }})\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2944782, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.294816, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.295412, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.295583, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.295712, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.295839, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2960682, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_of_year": {"name": "duckdb__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_of_year", "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.296203, "supported_languages": null}, "macro.dbt_date.spark__iso_week_of_year": {"name": "spark__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.spark__iso_week_of_year", "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.296331, "supported_languages": null}, "macro.dbt_date.trino__iso_week_of_year": {"name": "trino__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.trino__iso_week_of_year", "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.2964532, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.296891, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.297007, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.297177, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.297363, "supported_languages": null}, "macro.dbt_date.duckdb__week_end": {"name": "duckdb__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.duckdb__week_end", "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.297493, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.297693, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.297886, "supported_languages": null}, "macro.snowplow_utils.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/materializations/base_incremental/common/get_merge_sql.sql", "original_file_path": "macros/materializations/base_incremental/common/get_merge_sql.sql", "unique_id": "macro.snowplow_utils.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target_tb, source, unique_key, dest_columns, incremental_predicates = none) -%}\n    {# Set default predicates to pass on #}\n    {%- set predicate_override = \"\" -%}\n    {%- set orig_predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n\n    {%- set optimize = config.get('snowplow_optimize') -%}\n    {% if optimize %}\n\n        -- run some queries to dynamically determine the min + max of this 'upsert_date_key' in the new data\n        {%- set date_column = config.require('upsert_date_key') -%}\n        {%- set disable_upsert_lookback = config.get('disable_upsert_lookback') -%} {# We do this for late arriving data possibly e.g. shifting a session start earlier #}\n\n        {# We need the type of the column to get the correct cast of the default value #}\n        {%- set columns = adapter.get_columns_in_relation(this) -%}\n        {%- set date_type = [] %} {# Because you can't assign values in a loop otherwise #}\n        {%- for col in columns -%}\n            {%- if col.column|lower == date_column|lower -%}\n                {% do date_type.append(col.dtype) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {% set get_limits_query %}\n\n            {% if disable_upsert_lookback %}\n                select\n                    coalesce(min({{ date_column }}), cast({{ dbt.current_timestamp() }} as {{ date_type[0] }}) ) as lower_limit,\n                    coalesce(max({{ date_column }}), cast({{ dbt.current_timestamp() }} as {{ date_type[0] }})) as upper_limit\n                from {{ source }}\n            {% else %}\n                select\n                    coalesce(cast({{ dateadd('day', -var(\"snowplow__upsert_lookback_days\", 30), 'min('~date_column~')') }} as {{ date_type[0] }}), cast({{ dbt.current_timestamp() }} as {{ date_type[0] }})) as lower_limit,\n                    coalesce(max({{ date_column }}), cast({{ dbt.current_timestamp() }} as {{ date_type[0] }})) as upper_limit\n                from {{ source }}\n            {% endif %}\n        {% endset %}\n\n        {% set limits = run_query(get_limits_query)[0] %}\n        {% set lower_limit, upper_limit = limits[0], limits[1] %}\n\n        -- use those calculated min + max values to limit 'target' scan, to only the days with new data\n        {% set predicate_override %}\n            DBT_INTERNAL_DEST.{{ date_column }} between '{{ lower_limit }}' and '{{ upper_limit }}'\n        {% endset %}\n    {% endif %}\n\n    {# Combine predicates with user provided ones #}\n    {% set predicates = [predicate_override] + orig_predicates if predicate_override else orig_predicates %}\n    -- standard merge from here\n    {% if target.type in ['databricks', 'spark'] -%}\n        {% set merge_sql = spark__get_merge_sql(target_tb, source, unique_key, dest_columns, predicates) %}\n    {% else %}\n        {% set merge_sql = dbt.default__get_merge_sql(target_tb, source, unique_key, dest_columns, predicates) %}\n    {% endif %}\n\n    {{ return(merge_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dq_tools.dateadd", "macro.dbt.run_query", "macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.302607, "supported_languages": null}, "macro.snowplow_utils.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/materializations/base_incremental/common/get_merge_sql.sql", "original_file_path": "macros/materializations/base_incremental/common/get_merge_sql.sql", "unique_id": "macro.snowplow_utils.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target_tb, source, unique_key, dest_columns, incremental_predicates) -%}\n    {# Set default predicates to pass on #}\n    {%- set predicate_override = \"\" -%}\n    {%- set orig_predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set optimize = config.get('snowplow_optimize') -%}\n    {% if optimize %}\n        -- run some queries to dynamically determine the min + max of this 'upsert_date_key' in the new data\n        {%- set date_column = config.require('upsert_date_key') -%}\n        {%- set disable_upsert_lookback = config.get('disable_upsert_lookback') -%}\n\n        {# We need the type of the column to get the correct cast of the default value is needed #}\n        {%- set columns = adapter.get_columns_in_relation(this) -%}\n        {%- set date_type = [] %} {# Because you can't assign values in a loop otherwise #}\n        {%- for col in columns -%}\n            {%- if col.column|lower == date_column|lower -%}\n                {% do date_type.append(col.dtype) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {% set get_limits_query %}\n            {% if disable_upsert_lookback %}\n                select\n                    coalesce(min({{ date_column }}), cast({{ dbt.current_timestamp() }} as {{ date_type[0] }}) ) as lower_limit,\n                    coalesce(max({{ date_column }}), cast({{ dbt.current_timestamp() }} as {{ date_type[0] }}))as upper_limit\n                from {{ source }}\n            {% else %}\n                select\n                    coalesce(cast({{ dateadd('day', -var(\"snowplow__upsert_lookback_days\", 30), 'min('~date_column~')') }} as {{ date_type[0] }}), cast({{ dbt.current_timestamp() }} as {{ date_type[0] }})) as lower_limit,\n                    coalesce(max({{ date_column }}), cast({{ dbt.current_timestamp() }} as {{ date_type[0] }})) as upper_limit\n                from {{ source }}\n            {% endif %}\n        {% endset %}\n\n        {% set limits = run_query(get_limits_query)[0] %}\n        {% set lower_limit, upper_limit = limits[0], limits[1] %}\n        -- use those calculated min + max values to limit 'target' scan, to only the days with new data\n        {% set predicate_override %}\n            {{ date_column }} between '{{ lower_limit }}' and '{{ upper_limit }}'\n        {% endset %}\n    {% endif %}\n    {# Combine predicates with user provided ones #}\n    {% set predicates = [predicate_override] + orig_predicates if predicate_override else orig_predicates %}\n    -- standard merge from here\n    {% if target.type in ['databricks', 'spark'] -%}\n        {% set merge_sql = spark__get_delete_insert_merge_sql(target_tb, source, unique_key, dest_columns, predicates) %}\n    {% else %}\n        {% set merge_sql = dbt.default__get_delete_insert_merge_sql(target_tb, source, unique_key, dest_columns, predicates) %}\n    {% endif %}\n\n    {{ return(merge_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp", "macro.dq_tools.dateadd", "macro.dbt.run_query", "macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3050082, "supported_languages": null}, "macro.snowplow_utils.get_partition_by": {"name": "get_partition_by", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/get_partition_by.sql", "original_file_path": "macros/utils/get_partition_by.sql", "unique_id": "macro.snowplow_utils.get_partition_by", "macro_sql": "\n{%- macro get_partition_by(bigquery_partition_by=none, databricks_partition_by=none) -%}\n\n  {%- do exceptions.warn(\"Warning: the `get_partition_by` macro is deprecated and will be removed in a future version of the package, please use `get_value_by_target_type` instead.\") -%}\n\n  {% if target.type == 'bigquery' %}\n    {{ return(bigquery_partition_by) }}\n  {% elif target.type in ['databricks', 'spark'] %}\n    {{ return(databricks_partition_by) }}\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3056588, "supported_languages": null}, "macro.snowplow_utils.print_list": {"name": "print_list", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/print_list.sql", "original_file_path": "macros/utils/print_list.sql", "unique_id": "macro.snowplow_utils.print_list", "macro_sql": "{% macro print_list(list, separator = ',') %}\n\n  {%- for item in list %} '{{item}}' {%- if not loop.last %}{{separator}}{% endif %} {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Prints an array as a `seperator` separated quoted list.\n\n#### Returns\n\nSeparated output of items in the list, quoted.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "list", "type": "array", "description": "Array object to print the (quoted) items of"}, {"name": "separator", "type": "string", "description": "The character(s) to separate the items by, default `,`"}], "created_at": 1714072384.371594, "supported_languages": null}, "macro.snowplow_utils.log_message": {"name": "log_message", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/log_message.sql", "original_file_path": "macros/utils/log_message.sql", "unique_id": "macro.snowplow_utils.log_message", "macro_sql": "{% macro log_message(message, is_printed=var('snowplow__has_log_enabled', true)) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=is_printed) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "A wrapper macro for the `dbt_utils.pretty_log_format` using the `snowplow__has_log_enabled` to determine if the log is also printed to the stdout.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "message", "type": "string", "description": "The string message to print."}, {"name": "is_printed", "type": "boolean", "description": "Boolean value to determine if the log is also printed to the stdout"}], "created_at": 1714072384.371451, "supported_languages": null}, "macro.snowplow_utils.post_ci_cleanup": {"name": "post_ci_cleanup", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/post_ci_cleanup.sql", "original_file_path": "macros/utils/post_ci_cleanup.sql", "unique_id": "macro.snowplow_utils.post_ci_cleanup", "macro_sql": "{% macro post_ci_cleanup(schema_pattern=target.schema) %}\n\n  {# Get all schemas with the target.schema prefix #}\n  {% set schemas = snowplow_utils.get_schemas_by_pattern(schema_pattern~'%') %}\n\n  {% if schemas|length %}\n\n    {%- if target.type in ['databricks', 'spark'] -%}\n      {# Generate sql to drop all identified schemas #}\n      {% for schema in schemas -%}\n        {%- set drop_schema_sql -%}\n          DROP SCHEMA IF EXISTS {{schema}} CASCADE;\n        {%- endset -%}\n\n        {% do run_query(drop_schema_sql) %}\n\n      {% endfor %}\n\n    {%- else -%}\n      {# Generate sql to drop all identified schemas #}\n      {% set drop_schema_sql -%}\n\n        {% for schema in schemas -%}\n          DROP SCHEMA IF EXISTS {{schema}} CASCADE;\n        {% endfor %}\n\n      {%- endset %}\n\n      {# Drop schemas #}\n      {% do run_query(drop_schema_sql) %}\n\n    {%- endif -%}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.get_schemas_by_pattern", "macro.dbt.run_query"]}, "description": "This macro deletes all schemas that start with the specified `schema_pattern`, mostly for use before/after CI testing to ensure a clean start and removal of data after CI tests.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "schema_pattern", "type": "string", "description": "The prefix of the schema(s) to delete"}], "created_at": 1714072384.3715122, "supported_languages": null}, "macro.snowplow_utils.snowplow_delete_from_manifest": {"name": "snowplow_delete_from_manifest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/snowplow_delete_from_manifest.sql", "original_file_path": "macros/utils/snowplow_delete_from_manifest.sql", "unique_id": "macro.snowplow_utils.snowplow_delete_from_manifest", "macro_sql": "{% macro snowplow_delete_from_manifest(models, incremental_manifest_table) %}\n\n  {# Ensure models is a list #}\n  {%- if models is string -%}\n    {%- set models = [models] -%}\n  {%- endif -%}\n\n  {# No models to delete or not in execute mode #}\n  {% if not models|length or not execute %}\n    {{ return('') }}\n  {% endif %}\n\n  {# Get the manifest table to ensure it exits #}\n  {%- set incremental_manifest_table_exists = adapter.get_relation(incremental_manifest_table.database,\n                                                                  incremental_manifest_table.schema,\n                                                                  incremental_manifest_table.name) -%}\n\n  {%- if not incremental_manifest_table_exists -%}\n    {{return(dbt_utils.log_info(\"Snowplow: \"+incremental_manifest_table|string+\" does not exist\"))}}\n  {%- endif -%}\n\n  {# Get all models in the manifest and compare to list of models to delete #}\n  {%- set models_in_manifest = dbt_utils.get_column_values(table=incremental_manifest_table, column='model') -%}\n  {%- set unmatched_models, matched_models = [], [] -%}\n\n  {%- for model in models -%}\n\n    {%- if model in models_in_manifest -%}\n      {%- do matched_models.append(model) -%}\n    {%- else -%}\n      {%- do unmatched_models.append(model) -%}\n    {%- endif -%}\n\n  {%- endfor -%}\n\n  {%- if not matched_models|length -%}\n    {{return(dbt_utils.log_info(\"Snowplow: None of the supplied models exist in the manifest\"))}}\n  {%- endif -%}\n\n  {% set delete_statement %}\n    {%- if target.type in ['databricks', 'spark'] -%}\n      delete from {{ incremental_manifest_table }} where model in ({{ snowplow_utils.print_list(matched_models) }});\n    {%- else -%}\n      -- We don't need transaction but Redshift needs commit statement while BQ does not. By using transaction we cover both.\n      begin;\n      delete from {{ incremental_manifest_table }} where model in ({{ snowplow_utils.print_list(matched_models) }});\n      commit;\n    {%- endif -%}\n  {% endset %}\n\n  {%- do run_query(delete_statement) -%}\n\n  {%- if matched_models|length -%}\n    {% do snowplow_utils.log_message(\"Snowplow: Deleted models \"+snowplow_utils.print_list(matched_models)+\" from the manifest\") %}\n  {%- endif -%}\n\n  {%- if unmatched_models|length -%}\n    {% do snowplow_utils.log_message(\"Snowplow: Models \"+snowplow_utils.print_list(unmatched_models)+\" do not exist in the manifest\") %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.log_info", "macro.dbt_utils.get_column_values", "macro.snowplow_utils.print_list", "macro.dbt.run_query", "macro.snowplow_utils.log_message"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3094258, "supported_languages": null}, "macro.snowplow_utils.snowplow_web_delete_from_manifest": {"name": "snowplow_web_delete_from_manifest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/snowplow_delete_from_manifest.sql", "original_file_path": "macros/utils/snowplow_delete_from_manifest.sql", "unique_id": "macro.snowplow_utils.snowplow_web_delete_from_manifest", "macro_sql": "{% macro snowplow_web_delete_from_manifest(models) %}\n\n  {{ snowplow_utils.snowplow_delete_from_manifest(models, ref('snowplow_web_incremental_manifest')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.snowplow_delete_from_manifest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.309609, "supported_languages": null}, "macro.snowplow_utils.snowplow_mobile_delete_from_manifest": {"name": "snowplow_mobile_delete_from_manifest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/snowplow_delete_from_manifest.sql", "original_file_path": "macros/utils/snowplow_delete_from_manifest.sql", "unique_id": "macro.snowplow_utils.snowplow_mobile_delete_from_manifest", "macro_sql": "{% macro snowplow_mobile_delete_from_manifest(models) %}\n\n  {{ snowplow_utils.snowplow_delete_from_manifest(models, ref('snowplow_mobile_incremental_manifest')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.snowplow_delete_from_manifest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.309761, "supported_languages": null}, "macro.snowplow_utils.snowplow_base_delete_from_manifest": {"name": "snowplow_base_delete_from_manifest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/snowplow_delete_from_manifest.sql", "original_file_path": "macros/utils/snowplow_delete_from_manifest.sql", "unique_id": "macro.snowplow_utils.snowplow_base_delete_from_manifest", "macro_sql": "{% macro snowplow_base_delete_from_manifest(models, incremental_manifest='snowplow_incremental_manifest') %}\n\n  {{ snowplow_utils.snowplow_delete_from_manifest(models, ref(incremental_manifest)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.snowplow_delete_from_manifest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3099232, "supported_languages": null}, "macro.snowplow_utils.app_id_filter": {"name": "app_id_filter", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/app_id_filter.sql", "original_file_path": "macros/utils/app_id_filter.sql", "unique_id": "macro.snowplow_utils.app_id_filter", "macro_sql": "{% macro app_id_filter(app_ids) %}\n  {%- if app_ids|length -%}\n  ( \n    1=0\n    {%- if app_ids|select(\"defined\")|list|length %}\n        or app_id in ('{{ app_ids|select(\"defined\")|join(\"','\") }}') --filter on app_id if provided\n    {%- endif %}\n    {%- if app_ids|select(\"undefined\")|list|length %}\n        or app_id is null\n    {% endif %}\n  )\n  {%- else -%}\n    (1=1)\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "Generates a `sql` filter for the values in `app_ids` applied on the `app_id` column.\n\n#### Returns\n\n`app_id in (...)` if any `app_ids` are provided, otherwise `true`.\n\n#### Usage\n\n```sql\napp_id_filter(['web', 'mobile', 'news'])\n\n-- returns\napp_id in ('web', 'mobile', 'news')\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "app_ids", "type": "list", "description": "List of app_ids to filter to include"}], "created_at": 1714072384.370898, "supported_languages": null}, "macro.snowplow_utils.get_sde_or_context": {"name": "get_sde_or_context", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/get_sde_or_context.sql", "original_file_path": "macros/utils/get_sde_or_context.sql", "unique_id": "macro.snowplow_utils.get_sde_or_context", "macro_sql": "{% macro get_sde_or_context(schema, identifier, lower_limit, upper_limit, prefix = none, single_entity = true, database = target.database) %}\n    {{ return(adapter.dispatch('get_sde_or_context', 'snowplow_utils')(schema, identifier, lower_limit, upper_limit, prefix, single_entity, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__get_sde_or_context"]}, "description": "This macro exists for Redshift and Postgres users to more easily select their self-describing event and context tables and apply de-duplication before joining onto their (already de-duplicated) events table. The `root_id` and `root_tstamp` columns are by default returned as `schema_name_id` and `schema_name_tstamp` respectively, where `schema_name` is the value in the `schema_name` column of the table. In the case where multiple entities may be sent in the context (e.g. products in a search results), you should set the `single_entity` argument to `false` and use an additional criteria in your join (see [the snowplow docs](https://docs.snowplow.io/docs/modeling-your-data/modeling-your-data-with-dbt/dbt-advanced-usage/dbt-duplicates/) for further details).\n\nNote that is the responsibility of the user to ensure they have no duplicate names when using this macro multiple times or when a schema column name matches on already in the events table. In this case the `prefix` argument should be used and aliasing applied to the output.\n\n#### Returns\n\nCTE sql for deduplicating records from the schema table, without the schema details columns. The final CTE is the name of the original table.\n\n#### Usage\n\nWith at most one entity per context:\n```sql\nwith {{ snowplow_utils.get_sde_or_context('atomic', 'nl_basjes_yauaa_context_1', \"'2023-01-01'\", \"'2023-02-01'\")}}\n\nselect\n...\nfrom my_events_table a\nleft join nl_basjes_yauaa_context_1 b on \n    a.event_id = b.yauaa_context__id \n    and a.collector_tstamp = b.yauaa_context__tstamp\n```\nWith the possibility of multiple entities per context, your events table must already be de-duped but still have a field with the number of duplicates:\n```sql\nwith {{ snowplow_utils.get_sde_or_context('atomic', 'nl_basjes_yauaa_context_1', \"'2023-01-01'\", \"'2023-02-01'\", single_entity = false)}}\n\nselect\n...,\ncount(*) over (partition by a.event_id) as duplicate_count\nfrom my_events_table a\nleft join nl_basjes_yauaa_context_1 b on \n    a.event_id = b.yauaa_context__id \n    and a.collector_tstamp = b.yauaa_context__tstamp\n    and mod(b.yauaa_context__index, a.duplicate_count) = 0\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "schema", "type": "string", "description": "The schema your context or sde table is in"}, {"name": "identifier", "type": "string", "description": "The table name of your context or sde"}, {"name": "lower_limit", "type": "string", "description": "Lower limit to filter the `root_tstamp` field on, only used if both lower and upper are provided"}, {"name": "upper_limit", "type": "string", "description": "Upper limit to filter the `root_tstamp` field on, only used if both lower and upper are provided"}, {"name": "prefix", "type": "string", "description": "A string to prefix (additional `_` added automatically) the column names with. If not provided `root_id` and `root_tstamp` will be prefixed with the schema name."}, {"name": "single_entity", "type": "boolean", "description": "Whether the entity is a single context or not (default true)"}, {"name": "database", "type": "string", "description": "The database for the context or sde table (default `target.database`)"}], "created_at": 1714072384.372022, "supported_languages": null}, "macro.snowplow_utils.default__get_sde_or_context": {"name": "default__get_sde_or_context", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/get_sde_or_context.sql", "original_file_path": "macros/utils/get_sde_or_context.sql", "unique_id": "macro.snowplow_utils.default__get_sde_or_context", "macro_sql": "{% macro default__get_sde_or_context(schema, identifier, lower_limit, upper_limit, prefix = none, single_entity = true, database = target.database) %}\n    {% if execute %}\n        {% do exceptions.raise_compiler_error('Macro get_sde_or_context is only for Postgres or Redshift, it is not supported for' ~ target.type) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.312621, "supported_languages": null}, "macro.snowplow_utils.postgres__get_sde_or_context": {"name": "postgres__get_sde_or_context", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/get_sde_or_context.sql", "original_file_path": "macros/utils/get_sde_or_context.sql", "unique_id": "macro.snowplow_utils.postgres__get_sde_or_context", "macro_sql": "{% macro postgres__get_sde_or_context(schema, identifier, lower_limit, upper_limit, prefix = none, single_entity = true, database = target.database) %}\n    {# Create a relation from the inputs then get all columns in that context/sde table #}\n    {% set relation = api.Relation.create(database = database, schema = schema, identifier = identifier) %}\n    {# Get the schema name to be able to alias the timestamp and id #}\n    {% set schema_get_query %}\n        select schema_name from {{ relation }}\n        limit 1\n    {% endset %}\n    {%- set schema_name = dbt_utils.get_single_value(schema_get_query) -%}\n    {# Get the columns to loop over #}\n    {%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n    {% set sql %}\n        {{'dd_' ~ identifier }} as (\n            select\n            {# Get all columns that aren't related to the schema itself #}\n            {%- for col in columns -%}\n                {%- if col.name not in ['schema_vendor', 'schema_name', 'schema_format', 'schema_version', 'ref_root', 'ref_tree', 'ref_parent'] %}\n                    {{ col.quoted }},\n                {%- endif -%}\n            {% endfor %}\n            {% if single_entity %}\n                row_number() over (partition by root_id order by root_tstamp) as dedupe_index -- keep the first event for that root_id\n            {% else %}\n                row_number() over (partition by {% for item in columns | map(attribute='quoted') %}{{item}}{%- if not loop.last %},{% endif %}{% endfor -%} ) as dedupe_index -- get the index across all columns for the entity\n            {% endif %}\n            from\n                {{ relation }}\n            {% if upper_limit and lower_limit -%}\n                where\n                    root_tstamp >= {{ lower_limit }}\n                    and root_tstamp <= {{ upper_limit }}\n            {% endif %}\n        ),\n\n        {{identifier}} as (\n            select\n            {%- for col in columns -%}\n                {%- if col.name | lower not in ['schema_vendor', 'schema_name', 'schema_format', 'schema_version', 'ref_root', 'ref_tree', 'ref_parent', 'root_tstamp', 'root_id'] %}\n                    {{ col.quoted }}{% if prefix %} as {{ adapter.quote(prefix ~ '_' ~ col.name) }}{% endif -%},\n                {%- endif -%}\n            {% endfor -%}\n            {# Rename columns that we know exist in every schema based table #}\n            {% if not single_entity %}\n                dedupe_index as {% if prefix %}{{ adapter.quote(prefix ~ '__index') }}{% else %}{{ adapter.quote(schema_name ~ '__index') }}{% endif %}, -- keep track of this for the join\n            {% endif %}\n                root_tstamp as {% if prefix %}{{ adapter.quote(prefix ~ '__tstamp') }}{% else %}{{ adapter.quote(schema_name ~ '__tstamp') }}{% endif %},\n                root_id as {% if prefix %}{{ adapter.quote(prefix ~ '__id') }}{% else %}{{ adapter.quote(schema_name ~ '__id') }}{% endif %}\n            from\n                {{'dd_' ~ identifier }}\n            {% if single_entity %}\n            where\n                dedupe_index = 1\n            {% endif %}\n        )\n\n    {% endset %}\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.31491, "supported_languages": null}, "macro.snowplow_utils.parse_agg_dict": {"name": "parse_agg_dict", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/parse_agg_dict.sql", "original_file_path": "macros/utils/parse_agg_dict.sql", "unique_id": "macro.snowplow_utils.parse_agg_dict", "macro_sql": "{% macro parse_agg_dict(agg_dict) %}\n  {{ return(adapter.dispatch('parse_agg_dict', 'snowplow_utils')(agg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__parse_agg_dict"]}, "description": "This macro allows you to provide aggregations in a consistent and restricted way to avoid having to write the sql yourself. This is mostly for use within other packages to allow aggregations but not allow the user to add arbitrary SQL.\n\n#### Returns\n\nSQL snippet for the specified aggregation, aliased.\n\n#### Usage\n\nExtracting a single field\n```sql\n\nselect\n{{ snowplow_utils.parse_agg_dict({'type': 'countd', 'field': 'event_name', 'alias': 'distinct_event_types'})}}\nfrom \n    my_events_table a\n\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "agg_dict", "type": "dict", "description": "The dictonary to parse, with keys `type`, `field`, and `alias`"}], "created_at": 1714072384.3720808, "supported_languages": null}, "macro.snowplow_utils.default__parse_agg_dict": {"name": "default__parse_agg_dict", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/parse_agg_dict.sql", "original_file_path": "macros/utils/parse_agg_dict.sql", "unique_id": "macro.snowplow_utils.default__parse_agg_dict", "macro_sql": "{% macro default__parse_agg_dict(agg_dict) %}\n  {% set agg_type = agg_dict.get('type') %}\n  {% set agg_field = agg_dict.get('field') %}\n  {% set agg_alias = agg_dict.get('alias') %}\n\n  {% if agg_type not in ['sum', 'avg', 'min', 'max', 'count', 'countd'] or not agg_type %}\n    {{ exceptions.raise_compiler_error(\n      \"Snowplow Error: Unexpected aggregation provided, must be one of sum, avg, min, max, count, countd (count distinct), not \"~agg_type~\".\"\n    ) }}\n  {% endif %}\n  {% if not agg_alias %}\n    {{ exceptions.raise_compiler_error(\n      \"Snowplow Error: Alias must be provided for all aggregations.\"\n    ) }}\n  {% endif %}\n  {% if agg_type == 'countd' %}\n    count(distinct {{ agg_field }}) as {{ agg_alias }}\n  {% else %}\n    {{ agg_type }}({{ agg_field }}) as {{ agg_alias }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3160908, "supported_languages": null}, "macro.snowplow_utils.allow_refresh": {"name": "allow_refresh", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/allow_refresh.sql", "original_file_path": "macros/utils/allow_refresh.sql", "unique_id": "macro.snowplow_utils.allow_refresh", "macro_sql": "{% macro allow_refresh() %}\n  {{ return(adapter.dispatch('allow_refresh', 'snowplow_utils')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__allow_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.316412, "supported_languages": null}, "macro.snowplow_utils.default__allow_refresh": {"name": "default__allow_refresh", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/allow_refresh.sql", "original_file_path": "macros/utils/allow_refresh.sql", "unique_id": "macro.snowplow_utils.default__allow_refresh", "macro_sql": "{% macro default__allow_refresh() %}\n\n  {% set allow_refresh = snowplow_utils.get_value_by_target(\n                                    dev_value=none,\n                                    default_value=var('snowplow__allow_refresh'),\n                                    dev_target_name=var('snowplow__dev_target_name')\n                                    ) %}\n\n  {{ return(allow_refresh) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.get_value_by_target"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.31666, "supported_languages": null}, "macro.snowplow_utils.get_value_by_target_type": {"name": "get_value_by_target_type", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/get_value_by_target_type.sql", "original_file_path": "macros/utils/get_value_by_target_type.sql", "unique_id": "macro.snowplow_utils.get_value_by_target_type", "macro_sql": "\n{%- macro get_value_by_target_type(bigquery_val=none, snowflake_val=none, redshift_val=none, postgres_val=none, databricks_val=none) -%}\n\n  {% if target.type == 'bigquery' %}\n    {{ return(bigquery_val) }}\n  {% elif target.type == 'snowflake' %}\n    {{ return(snowflake_val) }}\n  {% elif target.type == 'redshift' %}\n    {{ return(redshift_val) }}\n  {% elif target.type == 'postgres' %}\n    {{ return(postgres_val) }}\n  {% elif target.type in ['databricks', 'spark'] %}\n    {{ return(databricks_val) }}\n  {% else %}\n    {{ exceptions.raise_compiler_error(\"Snowplow: Unexpected target type \"~target.type) }}\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "Returns the value provided based on the `target.type`. This is useful when you need a different value based on which warehouse is being used e.g. cluster fields or partition keys.\n\n#### Returns\n\nThe appropriate value for the target warehouse type, or an error if not an expected target type.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "bigquery_val", "type": "string", "description": "(Optional) Value to return if the `target.type` is bigquery. Default None"}, {"name": "snowflake_val", "type": "string", "description": "(Optional) Value to return if the `target.type` is snowflake. Default None"}, {"name": "redshift_val", "type": "string", "description": "(Optional) Value to return if the `target.type` is redshift. Default None"}, {"name": "postgres_val", "type": "string", "description": "(Optional) Value to return if the `target.type` is postgres. Default None"}, {"name": "databricks_val", "type": "string", "description": "(Optional) Value to return if the `target.type` is databricks. Default None"}], "created_at": 1714072384.371212, "supported_languages": null}, "macro.snowplow_utils.get_cluster_by": {"name": "get_cluster_by", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/get_cluster_by.sql", "original_file_path": "macros/utils/get_cluster_by.sql", "unique_id": "macro.snowplow_utils.get_cluster_by", "macro_sql": "{% macro get_cluster_by(bigquery_cols=none, snowflake_cols=none) %}\n\n  {%- do exceptions.warn(\"Warning: the `get_cluster_by` macro is deprecated and will be removed in a future version of the package, please use `get_value_by_target_type` instead.\") -%}\n\n\n  {% if target.type == 'bigquery' %}\n    {{ return(bigquery_cols) }}\n  {% elif target.type == 'snowflake' %}\n    {{ return(snowflake_cols) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.317982, "supported_languages": null}, "macro.snowplow_utils.get_schemas_by_pattern": {"name": "get_schemas_by_pattern", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/get_schemas_by_pattern.sql", "original_file_path": "macros/utils/get_schemas_by_pattern.sql", "unique_id": "macro.snowplow_utils.get_schemas_by_pattern", "macro_sql": "{% macro get_schemas_by_pattern(schema_pattern) %}\n    {{ return(adapter.dispatch('get_schemas_by_pattern', 'snowplow_utils')\n        (schema_pattern)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__get_schemas_by_pattern"]}, "description": "Given a pattern, finds and returns all schemas that match that pattern. Note that for databricks any single character matches (`_`) will not be properly translated due to databricks using a regex expression instead of a SQL `like` clause.\n\n      #### Returns\n\n      A list of schemas that match the pattern provided.", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "schema_pattern", "type": "string", "description": "The pattern for the schema(s) you wish to find. For all non-databricks should be of the usual SQL `like` form. `%` will be automatically translated for databricks, but other special characters may not be"}], "created_at": 1714072384.3710651, "supported_languages": null}, "macro.snowplow_utils.default__get_schemas_by_pattern": {"name": "default__get_schemas_by_pattern", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/get_schemas_by_pattern.sql", "original_file_path": "macros/utils/get_schemas_by_pattern.sql", "unique_id": "macro.snowplow_utils.default__get_schemas_by_pattern", "macro_sql": "{% macro default__get_schemas_by_pattern(schema_pattern) %}\n\n    {% set get_tables_sql = dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern='%') %}\n    {% set results = [] if get_tables_sql.isspace() else run_query(get_tables_sql) %}\n    {% set schemas = results|map(attribute='table_schema')|unique|list %}\n    {{ return(schemas) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.318752, "supported_languages": null}, "macro.snowplow_utils.spark__get_schemas_by_pattern": {"name": "spark__get_schemas_by_pattern", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/get_schemas_by_pattern.sql", "original_file_path": "macros/utils/get_schemas_by_pattern.sql", "unique_id": "macro.snowplow_utils.spark__get_schemas_by_pattern", "macro_sql": "{% macro spark__get_schemas_by_pattern(schema_pattern) %}\n    {# databricks/spark uses a regex on SHOW SCHEMAS and doesn't have an information schema in hive_metastore #}\n    {%- set schema_pattern= dbt.replace(schema_pattern, \"%\", \"*\") -%}\n\n    {# Get all schemas with the target.schema prefix #}\n    {%- set get_schemas_sql -%}\n        SHOW SCHEMAS LIKE '{{schema_pattern}}';\n    {%- endset -%}\n\n    {% set results = run_query(get_schemas_sql) %}\n    {% set schemas = results|map(attribute='databaseName')|unique|list %}\n\n    {{ return(schemas) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3191402, "supported_languages": null}, "macro.snowplow_utils.get_columns_in_relation_by_column_prefix": {"name": "get_columns_in_relation_by_column_prefix", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/get_columns_in_relation_by_column_prefix.sql", "original_file_path": "macros/utils/get_columns_in_relation_by_column_prefix.sql", "unique_id": "macro.snowplow_utils.get_columns_in_relation_by_column_prefix", "macro_sql": "{% macro get_columns_in_relation_by_column_prefix(relation, column_prefix) %}\n\n  {# Prevent introspective queries during parsing #}\n  {%- if not execute -%}\n    {{ return('') }}\n  {% endif %}\n\n  {%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n  {# get_columns_in_relation returns uppercase cols for snowflake so uppercase column_prefix #}\n  {%- set column_prefix = column_prefix.upper() if target.type == 'snowflake' else column_prefix -%}\n\n  {%- set matched_columns = [] -%}\n\n  {# add columns with matching prefix to matched_columns #}\n  {% for column in columns %}\n    {% if column.name.startswith(column_prefix) %}\n      {% do matched_columns.append(column) %}\n    {% endif %}\n  {% endfor %}\n\n  {% if matched_columns|length %}\n    {{ return(matched_columns) }}\n  {% else %}\n    {{ exceptions.raise_compiler_error(\"Snowplow: No columns found with prefix \"~column_prefix) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "This macro returns an array of column objects within a relation that start with the given column prefix. This is useful when you have multiple versions of a column within a table and want to dynamically identify all versions.\n\n#### Returns\n\nAn array of (column objects)[https://docs.getdbt.com/reference/dbt-classes#column]. The name of each column can be accessed with the name property.\n\n#### Usage\n\n```sql\nget_columns_in_relation_by_column_prefix(ref('snowplow_web_base_events_this_run'), 'domain')\n\n-- returns\n['domain_sessionid', 'domain_userid', 'domain_sessionidx',...]\n\n{% set matched_columns = snowplow_utils.get_columns_in_relation_by_column_prefix(\n                    relation=ref('snowplow_web_base_events_this_run'),\n                    column_prefix='custom_context_1_0_'\n                    ) %}\n\n{% for column in matched_columns %}\n{{ column.name }}\n{% endfor %}\n\n# Renders to something like:\n'custom_context_1_0_1'\n'custom_context_1_0_2'\n'custom_context_1_0_3'\n\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "relation", "type": "relation", "description": "A table or `ref` type object to get the columns from"}, {"name": "column_prefix", "type": "string", "description": "The prefix string to search for matching columns"}], "created_at": 1714072384.370997, "supported_languages": null}, "macro.snowplow_utils.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/set_query_tag.sql", "original_file_path": "macros/utils/set_query_tag.sql", "unique_id": "macro.snowplow_utils.set_query_tag", "macro_sql": "\n{%- macro set_query_tag(statement) -%}\n  {{ return(adapter.dispatch('set_query_tag', 'snowplow_utils')(statement)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.snowplow_utils.default__set_query_tag"]}, "description": "This macro takes a provided statement as argument and generates the SQL command to set this statement as the query_tag for Snowflake databases, and does nothing otherwise. It can be used to safely set the query_tag regardless of database type.\n\n#### Returns\n\nAn alter session command set to the `query_tag` to the `statement` for Snowflake, otherwise nothing\n\n#### Usage\n\n```sql\n\n{{ snowplow_utils.set_query_tag('snowplow_query_tag') }}\n\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "statement", "type": "string", "description": "The statement to use as the `query_tag` within Snowflake"}], "created_at": 1714072384.371765, "supported_languages": null}, "macro.snowplow_utils.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/set_query_tag.sql", "original_file_path": "macros/utils/set_query_tag.sql", "unique_id": "macro.snowplow_utils.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag(statement) %}\n    alter session set query_tag = '{{ statement }}';\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.320438, "supported_languages": null}, "macro.snowplow_utils.default__set_query_tag": {"name": "default__set_query_tag", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/set_query_tag.sql", "original_file_path": "macros/utils/set_query_tag.sql", "unique_id": "macro.snowplow_utils.default__set_query_tag", "macro_sql": "{% macro default__set_query_tag(statement) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3205628, "supported_languages": null}, "macro.snowplow_utils.throw_compiler_error": {"name": "throw_compiler_error", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/throw_compiler_error.sql", "original_file_path": "macros/utils/throw_compiler_error.sql", "unique_id": "macro.snowplow_utils.throw_compiler_error", "macro_sql": "{% macro throw_compiler_error(error_message, disable_error=var(\"snowplow__disable_errors\", false)) %}\n\n  {% if disable_error %}\n\n    {{ return(error_message) }}\n\n  {% else %}\n\n    {{ exceptions.raise_compiler_error(error_message) }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3210251, "supported_languages": null}, "macro.snowplow_utils.is_run_with_new_events": {"name": "is_run_with_new_events", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/is_run_with_new_events.sql", "original_file_path": "macros/utils/is_run_with_new_events.sql", "unique_id": "macro.snowplow_utils.is_run_with_new_events", "macro_sql": "{% macro is_run_with_new_events(package_name, new_event_limits_table=none, incremental_manifest_table=none, base_sessions_lifecycle_table=none) %}\n\n  {%- if new_event_limits_table -%}\n    {%- set new_event_limits_relation = ref(new_event_limits_table) -%}\n  {%- else -%}\n    {%- set new_event_limits_relation = snowplow_utils.get_new_event_limits_table_relation(package_name) -%}\n  {%- endif -%}\n\n  {%- if incremental_manifest_table -%}\n    {%- set incremental_manifest_relation = ref(incremental_manifest_table) -%}\n  {%- else-%}\n    {%- set incremental_manifest_relation = snowplow_utils.get_incremental_manifest_table_relation(package_name) -%}\n  {%- endif -%}\n\n  {% if is_incremental() %}\n\n    {%- set node_identifier = this.identifier -%}\n    {%- if base_sessions_lifecycle_relation -%}\n      {%- set base_sessions_lifecycle_identifier = ref(base_sessions_lifecycle_relation) -%}\n    {%- else -%}\n      {%- set base_sessions_lifecycle_identifier = package_name+'_base_sessions_lifecycle_manifest' -%}\n    {%- endif -%}\n\n    {# base_sessions_lifecycle not included in manifest so query directly. Otherwise use the manifest for performance #}\n    {%- if node_identifier == base_sessions_lifecycle_identifier -%}\n      {#Technically should be max(end_tstsamp) but table is partitioned on start_tstamp so cheaper to use.\n        Worst case we update the manifest during a backfill when we dont need to, which should be v rare. #}\n      {% set has_been_processed_query %}\n        select\n          case when\n            (select upper_limit from {{ new_event_limits_relation }}) <= (select max(start_tstamp) from {{this}})\n          then false\n        else true end\n      {% endset %}\n\n    {%- else -%}\n\n      {% set has_been_processed_query %}\n        select\n          case when\n            (select upper_limit from {{ new_event_limits_relation }})\n            <= (select last_success from {{ incremental_manifest_relation }} where model = '{{node_identifier}}')\n          then false\n        else true end\n      {% endset %}\n\n    {%- endif -%}\n\n    {% set results = run_query(has_been_processed_query) %}\n\n    {% if execute %}\n      {% set has_new_events = results.columns[0].values()[0] | as_bool() %}\n      {# Snowflake: dbt 0.18 returns bools as ints. Ints are not accepted as predicates in Snowflake. Cast to be safe. #}\n      {% set has_new_events = 'cast('~has_new_events~' as boolean)' %}\n    {% endif %}\n\n  {% else %}\n\n    {% set has_new_events = true %}\n\n  {% endif %}\n\n  {{ return(has_new_events) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.get_new_event_limits_table_relation", "macro.snowplow_utils.get_incremental_manifest_table_relation", "macro.dbt.is_incremental", "macro.dbt.run_query"]}, "description": "This macro is designed for use with Snowplow data modelling packages like `snowplow-web`. It can be used in any incremental models, to effectively block the incremental model from being updated with old data which it has already consumed. This saves cost as well as preventing historical data from being overwritten with partially complete data (due to a batch back-fill for instance).\n\nThe macro utilizes the `snowplow_[platform]_incremental_manifest` table to determine whether the model from which the macro is called, i.e. `{{ this }}`, has already consumed the data in the given run. If it has, it returns `false`. If the data in the run contains new data, `true` is returned.\n\nFor the sessions lifecycle identifier it does not use the manifest as this table is not included in it.\n\n#### Returns\n\n`true` if the run contains new events previously not consumed by `this`, `false` otherwise.\n\n#### Usage\n\n```sql\n\n{{\nconfig(\n    materialized='incremental',\n    unique_key='screen_view_id',\n    upsert_date_key='start_tstamp'\n)\n}}\n\nselect\n...\n\nfrom {{ ref('snowplow_mobile_base_events_this_run' ) }}\nwhere {{ snowplow_utils.is_run_with_new_events('snowplow_mobile') }} --returns false if run doesn't contain new events.\n\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "package_name", "type": "string", "description": "The modeling package name e.g. `snowplow-mobile`"}], "created_at": 1714072384.37137, "supported_languages": null}, "macro.snowplow_utils.n_timedeltas_ago": {"name": "n_timedeltas_ago", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/n_timedeltas_ago.sql", "original_file_path": "macros/utils/n_timedeltas_ago.sql", "unique_id": "macro.snowplow_utils.n_timedeltas_ago", "macro_sql": "{% macro n_timedeltas_ago(n, timedelta_attribute) %}\n\n  {% set arg_dict = {timedelta_attribute: n} %}\n  {% set now = modules.datetime.datetime.now() %}\n  {% set n_timedeltas_ago = (now - modules.datetime.timedelta(**arg_dict)) %}\n\n  {{ return(n_timedeltas_ago) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "This macro takes the current timestamp and subtracts `n` units, as defined by the `timedelta_attribute`, from it. This is achieved using the Python datetime module, rather than querying your database. By combining this with the `get_value_by_target` macro, you can dynamically set dates depending on your environment.\n\n#### Returns\n\nCurrent timestamp minus `n` units.\n\n#### Usage\n\n```sql\n\n{{ snowplow_utils.n_timedeltas_ago(1, 'weeks') }}\n\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "n", "type": "integer", "description": "The number of timedeltas to subtract from the current timestamp"}, {"name": "timedelta_attribute", "type": "string", "description": "The type of units to subtract. This can be any valid attribute of the [timedelta](https://docs.python.org/3/library/datetime.html#timedelta-objects) object"}], "created_at": 1714072384.371847, "supported_languages": null}, "macro.snowplow_utils.get_value_by_target": {"name": "get_value_by_target", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/get_value_by_target.sql", "original_file_path": "macros/utils/get_value_by_target.sql", "unique_id": "macro.snowplow_utils.get_value_by_target", "macro_sql": "{% macro get_value_by_target(dev_value, default_value, dev_target_name='dev') %}\n\n  {% if target.name == dev_target_name %}\n    {% set value = dev_value %}\n  {% else %}\n    {% set value = default_value %}\n  {% endif %}\n\n  {{ return(value) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "This macro is designed to dynamically return values based on the target (`target.name`) you are running against. Your target names are defined in your [profiles.yml](https://docs.getdbt.com/reference/profiles.yml) file. This can be useful for dynamically changing variables within your project, depending on whether you are running in dev or prod.\n\n#### Returns\n\nThe value relevant to the target environment\n\n#### Usage\n\n```yml\n\n# dbt_project.yml\n...\nvars:\nsnowplow_web:\n    snowplow__backfill_limit_days: \"{{ snowplow_utils.get_value_by_target(dev_value=1, default_value=30, dev_target_name='dev') }}\"\n\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "dev_value", "type": null, "description": "Value to use if target is development"}, {"name": "default_value", "type": null, "description": "Value to use if target is not development"}, {"name": "dev_target_name", "type": "string", "description": "(Optional) Name of the development target. Default `dev`"}], "created_at": 1714072384.371306, "supported_languages": null}, "macro.snowplow_utils.return_limits_from_model": {"name": "return_limits_from_model", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/return_limits_from_model.sql", "original_file_path": "macros/utils/return_limits_from_model.sql", "unique_id": "macro.snowplow_utils.return_limits_from_model", "macro_sql": "{% macro return_limits_from_model(model, lower_limit_col, upper_limit_col) -%}\n\n  {# In case of not execute just return empty strings to avoid hitting database #}\n  {% if not execute %}\n    {{ return(['','']) }}\n  {% endif %}\n\n  {% set target_relation = adapter.get_relation(\n        database=model.database,\n        schema=model.schema,\n        identifier=model.name) %}\n\n  {% if target_relation is not none %}\n\n    {% set limit_query %}\n      select\n        min({{lower_limit_col}}) as lower_limit,\n        max({{upper_limit_col}}) as upper_limit\n      from {{ model }}\n    {% endset %}\n\n    {% set results = run_query(limit_query) %}\n\n    {% if execute %}\n\n      {# If there is no data within the limits, we should warn them otherwise they may be stuck here forever#}\n      {%- if results.columns[0].values()[0] is none or results.columns[1].values()[0] is none -%}\n      {# Currently warnings do not actually do anything other than text in logs, this makes it more visible https://github.com/dbt-labs/dbt-core/issues/6721 #}\n        {{ snowplow_utils.log_message(\"Snowplow Warning: *************\") }}\n        {% do exceptions.warn(\"Snowplow Warning: No data in \"~this~\" for date range from variables, please modify your run variables to include data if this is not expected.\") %}\n        {{ snowplow_utils.log_message(\"Snowplow Warning: *************\") }}\n        {# This allows for bigquery to still run the same way the other warehouses do, but also ensures no data is processed #}\n        {% set lower_limit = snowplow_utils.cast_to_tstamp('9999-01-01 00:00:00') %}\n        {% set upper_limit = snowplow_utils.cast_to_tstamp('9999-01-02 00:00:00') %}\n      {%- else -%}\n        {% set lower_limit = snowplow_utils.cast_to_tstamp(results.columns[0].values()[0]) %}\n        {% set upper_limit = snowplow_utils.cast_to_tstamp(results.columns[1].values()[0]) %}\n      {%- endif -%}\n\n      {{ return([lower_limit, upper_limit]) }}\n\n    {% endif %}\n\n  {% else %}\n\n    {% do exceptions.warn(\"Snowplow Warning: \" ~ model ~ \" does not exist. This is expected if you are compiling a fresh installation of the dbt-snowplow-* packages.\") %}\n    {% set dummy_limit = snowplow_utils.cast_to_tstamp('9999-01-01 00:00:00') %}\n\n    {{ return([dummy_limit, dummy_limit]) }}\n\n  {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.snowplow_utils.log_message", "macro.snowplow_utils.cast_to_tstamp"]}, "description": "Calculates and returns the minimum (lower) and maximum (upper) values of specified columns within the specified table. Useful to find ranges of a column within a table.\n\n#### Returns\n\nA list of two objects, the lower and upper values from the columns in the model", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/schema.yml", "arguments": [{"name": "model", "type": "relation", "description": "A string or `ref` type object to refer to a model or table to return limits from"}, {"name": "lower_limit_col", "type": "string", "description": "The column to take the `min` of to get the lower limit"}, {"name": "upper_limit_col", "type": "string", "description": "The column to take the `max` of to get the upper limit"}], "created_at": 1714072384.3717, "supported_languages": null}, "macro.snowplow_utils.tstamp_to_str": {"name": "tstamp_to_str", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/tstamp_to_str.sql", "original_file_path": "macros/utils/tstamp_to_str.sql", "unique_id": "macro.snowplow_utils.tstamp_to_str", "macro_sql": "{% macro tstamp_to_str(tstamp) -%}\n  '{{ tstamp.strftime(\"%Y-%m-%d %H:%M:%S\") }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.325828, "supported_languages": null}, "macro.snowplow_utils.get_field": {"name": "get_field", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_field.sql", "original_file_path": "macros/utils/cross_db/get_field.sql", "unique_id": "macro.snowplow_utils.get_field", "macro_sql": "{% macro get_field(column_name, field_name, table_alias = none, type = none, array_index = none, relation = none) %}\n    {{ return(adapter.dispatch('get_field', 'snowplow_utils')(column_name, field_name, table_alias, type, array_index, relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.bigquery__get_field"]}, "description": "This macro exists to make it easier to extract a field from our `unstruct_` and `contexts_` type columns for users in Snowflake, Databricks, and BigQuery (using a wildcard version number is only possible for BigQuery e.g. `column_name = 'contexts_nl_basjes_yauaa_context_1_*'`). The macro can handle type casting and selecting from arrays.\n\n#### Returns\n\nSQL snippet to select the field specified from the column\n\n#### Usage\n\nExtracting a single field\n```sql\n\nselect\n{{ snowplow_utils.get_field(column_name = 'contexts_nl_basjes_yauaa_context_1', \n                            field_name = 'agent_class', \n                            table_alias = 'a',\n                            type = 'string',\n                            array_index = 0)}} as yauaa_agent_class\nfrom \n    my_events_table a\n\n```\n\nExtracting multiple fields\n```sql\n\nselect\n{% for field in [('field1', 'string'), ('field2', 'numeric'), ...] %}\n  {{ snowplow_utils.get_field(column_name = 'contexts_nl_basjes_yauaa_context_1', \n                            field_name = field[0], \n                            table_alias = 'a',\n                            type = field[1],\n                            array_index = 0)}} as {{ field[0] }}\n{% endfor %}\n\nfrom \n    my_events_table a\n\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/cross_db/cross_db_macros.yml", "arguments": [{"name": "column_name", "type": "string", "description": "Name of the column to extract the field from"}, {"name": "field_name", "type": "string", "description": "Name of the field to extract"}, {"name": "table_alias", "type": "string", "description": "(Optional) Alias of the table in your query that the column exists in. Default `none` (no table alias)"}, {"name": "type", "type": "string", "description": "(Optional) Type to cast the field to if required. Default `none` (no casting)"}, {"name": "array_index", "type": "integer", "description": "(Optional) Index of the array to select in case of multiple entries. Uses `SAFE_OFFSET` for BigQuery. Default `none` (not an array)"}], "created_at": 1714072384.372746, "supported_languages": null}, "macro.snowplow_utils.bigquery__get_field": {"name": "bigquery__get_field", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_field.sql", "original_file_path": "macros/utils/cross_db/get_field.sql", "unique_id": "macro.snowplow_utils.bigquery__get_field", "macro_sql": "{% macro bigquery__get_field(column_name, field_name, table_alias = none, type = none, array_index = none, relation = none) %}\n\n{% if '*' in column_name %}\n    {{ snowplow_utils.get_optional_fields(\n        enabled=true,\n        fields=[{'field': field_name, 'dtype': type or 'string' }],\n        col_prefix=column_name|replace('_*', ''),\n        relation=relation,\n        relation_alias=table_alias,\n        include_field_alias=false\n    ) }}\n\n{% else %}\n{%- if type -%}cast({%- endif -%}{%- if table_alias -%}{{table_alias}}.{%- endif -%}{{column_name}}{%- if array_index is not none -%}[SAFE_OFFSET({{array_index}})]{%- endif -%}.{{field_name}}{%- if type %} as {{type}}){%- endif -%}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.get_optional_fields"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.328316, "supported_languages": null}, "macro.snowplow_utils.spark__get_field": {"name": "spark__get_field", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_field.sql", "original_file_path": "macros/utils/cross_db/get_field.sql", "unique_id": "macro.snowplow_utils.spark__get_field", "macro_sql": "{% macro spark__get_field(column_name, field_name, table_alias = none, type = none, array_index = none, relation = none) %}\n{% if '*' in column_name %}\n    {% do exceptions.raise_compiler_error('Wildcard schema versions are only supported for Bigquery, they are not supported for ' ~ target.type) %}\n{% else %}\n    {%- if table_alias -%}{{table_alias}}.{%- endif -%}{{column_name}}{%- if array_index is not none -%}[{{array_index}}]{%- endif -%}.{{field_name}}{%- if type -%}::{{type}}{%- endif -%}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.328798, "supported_languages": null}, "macro.snowplow_utils.snowflake__get_field": {"name": "snowflake__get_field", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_field.sql", "original_file_path": "macros/utils/cross_db/get_field.sql", "unique_id": "macro.snowplow_utils.snowflake__get_field", "macro_sql": "{% macro snowflake__get_field(column_name, field_name, table_alias = none, type = none, array_index = none, relation = none) %}\n{% if '*' in column_name %}\n    {% do exceptions.raise_compiler_error('Wildcard schema versions are only supported for Bigquery, they are not supported for ' ~ target.type) %}\n{% else %}\n    {%- if type is none and execute -%}\n        {% do exceptions.warn(\"Warning: macro snowplow_utils.get_field is being used without a type provided, Snowflake will return a variant column in this case which is unlikely to be what you want.\") %}\n    {%- endif -%}\n    {%- if table_alias -%}{{table_alias}}.{%- endif -%}{{column_name}}{%- if array_index is not none -%}[{{array_index}}]{%- endif -%}:{{field_name}}{%- if type -%}::{{type}}{%- endif -%}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.329366, "supported_languages": null}, "macro.snowplow_utils.default__get_field": {"name": "default__get_field", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_field.sql", "original_file_path": "macros/utils/cross_db/get_field.sql", "unique_id": "macro.snowplow_utils.default__get_field", "macro_sql": "{% macro default__get_field(column_name, field_name, table_alias = none, type = none, array_index = none, relation = none) %}\n\n{% if execute %}\n    {% do exceptions.raise_compiler_error('Macro get_field only supports Bigquery, Snowflake, Spark, and Databricks, it is not supported for ' ~ target.type) %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.329636, "supported_languages": null}, "macro.snowplow_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_tstamp, second_tstamp, datepart) %}\n    {{ return(adapter.dispatch('timestamp_diff', 'snowplow_utils')(first_tstamp, second_tstamp, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.331597, "supported_languages": null}, "macro.snowplow_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_tstamp, second_tstamp, datepart) %}\n    {{ return(datediff(first_tstamp, second_tstamp, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.331774, "supported_languages": null}, "macro.snowplow_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_tstamp, second_tstamp, datepart) %}\n    timestamp_diff({{second_tstamp}}, {{first_tstamp}}, {{datepart}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3319092, "supported_languages": null}, "macro.snowplow_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, tstamp) %}\n    {{ return(adapter.dispatch('timestamp_add', 'snowplow_utils')(datepart, interval, tstamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.332105, "supported_languages": null}, "macro.snowplow_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, tstamp) %}\n    {{ return(dateadd(datepart, interval, tstamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.332264, "supported_languages": null}, "macro.snowplow_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, tstamp) %}\n    timestamp_add({{tstamp}}, interval {{interval}} {{datepart}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.332402, "supported_languages": null}, "macro.snowplow_utils.databricks__timestamp_add": {"name": "databricks__timestamp_add", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.databricks__timestamp_add", "macro_sql": "{% macro databricks__timestamp_add(datepart, interval, tstamp) %}\n    timestampadd({{datepart}}, {{interval}}, {{tstamp}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.332533, "supported_languages": null}, "macro.snowplow_utils.cast_to_tstamp": {"name": "cast_to_tstamp", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.cast_to_tstamp", "macro_sql": "{% macro cast_to_tstamp(tstamp_literal) -%}\n    {% if tstamp_literal is none or tstamp_literal|lower in ['null',''] %}\n        cast(null as {{type_timestamp()}})\n    {% else %}\n        cast('{{tstamp_literal}}' as {{type_timestamp()}})\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3327832, "supported_languages": null}, "macro.snowplow_utils.to_unixtstamp": {"name": "to_unixtstamp", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.to_unixtstamp", "macro_sql": "\n\n\n{%- macro to_unixtstamp(tstamp) -%}\n    {{ adapter.dispatch('to_unixtstamp', 'snowplow_utils') (tstamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.bigquery__to_unixtstamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.332992, "supported_languages": null}, "macro.snowplow_utils.default__to_unixtstamp": {"name": "default__to_unixtstamp", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.default__to_unixtstamp", "macro_sql": "\n\n\n{%- macro default__to_unixtstamp(tstamp) -%}\n    date_part('epoch', {{ tstamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3330839, "supported_languages": null}, "macro.snowplow_utils.snowflake__to_unixtstamp": {"name": "snowflake__to_unixtstamp", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.snowflake__to_unixtstamp", "macro_sql": "\n\n\n{%- macro snowflake__to_unixtstamp(tstamp) -%}\n    date_part('epoch_seconds', {{ tstamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.333172, "supported_languages": null}, "macro.snowplow_utils.bigquery__to_unixtstamp": {"name": "bigquery__to_unixtstamp", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.bigquery__to_unixtstamp", "macro_sql": "\n\n\n{%- macro bigquery__to_unixtstamp(tstamp) -%}\n    unix_seconds({{ tstamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.33326, "supported_languages": null}, "macro.snowplow_utils.spark__to_unixtstamp": {"name": "spark__to_unixtstamp", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.spark__to_unixtstamp", "macro_sql": "\n\n{%- macro spark__to_unixtstamp(tstamp) -%}\n    unix_timestamp({{ tstamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.33335, "supported_languages": null}, "macro.snowplow_utils.current_timestamp_in_utc": {"name": "current_timestamp_in_utc", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n    {{ return(adapter.dispatch('current_timestamp_in_utc', 'snowplow_utils')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.333489, "supported_languages": null}, "macro.snowplow_utils.default__current_timestamp_in_utc": {"name": "default__current_timestamp_in_utc", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{current_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3335779, "supported_languages": null}, "macro.snowplow_utils.snowflake__current_timestamp_in_utc": {"name": "snowflake__current_timestamp_in_utc", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{current_timestamp()}})::{{type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.current_timestamp", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.333697, "supported_languages": null}, "macro.snowplow_utils.postgres__current_timestamp_in_utc": {"name": "postgres__current_timestamp_in_utc", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{type_timestamp()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.333785, "supported_languages": null}, "macro.snowplow_utils.redshift__current_timestamp_in_utc": {"name": "redshift__current_timestamp_in_utc", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/timestamp_functions.sql", "original_file_path": "macros/utils/cross_db/timestamp_functions.sql", "unique_id": "macro.snowplow_utils.redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(snowplow_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.333899, "supported_languages": null}, "macro.snowplow_utils.get_array_to_string": {"name": "get_array_to_string", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_array_to_string.sql", "original_file_path": "macros/utils/cross_db/get_array_to_string.sql", "unique_id": "macro.snowplow_utils.get_array_to_string", "macro_sql": "\n\n{%- macro get_array_to_string(array_column, column_prefix, delimiter=',') -%}\n    {{ return(adapter.dispatch('get_array_to_string', 'snowplow_utils')(array_column, column_prefix, delimiter)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.snowplow_utils.default__get_array_to_string"]}, "description": "This macro takes care of harmonising cross-db array to string type functions. The macro supports a custom delimiter if you don't want to use a comma with no space (default).\n\n#### Returns\n\nThe data warehouse appropriate sql to convert an array to a string. \n\n#### Usage\n\n```sql\nselect\n...\n{{ snowplow_utils.get_array_to_string('my_array_column', 'a', ', ') }}\n...\nfrom ... a\n\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/cross_db/cross_db_macros.yml", "arguments": [{"name": "array_column", "type": "string", "description": "Name of the column to join into a string"}, {"name": "column_prefix", "type": "string", "description": "Table alias for the array_column"}, {"name": "delimiter", "type": "string", "description": "(Optional) String that determines how to delimit your array values. Default ','"}], "created_at": 1714072384.3725839, "supported_languages": null}, "macro.snowplow_utils.default__get_array_to_string": {"name": "default__get_array_to_string", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_array_to_string.sql", "original_file_path": "macros/utils/cross_db/get_array_to_string.sql", "unique_id": "macro.snowplow_utils.default__get_array_to_string", "macro_sql": "{% macro default__get_array_to_string(array_column, column_prefix, delimiter=',') %}\n    array_to_string({{column_prefix}}.{{array_column}},'{{delimiter}}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.334408, "supported_languages": null}, "macro.snowplow_utils.spark__get_array_to_string": {"name": "spark__get_array_to_string", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_array_to_string.sql", "original_file_path": "macros/utils/cross_db/get_array_to_string.sql", "unique_id": "macro.snowplow_utils.spark__get_array_to_string", "macro_sql": "{% macro spark__get_array_to_string(array_column, column_prefix, delimiter=',') %}\n    array_join({{column_prefix}}.{{array_column}},'{{delimiter}}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.334555, "supported_languages": null}, "macro.snowplow_utils.type_max_string": {"name": "type_max_string", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/datatypes.sql", "original_file_path": "macros/utils/cross_db/datatypes.sql", "unique_id": "macro.snowplow_utils.type_max_string", "macro_sql": "\n\n{%- macro type_max_string() -%}\n        {{ return(adapter.dispatch('type_max_string', 'snowplow_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.snowplow_utils.default__type_max_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3348072, "supported_languages": null}, "macro.snowplow_utils.default__type_max_string": {"name": "default__type_max_string", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/datatypes.sql", "original_file_path": "macros/utils/cross_db/datatypes.sql", "unique_id": "macro.snowplow_utils.default__type_max_string", "macro_sql": "{% macro default__type_max_string() %}\n    {{ dbt.type_string() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.334904, "supported_languages": null}, "macro.snowplow_utils.redshift__type_max_string": {"name": "redshift__type_max_string", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/datatypes.sql", "original_file_path": "macros/utils/cross_db/datatypes.sql", "unique_id": "macro.snowplow_utils.redshift__type_max_string", "macro_sql": "{% macro redshift__type_max_string() %}\n    varchar(max)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.334966, "supported_languages": null}, "macro.snowplow_utils.get_array_size": {"name": "get_array_size", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_array_size.sql", "original_file_path": "macros/utils/cross_db/get_array_size.sql", "unique_id": "macro.snowplow_utils.get_array_size", "macro_sql": "\n\n{%- macro get_array_size(array_column) -%}\n    {{ return(adapter.dispatch('get_array_size', 'snowplow_utils')(array_column)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.snowplow_utils.bigquery__get_array_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.335291, "supported_languages": null}, "macro.snowplow_utils.default__get_array_size": {"name": "default__get_array_size", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_array_size.sql", "original_file_path": "macros/utils/cross_db/get_array_size.sql", "unique_id": "macro.snowplow_utils.default__get_array_size", "macro_sql": "{% macro default__get_array_size(array_column) %}\n    array_size({{array_column}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.335382, "supported_languages": null}, "macro.snowplow_utils.bigquery__get_array_size": {"name": "bigquery__get_array_size", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_array_size.sql", "original_file_path": "macros/utils/cross_db/get_array_size.sql", "unique_id": "macro.snowplow_utils.bigquery__get_array_size", "macro_sql": "{% macro bigquery__get_array_size(array_column) %}\n  array_length({{array_column}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.335475, "supported_languages": null}, "macro.snowplow_utils.postgres__get_array_size": {"name": "postgres__get_array_size", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_array_size.sql", "original_file_path": "macros/utils/cross_db/get_array_size.sql", "unique_id": "macro.snowplow_utils.postgres__get_array_size", "macro_sql": "{% macro postgres__get_array_size(array_column) %}\n    array_length({{array_column}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3355598, "supported_languages": null}, "macro.snowplow_utils.redshift__get_array_size": {"name": "redshift__get_array_size", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_array_size.sql", "original_file_path": "macros/utils/cross_db/get_array_size.sql", "unique_id": "macro.snowplow_utils.redshift__get_array_size", "macro_sql": "{% macro redshift__get_array_size(array_column) %}\n  get_array_length({{array_column}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.335646, "supported_languages": null}, "macro.snowplow_utils.cluster_by_fields_sessions_lifecycle": {"name": "cluster_by_fields_sessions_lifecycle", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/cluster_by_fields.sql", "original_file_path": "macros/utils/cross_db/cluster_by_fields.sql", "unique_id": "macro.snowplow_utils.cluster_by_fields_sessions_lifecycle", "macro_sql": "{% macro cluster_by_fields_sessions_lifecycle() %}\n\n  {{ return(adapter.dispatch('cluster_by_fields_sessions_lifecycle', 'snowplow_utils')()) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__cluster_by_fields_sessions_lifecycle"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.335883, "supported_languages": null}, "macro.snowplow_utils.default__cluster_by_fields_sessions_lifecycle": {"name": "default__cluster_by_fields_sessions_lifecycle", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/cluster_by_fields.sql", "original_file_path": "macros/utils/cross_db/cluster_by_fields.sql", "unique_id": "macro.snowplow_utils.default__cluster_by_fields_sessions_lifecycle", "macro_sql": "{% macro default__cluster_by_fields_sessions_lifecycle() %}\n\n  {{ return(snowplow_utils.get_value_by_target_type(bigquery_val=[\"session_identifier\"], snowflake_val=[\"to_date(start_tstamp)\"])) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.get_value_by_target_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3361259, "supported_languages": null}, "macro.snowplow_utils.get_string_agg": {"name": "get_string_agg", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_string_agg.sql", "original_file_path": "macros/utils/cross_db/get_string_agg.sql", "unique_id": "macro.snowplow_utils.get_string_agg", "macro_sql": "\n\n{%- macro get_string_agg(base_column, column_prefix, separator=',', order_by_column=base_column, sort_numeric=false, order_by_column_prefix=column_prefix, is_distinct=false, order_desc=false) -%}\n\n  {{ return(adapter.dispatch('get_string_agg', 'snowplow_utils')(base_column, column_prefix, separator, order_by_column, sort_numeric, order_by_column_prefix, is_distinct, order_desc)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.snowplow_utils.bigquery__get_string_agg"]}, "description": "This macro takes care of harmonising cross-db `list_agg`, `string_agg` type functions. These are aggregate functions (i.e. to be used with a `group by`) that take values from grouped rows and concatenates them into a single string. This macro supports ordering values by an arbitrary column and ensuring unique values (i.e. applying distinct).\n\nNote that databricks does not have list/string_agg function so a more complex expression is used.\n\n#### Returns\n\nThe data warehouse appropriate sql to perform a list/string_agg. \n\n#### Usage\n\n```sql\nselect\n...\n{{ snowplow_utils.get_string_agg('base_column', 'column_prefix', ';', 'order_by_col', sort_numeric=true, order_by_column_prefix='order_by_column_prefix', is_distict=True, order_desc=True)  }},\n...\nfrom ...\ngroup by ...\n\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/cross_db/cross_db_macros.yml", "arguments": [{"name": "base_column", "type": "string", "description": "Name of the column to aggregate values for"}, {"name": "column_prefix", "type": "string", "description": "Table alias for the base_column"}, {"name": "separator", "type": "string", "description": "(Optional) String to use to separate your values. Default ','"}, {"name": "order_by_column", "type": "string", "description": "(Optional) Column to order your values by before aggregating. Default base_column"}, {"name": "sort_numeric", "type": "boolean", "description": "(Optional) Is the column you are ordering by a numeric value (regardless of stored type). Default false"}, {"name": "order_by_column_prefix", "type": "string", "description": "(Optional) Table alias for the order_by_column. Default column_prefix"}, {"name": "is_distinct", "type": "boolean", "description": "(Optional) Do you want to apply distinct to your values. Will be applied after ordering. Default false"}, {"name": "order_desc", "type": "boolean", "description": "(Optional) Do you wish to apply the ordering descending. Default false"}], "created_at": 1714072384.372344, "supported_languages": null}, "macro.snowplow_utils.default__get_string_agg": {"name": "default__get_string_agg", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_string_agg.sql", "original_file_path": "macros/utils/cross_db/get_string_agg.sql", "unique_id": "macro.snowplow_utils.default__get_string_agg", "macro_sql": "{% macro default__get_string_agg(base_column, column_prefix, separator=',', order_by_column=base_column, sort_numeric=false, order_by_column_prefix=column_prefix, is_distinct=false, order_desc=false) %}\n\n  {% if (base_column != order_by_column or column_prefix != order_by_column_prefix or sort_numeric) and is_distinct %}\n    {%- do exceptions.raise_compiler_error(\"Snowplow Error: \"~target.type~\" does not support distinct with a different ordering column, or when the order column is numeric.\") -%}\n  {% endif %}\n\n\n  listagg({% if is_distinct %} distinct {% endif %} {{column_prefix}}.{{base_column}}::varchar, '{{separator}}') within group (order by\n\n  {% if sort_numeric -%}\n    to_numeric({{order_by_column_prefix}}.{{order_by_column}}, 38, 9) {% if order_desc %} desc {% endif %}\n\n  {% else %}\n    {{order_by_column_prefix}}.{{order_by_column}}::varchar {% if order_desc %} desc {% endif %}\n\n  {%- endif -%}\n  )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3432739, "supported_languages": null}, "macro.snowplow_utils.bigquery__get_string_agg": {"name": "bigquery__get_string_agg", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_string_agg.sql", "original_file_path": "macros/utils/cross_db/get_string_agg.sql", "unique_id": "macro.snowplow_utils.bigquery__get_string_agg", "macro_sql": "{% macro bigquery__get_string_agg(base_column, column_prefix, separator=',', order_by_column=base_column, sort_numeric=false, order_by_column_prefix=column_prefix, is_distinct=false, order_desc = false) %}\n\n  {% if (base_column != order_by_column or column_prefix != order_by_column_prefix or sort_numeric) and is_distinct %}\n    {%- do exceptions.raise_compiler_error(\"Snowplow Error: \"~target.type~\" does not support distinct with a different ordering column, or when the order column is numeric.\") -%}\n  {% endif %}\n\n  string_agg({% if is_distinct %} distinct {% endif %} cast({{column_prefix}}.{{base_column}} as string), '{{separator}}' order by\n\n  {% if sort_numeric -%}\n    cast({{order_by_column_prefix}}.{{order_by_column}} as numeric) {% if order_desc %} desc {% endif %}\n\n  {% else %}\n    cast({{order_by_column_prefix}}.{{order_by_column}} as string) {% if order_desc %} desc {% endif %}\n\n  {%- endif -%}\n  )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.343961, "supported_languages": null}, "macro.snowplow_utils.postgres__get_string_agg": {"name": "postgres__get_string_agg", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_string_agg.sql", "original_file_path": "macros/utils/cross_db/get_string_agg.sql", "unique_id": "macro.snowplow_utils.postgres__get_string_agg", "macro_sql": "{% macro postgres__get_string_agg(base_column, column_prefix, separator=',', order_by_column=base_column, sort_numeric=false, order_by_column_prefix=column_prefix, is_distinct=false, order_desc = false) %}\n\n  {% if (base_column != order_by_column or column_prefix != order_by_column_prefix or sort_numeric) and is_distinct %}\n    {%- do exceptions.raise_compiler_error(\"Snowplow Error: \"~target.type~\" does not support distinct with a different ordering column, or when the order column is numeric.\") -%}\n  {% endif %}\n\n  string_agg({% if is_distinct %} distinct {% endif %} {{column_prefix}}.{{base_column}}::varchar, '{{separator}}' order by\n\n  {% if sort_numeric -%}\n    {{order_by_column_prefix}}.{{order_by_column}}::decimal {% if order_desc %} desc {% endif %}\n\n  {% else %}\n    {{order_by_column_prefix}}.{{order_by_column}}::varchar {% if order_desc %} desc {% endif %}\n\n  {%- endif -%}\n  )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.344606, "supported_languages": null}, "macro.snowplow_utils.redshift__get_string_agg": {"name": "redshift__get_string_agg", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_string_agg.sql", "original_file_path": "macros/utils/cross_db/get_string_agg.sql", "unique_id": "macro.snowplow_utils.redshift__get_string_agg", "macro_sql": "{% macro redshift__get_string_agg(base_column, column_prefix, separator=',', order_by_column=base_column, sort_numeric=false, order_by_column_prefix=column_prefix, is_distinct=false, order_desc = false) %}\n\n  {% if (base_column != order_by_column or column_prefix != order_by_column_prefix or sort_numeric) and is_distinct %}\n    {%- do exceptions.raise_compiler_error(\"Snowplow Error: \"~target.type~\" does not support distinct with a different ordering column, or when the order column is numeric.\") -%}\n  {% endif %}\n\n  listagg({% if is_distinct %} distinct {% endif %} {{column_prefix}}.{{base_column}}::varchar, '{{separator}}') within group (order by\n\n  {% if sort_numeric -%}\n    text_to_numeric_alt({{order_by_column_prefix}}.{{order_by_column}}, 38, 9) {% if order_desc %} desc {% endif %}\n\n  {% else %}\n    {{order_by_column_prefix}}.{{order_by_column}}::varchar {% if order_desc %} desc {% endif %}\n\n  {%- endif -%}\n  )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.345242, "supported_languages": null}, "macro.snowplow_utils.spark__get_string_agg": {"name": "spark__get_string_agg", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_string_agg.sql", "original_file_path": "macros/utils/cross_db/get_string_agg.sql", "unique_id": "macro.snowplow_utils.spark__get_string_agg", "macro_sql": "{% macro spark__get_string_agg(base_column, column_prefix, separator=',', order_by_column=base_column, sort_numeric=false, order_by_column_prefix=column_prefix, is_distinct=false, order_desc = false) %}\n  /* Explaining inside out:\n  1. Create a group array which is made of sub-arrays of the base_column and the sort column\n  2. Sort these sub-arrays based on a lamdba function that compares on the second element (the sort column, casted if needed)\n  3. Use transform to select just the first element of the array\n  4. Optionally use array_distinct\n  5. Join the array into a string\n  */\n  array_join(\n    {% if is_distinct %} array_distinct( {% endif %}\n    transform(\n      array_sort(\n        FILTER(collect_list(\n          ARRAY({{column_prefix}}.{{base_column}}::string, {{order_by_column_prefix}}.{{order_by_column}}::string)), x -> x[0] is not null), (left, right) ->\n\n          {%- if sort_numeric -%}\n            CASE WHEN cast(left[1] as numeric(38, 9)) {% if order_desc %} > {% else %} < {% endif %} cast(right[1] as numeric(38, 9)) THEN -1\n                        WHEN cast(left[1] as numeric(38, 9)) {% if order_desc %} < {% else %} > {% endif %} cast(right[1] as numeric(38, 9)) THEN 1 ELSE 0 END\n\n          {% else %}\n            CASE WHEN left[1] {% if order_desc %} > {% else %} < {% endif %} right[1] THEN -1\n                        WHEN left[1] {% if order_desc %} < {% else %} > {% endif %} right[1] THEN 1 ELSE 0 END\n\n          {% endif %}\n                ), x -> x[0])\n    {% if is_distinct %} ) {% endif %},\n      '{{separator}}')\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3461308, "supported_languages": null}, "macro.snowplow_utils.get_split_to_array": {"name": "get_split_to_array", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_split_to_array.sql", "original_file_path": "macros/utils/cross_db/get_split_to_array.sql", "unique_id": "macro.snowplow_utils.get_split_to_array", "macro_sql": "\n\n{%- macro get_split_to_array(string_column, column_prefix, delimiter=',') -%}\n    {{ return(adapter.dispatch('get_split_to_array', 'snowplow_utils')(string_column, column_prefix, delimiter)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.snowplow_utils.default__get_split_to_array"]}, "description": "This macro takes care of harmonising cross-db split to array type functions. The macro supports a custom delimiter if your string is not delimited by a comma with no space (default).\n\n#### Returns\n\nThe data warehouse appropriate sql to perform a split to array. \n\n#### Usage\n\n```sql\nselect\n...\n{{ snowplow_utils.get_split_to_array('my_string_column', 'a', ', ') }}\n...\nfrom ... a\n\n```", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "snowplow_utils://macros/utils/cross_db/cross_db_macros.yml", "arguments": [{"name": "string_column", "type": "string", "description": "Name of the column to split into an array"}, {"name": "column_prefix", "type": "string", "description": "Table alias for the string_column"}, {"name": "delimiter", "type": "string", "description": "(Optional) String that determines how to split your string. Default ','"}], "created_at": 1714072384.372446, "supported_languages": null}, "macro.snowplow_utils.default__get_split_to_array": {"name": "default__get_split_to_array", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_split_to_array.sql", "original_file_path": "macros/utils/cross_db/get_split_to_array.sql", "unique_id": "macro.snowplow_utils.default__get_split_to_array", "macro_sql": "{% macro default__get_split_to_array(string_column, column_prefix, delimiter=',') %}\n    split({{column_prefix}}.{{string_column}}, '{{delimiter}}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3467278, "supported_languages": null}, "macro.snowplow_utils.redshift__get_split_to_array": {"name": "redshift__get_split_to_array", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_split_to_array.sql", "original_file_path": "macros/utils/cross_db/get_split_to_array.sql", "unique_id": "macro.snowplow_utils.redshift__get_split_to_array", "macro_sql": "{% macro redshift__get_split_to_array(string_column, column_prefix, delimiter=',') %}\n    split_to_array({{column_prefix}}.{{string_column}}, '{{delimiter}}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.34687, "supported_languages": null}, "macro.snowplow_utils.postgres__get_split_to_array": {"name": "postgres__get_split_to_array", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/get_split_to_array.sql", "original_file_path": "macros/utils/cross_db/get_split_to_array.sql", "unique_id": "macro.snowplow_utils.postgres__get_split_to_array", "macro_sql": "{% macro postgres__get_split_to_array(string_column, column_prefix, delimiter=',') %}\n    string_to_array({{column_prefix}}.{{string_column}}, '{{delimiter}}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.347014, "supported_languages": null}, "macro.snowplow_utils.unnest": {"name": "unnest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/unnest.sql", "original_file_path": "macros/utils/cross_db/unnest.sql", "unique_id": "macro.snowplow_utils.unnest", "macro_sql": "\n\n{%- macro unnest(id_column, unnest_column, field_alias, source_table, with_index=false) -%}\n    {{ return(adapter.dispatch('unnest', 'snowplow_utils')(id_column, unnest_column, field_alias, source_table, with_index)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.snowplow_utils.bigquery__unnest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3482099, "supported_languages": null}, "macro.snowplow_utils.default__unnest": {"name": "default__unnest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/unnest.sql", "original_file_path": "macros/utils/cross_db/unnest.sql", "unique_id": "macro.snowplow_utils.default__unnest", "macro_sql": "{% macro default__unnest(id_column, unnest_column, field_alias, source_table, with_index=false) %}\n    {% if with_index %}\n        select {{ id_column }}, posexplode({{ unnest_column }}) as (source_index, {{ field_alias }})\n    {% else %}\n        select {{ id_column }}, explode({{ unnest_column }}) as {{ field_alias }}\n    {% endif %}\n        from {{ source_table }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.348503, "supported_languages": null}, "macro.snowplow_utils.bigquery__unnest": {"name": "bigquery__unnest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/unnest.sql", "original_file_path": "macros/utils/cross_db/unnest.sql", "unique_id": "macro.snowplow_utils.bigquery__unnest", "macro_sql": "{% macro bigquery__unnest(id_column, unnest_column, field_alias, source_table, with_index=false) %}\n    select {{ id_column }}, r as {{ field_alias }} {% if with_index %}, source_index {% endif %}\n    from {{ source_table }} t, unnest(t.{{ unnest_column }}) r {% if with_index %} WITH OFFSET AS source_index {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.348779, "supported_languages": null}, "macro.snowplow_utils.snowflake__unnest": {"name": "snowflake__unnest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/unnest.sql", "original_file_path": "macros/utils/cross_db/unnest.sql", "unique_id": "macro.snowplow_utils.snowflake__unnest", "macro_sql": "{% macro snowflake__unnest(id_column, unnest_column, field_alias, source_table, with_index=false) %}\n    select t.{{ id_column }}, replace(r.value, '\"', '') as {{ field_alias }}\n    {% if with_index %}, r.index as source_index {% endif %}\n    from {{ source_table }} t, table(flatten(t.{{ unnest_column }})) r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.349003, "supported_languages": null}, "macro.snowplow_utils.postgres__unnest": {"name": "postgres__unnest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/unnest.sql", "original_file_path": "macros/utils/cross_db/unnest.sql", "unique_id": "macro.snowplow_utils.postgres__unnest", "macro_sql": "{% macro postgres__unnest(id_column, unnest_column, field_alias, source_table, with_index=false) %}\n    select {{ id_column }}, trim(unnest({{ unnest_column }})) as {{ field_alias }}\n    from {{ source_table }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.349192, "supported_languages": null}, "macro.snowplow_utils.redshift__unnest": {"name": "redshift__unnest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/cross_db/unnest.sql", "original_file_path": "macros/utils/cross_db/unnest.sql", "unique_id": "macro.snowplow_utils.redshift__unnest", "macro_sql": "{% macro redshift__unnest(id_column, unnest_column, field_alias, source_table, with_index=false) %}\n    select {{ id_column }}, {{ field_alias }} {% if with_index %} , index as source_index {% endif %} \n    from {{ source_table }} p, p.{{ unnest_column }} as {{ field_alias }}{% if with_index %}  at index {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.349458, "supported_languages": null}, "macro.snowplow_utils.get_optional_fields": {"name": "get_optional_fields", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/bigquery/get_optional_fields.sql", "original_file_path": "macros/utils/bigquery/get_optional_fields.sql", "unique_id": "macro.snowplow_utils.get_optional_fields", "macro_sql": "{% macro get_optional_fields(enabled, fields, col_prefix, relation, relation_alias, include_field_alias=true) -%}\n\n  {%- if enabled -%}\n\n    {%- set combined_fields = snowplow_utils.combine_column_versions(\n                                    relation=relation,\n                                    column_prefix=col_prefix,\n                                    required_fields=fields|map(attribute='field')|list,\n                                    relation_alias=relation_alias,\n                                    include_field_alias=include_field_alias\n                                    ) -%}\n\n    {{ combined_fields|join(',\\n') }}\n\n  {%- else -%}\n\n    {% for field in fields %}\n\n      {%- set field_alias = snowplow_utils.get_field_alias(field.field)[1] -%}\n\n      cast(null as {{ field.dtype }}){%- if include_field_alias %} as {{ field_alias }}{%- endif %} {%- if not loop.last %}, {% endif %}\n    {% endfor %}\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.combine_column_versions", "macro.snowplow_utils.get_field_alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.350403, "supported_languages": null}, "macro.snowplow_utils.merge_fields_across_col_versions": {"name": "merge_fields_across_col_versions", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/bigquery/combine_column_versions/merge_fields_across_col_versions.sql", "original_file_path": "macros/utils/bigquery/combine_column_versions/merge_fields_across_col_versions.sql", "unique_id": "macro.snowplow_utils.merge_fields_across_col_versions", "macro_sql": "{% macro merge_fields_across_col_versions(fields_by_col_version) %}\n\n  {# Flatten nested list of dicts into single list #}\n  {% set all_cols = fields_by_col_version|sum(start=[]) %}\n\n  {% set all_field_names = all_cols|map(attribute=\"field_name\")|list %}\n\n  {% set unique_field_names = all_field_names|unique|list %}\n\n  {% set merged_fields = [] %}\n\n  {% for field_name in unique_field_names %}\n\n    {# Get all field_paths per field. Returned as array. #}\n    {% set field_paths = all_cols|selectattr('field_name','equalto', field_name)|map(attribute='path')|list %}\n\n    {# Get nested_level of field. Returned as single element array. #}\n    {% set nested_level = all_cols|selectattr('field_name',\"equalto\", field_name)|map(attribute='nested_level')|list%}\n\n    {% set merged_field = {\n                            'field_name': field_name,\n                            'field_paths': field_paths,\n                            'nested_level': nested_level[0]\n                            } %}\n\n    {% do merged_fields.append(merged_field) %}\n\n  {% endfor %}\n\n  {{ return(merged_fields) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3517618, "supported_languages": null}, "macro.snowplow_utils.get_level_limit": {"name": "get_level_limit", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/bigquery/combine_column_versions/get_level_limit.sql", "original_file_path": "macros/utils/bigquery/combine_column_versions/get_level_limit.sql", "unique_id": "macro.snowplow_utils.get_level_limit", "macro_sql": "{% macro get_level_limit(level, level_filter, required_field_names) %}\n\n  {% set accepted_level_filters = ['equalto','lessthan','greaterthan'] %}\n\n  {% if level_filter is not in accepted_level_filters %}\n    {% set incompatible_level_filter_error_message -%}\n      Error: Incompatible level filter arg. Accepted args: {{accepted_level_filters|join(', ')}}\n    {%- endset %}\n    {{ return(snowplow_utils.throw_compiler_error(incompatible_level_filter_error_message)) }}\n  {% endif %}\n\n  {% if level is not none and required_field_names|length %}\n    {% set double_filter_error_message -%}\n      Error: Cannot filter fields by both `required_fields` and `level` arg. Please use only one.\n    {%- endset %}\n    {{ return(snowplow_utils.throw_compiler_error(double_filter_error_message)) }}\n  {% endif %}\n\n  {% if required_field_names|length and level_filter != 'equalto' %}\n    {% set required_fields_error_message -%}\n      Error: To filter fields using `required_fields` arg, `level_filter` must be set to `equalto`\n    {%- endset %}\n    {{ return(snowplow_utils.throw_compiler_error(required_fields_error_message)) }}\n  {% endif %}\n\n  {# level_limit is inclusive #}\n\n  {% if level is not none %}\n\n    {% if level_filter == 'equalto' %}\n\n      {% set level_limit = level %}\n\n    {% elif level_filter == 'lessthan' %}\n\n      {% set level_limit = level -1  %}\n\n    {% elif level_filter == 'greaterthan' %}\n\n      {% set level_limit = none %}\n\n    {% endif %}\n\n  {% elif required_field_names|length %}\n\n    {% set field_depths = [] %}\n    {% for field in required_field_names %}\n      {% set field_depth = field.split('.')|length %}\n      {% do field_depths.append(field_depth) %}\n    {% endfor %}\n\n    {% set level_limit = field_depths|max %}\n\n  {% else %}\n\n    {# Case when selecting all available fields #}\n\n    {% set level_limit = none %}\n\n  {% endif %}\n\n  {{ return(level_limit) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.throw_compiler_error"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.353803, "supported_languages": null}, "macro.snowplow_utils.flatten_fields": {"name": "flatten_fields", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/bigquery/combine_column_versions/flatten_fields.sql", "original_file_path": "macros/utils/bigquery/combine_column_versions/flatten_fields.sql", "unique_id": "macro.snowplow_utils.flatten_fields", "macro_sql": "{% macro flatten_fields(fields, parent, path, array_index, level_limit=none, level_counter=1, flattened_fields=[], field_name='') %}\n\n  {% for field in fields %}\n\n    {# Only recurse up-until level_limit #}\n    {% if level_limit is not none and level_counter > level_limit %}\n      {{ return(flattened_fields) }}\n    {% endif %}\n\n    {# If parent column is an array then take element [array_index].  #}\n    {% set delimiter = '[safe_offset(%s)].'|format(array_index) if parent.mode == 'REPEATED' else '.' %}\n    {% set path = path~delimiter~field.name %}\n    {% set field_name = field_name~'.'~field.name if field_name != '' else field_name~field.name %}\n\n    {% set field_dict = {\n                          'field_name': field_name,\n                          'path': path,\n                          'nested_level': level_counter\n                          } %}\n\n    {% do flattened_fields.append(field_dict) %}\n\n    {# If field has nested fields recurse to extract all fields, unless array. #}\n    {% if field.dtype == 'RECORD' and field.mode != 'REPEATED' %}\n\n      {{ snowplow_utils.flatten_fields(\n                                  fields=field.fields,\n                                  parent=field,\n                                  level_limit=level_limit,\n                                  level_counter=level_counter+1,\n                                  path=path,\n                                  flattened_fields=flattened_fields,\n                                  field_name=field_name\n                                  ) }}\n\n    {% endif %}\n\n  {% endfor %}\n\n  {{ return(flattened_fields) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.flatten_fields"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.355423, "supported_languages": null}, "macro.snowplow_utils.get_field_alias": {"name": "get_field_alias", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/bigquery/combine_column_versions/get_field_alias.sql", "original_file_path": "macros/utils/bigquery/combine_column_versions/get_field_alias.sql", "unique_id": "macro.snowplow_utils.get_field_alias", "macro_sql": "{% macro get_field_alias(field) %}\n\n  {# Check if field is supplied as tuple e.g. (field_name, field_alias) #}\n  {% if field is iterable and field is not string %}\n    {{ return(field) }}\n  {% else %}\n    {{ return((field, field|replace('.', '_'))) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3558369, "supported_languages": null}, "macro.snowplow_utils.get_matched_fields": {"name": "get_matched_fields", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/bigquery/combine_column_versions/get_matched_fields.sql", "original_file_path": "macros/utils/bigquery/combine_column_versions/get_matched_fields.sql", "unique_id": "macro.snowplow_utils.get_matched_fields", "macro_sql": "{% macro get_matched_fields(fields, required_field_names, nested_level, level_filter) %}\n\n  {% if not required_field_names|length %}\n\n    {% if nested_level is none %}\n\n      {% set matched_fields = fields %}\n\n    {% else %}\n\n      {% set matched_fields = fields|selectattr('nested_level',level_filter, nested_level)|list %}\n\n    {% endif %}\n\n  {% else %}\n\n    {% set matched_fields = fields|selectattr('field_name','in', required_field_names)|list %}\n\n  {% endif %}\n\n  {{ return(matched_fields) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.356447, "supported_languages": null}, "macro.snowplow_utils.coalesce_field_paths": {"name": "coalesce_field_paths", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/bigquery/combine_column_versions/coalesce_field_paths.sql", "original_file_path": "macros/utils/bigquery/combine_column_versions/coalesce_field_paths.sql", "unique_id": "macro.snowplow_utils.coalesce_field_paths", "macro_sql": "{% macro coalesce_field_paths(paths, field_alias, include_field_alias, relation_alias) %}\n\n  {% set relation_alias = '' if relation_alias is none else relation_alias~'.' %}\n\n  {% set field_alias = '' if not include_field_alias else ' as '~field_alias %}\n\n  {% set joined_paths = relation_alias~paths|join(', '~relation_alias) %}\n\n  {% set coalesced_field_paths = 'coalesce('~joined_paths~')'~field_alias %}\n\n  {{ return(coalesced_field_paths) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.356957, "supported_languages": null}, "macro.snowplow_utils.exclude_column_versions": {"name": "exclude_column_versions", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/bigquery/combine_column_versions/exclude_column_versions.sql", "original_file_path": "macros/utils/bigquery/combine_column_versions/exclude_column_versions.sql", "unique_id": "macro.snowplow_utils.exclude_column_versions", "macro_sql": "{% macro exclude_column_versions(columns, exclude_versions) %}\n  {% if not exclude_versions %}\n    {{ return(columns) }}\n  {% endif %}\n\n  {%- set filtered_columns_by_version = [] -%}\n  {% for column in columns %}\n  {# Remove columns that end with the version we want to exclude #}\n    {% for version in exclude_versions %}\n      {% if not column.name.endswith(version) %}\n        {% do filtered_columns_by_version.append(column) %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n\n  {{ return(filtered_columns_by_version) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.357625, "supported_languages": null}, "macro.snowplow_utils.combine_column_versions": {"name": "combine_column_versions", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/utils/bigquery/combine_column_versions/combine_column_versions.sql", "original_file_path": "macros/utils/bigquery/combine_column_versions/combine_column_versions.sql", "unique_id": "macro.snowplow_utils.combine_column_versions", "macro_sql": "{% macro combine_column_versions(relation, column_prefix, required_fields=[], nested_level=none, level_filter='equalto', relation_alias=none, include_field_alias=true, array_index=0, max_nested_level=15, exclude_versions=[]) %}\n\n  {# Create field_alias if not supplied i.e. is not tuple #}\n  {% set required_fields_tmp = required_fields %}\n  {% set required_fields = [] %}\n  {% for field in required_fields_tmp %}\n    {% set field_tuple = snowplow_utils.get_field_alias(field) %}\n    {% do required_fields.append(field_tuple) %}\n  {% endfor %}\n\n  {% set required_field_names = required_fields|map(attribute=0)|list %}\n\n  {# Determines correct level_limit. This limits recursive iterations during unnesting. #}\n  {% set level_limit = snowplow_utils.get_level_limit(nested_level, level_filter, required_field_names) %}\n\n  {# Limit level_limit to max_nested_level if required #}\n  {% set level_limit = max_nested_level if level_limit is none or level_limit > max_nested_level else level_limit %}\n\n  {%- set matched_columns = snowplow_utils.get_columns_in_relation_by_column_prefix(relation, column_prefix) -%}\n\n  {# Removes excluded versions, technically removes any column with that suffix #}\n  {%- set filter_columns_by_version = snowplow_utils.exclude_column_versions(matched_columns, exclude_versions) -%}\n\n  {%- set flattened_fields_by_col_version = [] -%}\n\n  {# Flatten fields within each column version. Returns nested arrays of dicts. #}\n  {# Dict: {'field_name': str, 'field_alias': str, 'flattened_path': str, 'nested_level': int #}\n  {% for column in filter_columns_by_version|sort(attribute='name', reverse=true) %}\n    {% set flattened_fields = snowplow_utils.flatten_fields(fields=column.fields,\n                                                            parent=column,\n                                                            path=column.name,\n                                                            array_index=array_index,\n                                                            level_limit=level_limit\n                                                            ) %}\n\n    {% do flattened_fields_by_col_version.append(flattened_fields) %}\n\n  {% endfor %}\n\n  {# Flatten nested arrays and merges fields across col version. Returns array of dicts containing all field_paths for field. #}\n  {# Dict: {'field_name': str, 'flattened_field_paths': str, 'nested_level': int #}\n  {% set merged_fields = snowplow_utils.merge_fields_across_col_versions(flattened_fields_by_col_version) %}\n\n  {# Filters merged_fields based on required_fields if provided, or the level filter if provided. Default return all fields. #}\n  {% set matched_fields = snowplow_utils.get_matched_fields(fields=merged_fields,\n                                                            required_field_names=required_field_names,\n                                                            nested_level=nested_level,\n                                                            level_filter=level_filter\n                                                            ) %}\n\n  {% set coalesced_field_paths = [] %}\n\n  {% for field in matched_fields %}\n\n    {% set passed_field_alias = required_fields|selectattr(0, \"equalto\", field.field_name)|map(attribute=1)|list %}\n    {% set default_field_alias = field.field_name|replace('.', '_') %}\n    {# Use passed_field_alias from required_fields if supplied #}\n    {% set field_alias = default_field_alias if not passed_field_alias|length else passed_field_alias[0] %}\n\n    {# Coalesce each field's path across all version of columns, ordered by latest col version. #}\n    {% set coalesced_field_path = snowplow_utils.coalesce_field_paths(paths=field.field_paths,\n                                                                      field_alias=field_alias,\n                                                                      include_field_alias=include_field_alias,\n                                                                      relation_alias=relation_alias) %}\n\n    {% do coalesced_field_paths.append(coalesced_field_path) %}\n\n  {% endfor %}\n\n  {# Returns array of all coalesced field paths #}\n  {{ return(coalesced_field_paths) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.get_field_alias", "macro.snowplow_utils.get_level_limit", "macro.snowplow_utils.get_columns_in_relation_by_column_prefix", "macro.snowplow_utils.exclude_column_versions", "macro.snowplow_utils.flatten_fields", "macro.snowplow_utils.merge_fields_across_col_versions", "macro.snowplow_utils.get_matched_fields", "macro.snowplow_utils.coalesce_field_paths"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3605602, "supported_languages": null}, "macro.snowplow_utils.get_incremental_manifest_table_relation": {"name": "get_incremental_manifest_table_relation", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/get_incremental_manifest_table_relation.sql", "original_file_path": "macros/incremental_hooks/get_incremental_manifest_table_relation.sql", "unique_id": "macro.snowplow_utils.get_incremental_manifest_table_relation", "macro_sql": "{% macro get_incremental_manifest_table_relation(package_name) %}\n\n  {%- set incremental_manifest_table = ref(package_name~'_incremental_manifest') -%}\n\n  {{ return(incremental_manifest_table) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.360827, "supported_languages": null}, "macro.snowplow_utils.get_run_limits": {"name": "get_run_limits", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/get_run_limits.sql", "original_file_path": "macros/incremental_hooks/get_run_limits.sql", "unique_id": "macro.snowplow_utils.get_run_limits", "macro_sql": "{% macro get_run_limits(min_last_success, max_last_success, models_matched_from_manifest, has_matched_all_models, start_date) -%}\n\n  {% set start_tstamp = snowplow_utils.cast_to_tstamp(start_date) %}\n  {% set min_last_success = snowplow_utils.cast_to_tstamp(min_last_success) %}\n  {% set max_last_success = snowplow_utils.cast_to_tstamp(max_last_success) %}\n\n  {% if not execute %}\n    {{ return('') }}\n  {% endif %}\n\n  {% if models_matched_from_manifest == 0 %}\n    {# If no snowplow models are in the manifest, start from start_tstamp #}\n    {% do snowplow_utils.log_message(\"Snowplow: No data in manifest. Processing data from start_date\") %}\n\n    {% set run_limits_query %}\n      select {{start_tstamp}} as lower_limit,\n              least({{ snowplow_utils.timestamp_add('day', var(\"snowplow__backfill_limit_days\", 30), start_tstamp) }},\n              {{ snowplow_utils.current_timestamp_in_utc() }}) as upper_limit\n    {% endset %}\n\n  {% elif not has_matched_all_models %}\n    {# If a new Snowplow model is added which isnt already in the manifest, replay all events up to upper_limit #}\n    {% do snowplow_utils.log_message(\"Snowplow: New Snowplow incremental model. Backfilling\") %}\n\n    {% set run_limits_query %}\n      select {{ start_tstamp }} as lower_limit,\n              least({{ max_last_success }},\n              {{ snowplow_utils.timestamp_add('day', var(\"snowplow__backfill_limit_days\", 30), start_tstamp) }}) as upper_limit\n    {% endset %}\n\n  {% elif min_last_success != max_last_success %}\n    {# If all models in the run exists in the manifest but are out of sync, replay from the min last success to the max last success #}\n    {% do snowplow_utils.log_message(\"Snowplow: Snowplow incremental models out of sync. Syncing\") %}\n\n    {% set run_limits_query %}\n      select {{ snowplow_utils.timestamp_add('hour', -var(\"snowplow__lookback_window_hours\", 6), min_last_success) }} as lower_limit,\n              least({{ max_last_success }},\n              {{ snowplow_utils.timestamp_add('day', var(\"snowplow__backfill_limit_days\", 30), min_last_success) }}) as upper_limit\n    {% endset %}\n\n  {% else %}\n    {# Else standard run of the model #}\n    {% do snowplow_utils.log_message(\"Snowplow: Standard incremental run\") %}\n\n    {% set run_limits_query %}\n      select\n        {{ snowplow_utils.timestamp_add('hour', -var(\"snowplow__lookback_window_hours\", 6), min_last_success) }} as lower_limit,\n        least({{ snowplow_utils.timestamp_add('day', var(\"snowplow__backfill_limit_days\", 30), min_last_success) }},\n              {{ snowplow_utils.current_timestamp_in_utc() }}) as upper_limit\n    {% endset %}\n\n  {% endif %}\n\n  {{ return(run_limits_query) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.cast_to_tstamp", "macro.snowplow_utils.log_message", "macro.snowplow_utils.timestamp_add", "macro.snowplow_utils.current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.362893, "supported_languages": null}, "macro.snowplow_utils.quarantine_sessions": {"name": "quarantine_sessions", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/quarantine_sessions.sql", "original_file_path": "macros/incremental_hooks/quarantine_sessions.sql", "unique_id": "macro.snowplow_utils.quarantine_sessions", "macro_sql": "{% macro quarantine_sessions(package_name, max_session_length, src_relation=this) %}\n\n  {{ return(adapter.dispatch('quarantine_sessions', 'snowplow_utils')(package_name, max_session_length, src_relation=this)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__quarantine_sessions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.36367, "supported_languages": null}, "macro.snowplow_utils.default__quarantine_sessions": {"name": "default__quarantine_sessions", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/quarantine_sessions.sql", "original_file_path": "macros/incremental_hooks/quarantine_sessions.sql", "unique_id": "macro.snowplow_utils.default__quarantine_sessions", "macro_sql": "{% macro default__quarantine_sessions(package_name, max_session_length, src_relation=this) %}\n\n  {% set quarantined_sessions = ref(package_name~'_base_quarantined_sessions') %}\n\n  {% set sessions_to_quarantine_sql = snowplow_utils.get_quarantine_sql(src_relation, max_session_length) %}\n\n  merge into {{ quarantined_sessions }} trg\n  using ({{ sessions_to_quarantine_sql }}) src\n  on trg.session_id = src.session_id\n  when not matched then insert (session_id) values(session_id);\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.get_quarantine_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.364067, "supported_languages": null}, "macro.snowplow_utils.postgres__quarantine_sessions": {"name": "postgres__quarantine_sessions", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/quarantine_sessions.sql", "original_file_path": "macros/incremental_hooks/quarantine_sessions.sql", "unique_id": "macro.snowplow_utils.postgres__quarantine_sessions", "macro_sql": "{% macro postgres__quarantine_sessions(package_name, max_session_length, src_relation=this) %}\n\n  {% set quarantined_sessions = ref(package_name~'_base_quarantined_sessions') %}\n  {% set sessions_to_quarantine_tmp = 'sessions_to_quarantine_tmp' %}\n\n  begin;\n\n    create temporary table {{ sessions_to_quarantine_tmp }} as (\n      {{ snowplow_utils.get_quarantine_sql(src_relation, max_session_length) }}\n    );\n\n    delete from {{ quarantined_sessions }}\n    where session_id in (select session_id from {{ sessions_to_quarantine_tmp }});\n\n    insert into {{ quarantined_sessions }} (\n      select session_id from {{ sessions_to_quarantine_tmp }});\n\n    drop table {{ sessions_to_quarantine_tmp }};\n\n  commit;\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.get_quarantine_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.364606, "supported_languages": null}, "macro.snowplow_utils.get_quarantine_sql": {"name": "get_quarantine_sql", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/quarantine_sessions.sql", "original_file_path": "macros/incremental_hooks/quarantine_sessions.sql", "unique_id": "macro.snowplow_utils.get_quarantine_sql", "macro_sql": "{% macro get_quarantine_sql(relation, max_session_length) %}\n\n  {# Find sessions exceeding max_session_days #}\n  {% set quarantine_sql -%}\n\n    select\n      session_id\n\n    from {{ relation }}\n    -- '=' since end_tstamp is restricted to start_tstamp + max_session_days\n    where end_tstamp = {{ snowplow_utils.timestamp_add(\n                              'day',\n                              max_session_length,\n                              'start_tstamp'\n                              ) }}\n\n  {%- endset %}\n\n  {{ return(quarantine_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.364876, "supported_languages": null}, "macro.snowplow_utils.get_enabled_snowplow_models": {"name": "get_enabled_snowplow_models", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/get_enabled_snowplow_models.sql", "original_file_path": "macros/incremental_hooks/get_enabled_snowplow_models.sql", "unique_id": "macro.snowplow_utils.get_enabled_snowplow_models", "macro_sql": "{% macro get_enabled_snowplow_models(package_name, graph_object=none, models_to_run=var(\"models_to_run\", \"\"), base_events_table_name='snowplow_base_events_this_run') -%}\n\n  {# Override dbt graph object if graph_object is passed. Testing purposes #}\n  {% if graph_object is not none %}\n    {% set graph = graph_object %}\n  {% endif %}\n\n  {# models_to_run optionally passed using dbt ls command. This returns a string of models to be run. Split into list #}\n  {% if models_to_run|length %}\n    {% set selected_models = models_to_run.split(\" \") %}\n  {% else %}\n    {% set selected_models = none %}\n  {% endif %}\n\n  {% set enabled_models = [] %}\n  {% set untagged_snowplow_models = [] %}\n  {% set snowplow_model_tag = package_name+'_incremental' %}\n  {% set snowplow_events_this_run_path = 'model.' + project_name + '.' + base_events_table_name %}\n\n  {% if execute %}\n\n    {% set nodes = graph.nodes.values() | selectattr(\"resource_type\", \"equalto\", \"model\") %}\n\n    {% for node in nodes %}\n      {# If selected_models is specified, filter for these models #}\n      {% if selected_models is none or node.name in selected_models %}\n\n        {% if node.config.enabled and snowplow_model_tag not in node.tags and snowplow_events_this_run_path in node.depends_on.nodes %}\n\n          {%- do untagged_snowplow_models.append(node.name) -%}\n\n        {% endif %}\n\n        {% if node.config.enabled and snowplow_model_tag in node.tags %}\n\n          {%- do enabled_models.append(node.name) -%}\n\n        {% endif %}\n\n      {% endif %}\n\n    {% endfor %}\n\n    {% if untagged_snowplow_models|length %}\n    {#\n      Prints warning for models that reference snowplow_base_events_this_run but are untagged as '{package_name}_incremental'\n      Without this tagging these models will not be inserted into the manifest, breaking the incremental logic.\n      Only catches first degree dependencies rather than all downstream models\n    #}\n      {%- do exceptions.raise_compiler_error(\"Snowplow Warning: Untagged models referencing '\"+snowplow_events_this_run_path+\"'. Please refer to the Snowplow docs on tagging. \"\n      + \"Models: \"+ ', '.join(untagged_snowplow_models)) -%}\n\n    {% endif %}\n\n    {% if enabled_models|length == 0 %}\n      {%- do exceptions.raise_compiler_error(\"No enabled models identified.\") -%}\n    {% endif %}\n\n  {% endif %}\n\n  {{ return(enabled_models) }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3667588, "supported_languages": null}, "macro.snowplow_utils.get_incremental_manifest_status": {"name": "get_incremental_manifest_status", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/get_incremental_manifest_status.sql", "original_file_path": "macros/incremental_hooks/get_incremental_manifest_status.sql", "unique_id": "macro.snowplow_utils.get_incremental_manifest_status", "macro_sql": "{% macro get_incremental_manifest_status(incremental_manifest_table, models_in_run) -%}\n\n  {# In case of not execute just return empty strings to avoid hitting database #}\n  {% if not execute %}\n    {{ return(['', '', '', '']) }}\n  {% endif %}\n\n  {% set target_relation = adapter.get_relation(\n        database=incremental_manifest_table.database,\n        schema=incremental_manifest_table.schema,\n        identifier=incremental_manifest_table.name) %}\n\n  {% if target_relation is not none %}\n\n    {% set last_success_query %}\n      select min(last_success) as min_last_success,\n            max(last_success) as max_last_success,\n            coalesce(count(*), 0) as models\n      from {{ incremental_manifest_table }}\n      where model in ({{ snowplow_utils.print_list(models_in_run) }})\n    {% endset %}\n\n    {% set results = run_query(last_success_query) %}\n\n    {% if execute %}\n\n      {% set min_last_success = results.columns[0].values()[0] %}\n      {% set max_last_success = results.columns[1].values()[0] %}\n      {% set models_matched_from_manifest = results.columns[2].values()[0] %}\n      {% set has_matched_all_models = true if models_matched_from_manifest == models_in_run|length else false %}\n\n      {{ return([min_last_success, max_last_success, models_matched_from_manifest, has_matched_all_models]) }}\n\n    {% endif %}\n\n\n  {% else %}\n\n    {% do exceptions.warn(\"Snowplow Warning: \" ~ incremental_manifest_table ~ \" does not exist. This is expected if you are compiling a fresh installation of the dbt-snowplow-* packages.\") %}\n\n    {{ return(['9999-01-01 00:00:00', '9999-01-01 00:00:00', 0, false]) }}\n\n  {% endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.print_list", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.368729, "supported_languages": null}, "macro.snowplow_utils.print_run_limits": {"name": "print_run_limits", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/get_incremental_manifest_status.sql", "original_file_path": "macros/incremental_hooks/get_incremental_manifest_status.sql", "unique_id": "macro.snowplow_utils.print_run_limits", "macro_sql": "{% macro print_run_limits(run_limits_relation, package= none) -%}\n\n  {% set run_limits_query %}\n    select lower_limit, upper_limit from {{ run_limits_relation }}\n  {% endset %}\n\n  {# Derive limits from manifest instead of selecting from limits table since run_query executes during 2nd parse the limits table is yet to be updated. #}\n  {% set results = run_query(run_limits_query) %}\n\n  {% if execute %}\n\n    {% set lower_limit = snowplow_utils.tstamp_to_str(results.columns[0].values()[0]) %}\n    {% set upper_limit = snowplow_utils.tstamp_to_str(results.columns[1].values()[0]) %}\n    {% set run_limits_message = \"Snowplow: Processing data between \" + lower_limit + \" and \" + upper_limit %}\n    {% if package %}\n        {% set run_limits_message = run_limits_message +  \" (\" + package + \")\" %}\n    {% endif %}\n\n    {% do snowplow_utils.log_message(run_limits_message) %}\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.snowplow_utils.tstamp_to_str", "macro.snowplow_utils.log_message"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3695161, "supported_languages": null}, "macro.snowplow_utils.get_session_lookback_limit": {"name": "get_session_lookback_limit", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/get_session_lookback_limit.sql", "original_file_path": "macros/incremental_hooks/get_session_lookback_limit.sql", "unique_id": "macro.snowplow_utils.get_session_lookback_limit", "macro_sql": "{% macro get_session_lookback_limit(lower_limit) %}\n\n  {% if not execute %}\n    {{ return('')}}\n  {% endif %}\n\n  {% set limit_query %}\n    select\n    {{ snowplow_utils.timestamp_add(\n                'day',\n                -var(\"snowplow__session_lookback_days\", 365),\n                lower_limit) }} as session_lookback_limit\n\n  {% endset %}\n\n  {% set results = run_query(limit_query) %}\n\n  {% if execute %}\n\n    {% set session_lookback_limit = snowplow_utils.cast_to_tstamp(results.columns[0].values()[0]) %}\n\n  {{ return(session_lookback_limit) }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.timestamp_add", "macro.dbt.run_query", "macro.snowplow_utils.cast_to_tstamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3704178, "supported_languages": null}, "macro.snowplow_utils.return_base_new_event_limits": {"name": "return_base_new_event_limits", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/return_base_new_event_limits.sql", "original_file_path": "macros/incremental_hooks/return_base_new_event_limits.sql", "unique_id": "macro.snowplow_utils.return_base_new_event_limits", "macro_sql": "{% macro return_base_new_event_limits(base_events_this_run) -%}\n\n  {# In case of not execute just return empty strings to avoid hitting database #}\n  {% if not execute %}\n    {{ return(['','',''])}}\n  {% endif %}\n\n  {% set target_relation = adapter.get_relation(\n        database=base_events_this_run.database,\n        schema=base_events_this_run.schema,\n        identifier=base_events_this_run.name) %}\n\n  {% if target_relation is not none %}\n\n    {% set limit_query %}\n      select\n        lower_limit,\n        upper_limit,\n        {{ snowplow_utils.timestamp_add('day',\n                                      -var(\"snowplow__max_session_days\", 3),\n                                      'lower_limit') }} as session_start_limit\n\n      from {{ base_events_this_run }}\n    {% endset %}\n\n    {% set results = run_query(limit_query) %}\n\n    {% if execute %}\n\n      {% set lower_limit = snowplow_utils.cast_to_tstamp(results.columns[0].values()[0]) %}\n      {% set upper_limit = snowplow_utils.cast_to_tstamp(results.columns[1].values()[0]) %}\n      {% set session_start_limit = snowplow_utils.cast_to_tstamp(results.columns[2].values()[0]) %}\n\n      {{ return([lower_limit, upper_limit, session_start_limit]) }}\n\n    {% endif %}\n\n  {% else %}\n\n    {% do exceptions.warn(\"Snowplow Warning: \" ~ base_events_this_run ~ \" does not exist. This is expected if you are compiling a fresh installation of the dbt-snowplow-* packages.\") %}\n\n    {% set dummy_limit = snowplow_utils.cast_to_tstamp('9999-01-01 00:00:00') %}\n\n    {{ return([dummy_limit, dummy_limit, dummy_limit]) }}\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.timestamp_add", "macro.dbt.run_query", "macro.snowplow_utils.cast_to_tstamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3723788, "supported_languages": null}, "macro.snowplow_utils.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/apply_grants.sql", "original_file_path": "macros/incremental_hooks/apply_grants.sql", "unique_id": "macro.snowplow_utils.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {# \n        We only want to enforce this if the package user is managing grants this way - if they are doing it in database we should \n        pass {} so that it's a no-op \n    #}\n    {% if (grant_config.get('select', []) or var('snowplow__grant_select_to', [])) and target.type != 'bigquery' %}\n        {# Add our config to the grants from our variable #}\n        {% do grant_config.update({'select': grant_config.get('select', []) + var('snowplow__grant_select_to', [])}) %}\n    {% endif %}\n    {# Call the original macro so we don't have to keep this in sync ourselves #}\n    {{ dbt.default__apply_grants(relation, grant_config, should_revoke=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3734322, "supported_languages": null}, "macro.snowplow_utils.grant_usage_on_schemas_built_into": {"name": "grant_usage_on_schemas_built_into", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/apply_grants.sql", "original_file_path": "macros/incremental_hooks/apply_grants.sql", "unique_id": "macro.snowplow_utils.grant_usage_on_schemas_built_into", "macro_sql": "{% macro grant_usage_on_schemas_built_into(enabled=false) -%}\n\n  {{ return(adapter.dispatch('grant_usage_on_schemas_built_into', 'snowplow_utils')(enabled)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.bigquery__grant_usage_on_schemas_built_into"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.373621, "supported_languages": null}, "macro.snowplow_utils.default__grant_usage_on_schemas_built_into": {"name": "default__grant_usage_on_schemas_built_into", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/apply_grants.sql", "original_file_path": "macros/incremental_hooks/apply_grants.sql", "unique_id": "macro.snowplow_utils.default__grant_usage_on_schemas_built_into", "macro_sql": "{% macro default__grant_usage_on_schemas_built_into(enabled=true) %}\n    {% if enabled %}\n        {% if execute %}\n            {% set grant_list %}\n                {% for schema in schemas %}\n                    {% for role in var('snowplow__grant_select_to', []) %}\n                        grant usage on schema {{ schema }} to {% if target.type == 'databricks' %}`{% else %}\"{% endif %}{{ role }}{% if target.type == 'databricks' %}`{% else %}\"{% endif %};\n                    {% endfor %}\n                {% endfor %}\n            {% endset %}\n            {{ return(grant_list) }}\n        {% endif %}\n    {% endif %}\n    {{ return(\"\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.374218, "supported_languages": null}, "macro.snowplow_utils.bigquery__grant_usage_on_schemas_built_into": {"name": "bigquery__grant_usage_on_schemas_built_into", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/apply_grants.sql", "original_file_path": "macros/incremental_hooks/apply_grants.sql", "unique_id": "macro.snowplow_utils.bigquery__grant_usage_on_schemas_built_into", "macro_sql": "{% macro bigquery__grant_usage_on_schemas_built_into(enabled=false) %}\n    {# Bigquery doesn't need usage granted on schemas #}\n    {{ return(\"\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.374354, "supported_languages": null}, "macro.snowplow_utils.snowplow_incremental_post_hook": {"name": "snowplow_incremental_post_hook", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/snowplow_incremental_post_hook.sql", "original_file_path": "macros/incremental_hooks/snowplow_incremental_post_hook.sql", "unique_id": "macro.snowplow_utils.snowplow_incremental_post_hook", "macro_sql": "{% macro snowplow_incremental_post_hook(package_name='snowplow', incremental_manifest_table_name=none, base_events_this_run_table_name=none, session_timestamp=var('snowplow__session_timestamp', 'load_tstamp')) %}\n\n  {% set enabled_snowplow_models = snowplow_utils.get_enabled_snowplow_models(package_name) -%}\n\n  {% set successful_snowplow_models = snowplow_utils.get_successful_models(models=enabled_snowplow_models) -%}\n\n  {%- if incremental_manifest_table_name -%}\n    {%- set incremental_manifest_table = ref(incremental_manifest_table_name) -%}\n  {%- else -%}\n    {% set incremental_manifest_table = snowplow_utils.get_incremental_manifest_table_relation(package_name) -%}\n  {%- endif -%}\n\n  {%- if base_events_this_run_table_name -%}\n    {%- set base_events_this_run_table = ref(base_events_this_run_table_name) -%}\n  {%- else -%}\n    {% set base_events_this_run_table = ref(package_name~'_base_events_this_run') -%}\n  {%- endif -%}\n\n  {{ snowplow_utils.update_incremental_manifest_table(incremental_manifest_table, base_events_this_run_table, successful_snowplow_models, session_timestamp) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.get_enabled_snowplow_models", "macro.snowplow_utils.get_successful_models", "macro.snowplow_utils.get_incremental_manifest_table_relation", "macro.snowplow_utils.update_incremental_manifest_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.375239, "supported_languages": null}, "macro.snowplow_utils.update_incremental_manifest_table": {"name": "update_incremental_manifest_table", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/update_incremental_manifest_table.sql", "original_file_path": "macros/incremental_hooks/update_incremental_manifest_table.sql", "unique_id": "macro.snowplow_utils.update_incremental_manifest_table", "macro_sql": "{% macro update_incremental_manifest_table(manifest_table, base_events_table, models, session_timestamp=var('snowplow__session_timestamp', 'load_tstamp')) -%}\n\n  {{ return(adapter.dispatch('update_incremental_manifest_table', 'snowplow_utils')(manifest_table, base_events_table, models, session_timestamp)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__update_incremental_manifest_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.376844, "supported_languages": null}, "macro.snowplow_utils.default__update_incremental_manifest_table": {"name": "default__update_incremental_manifest_table", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/update_incremental_manifest_table.sql", "original_file_path": "macros/incremental_hooks/update_incremental_manifest_table.sql", "unique_id": "macro.snowplow_utils.default__update_incremental_manifest_table", "macro_sql": "{% macro default__update_incremental_manifest_table(manifest_table, base_events_table, models, session_timestamp) -%}\n\n  {% if models %}\n\n    {% set last_success_query %}\n      select\n        b.model,\n        a.last_success\n\n      from\n        (select max({{ session_timestamp }}) as last_success from {{ base_events_table }}) a,\n        ({% for model in models %} select '{{model}}' as model {%- if not loop.last %} union all {% endif %} {% endfor %}) b\n\n      where a.last_success is not null -- if run contains no data don't add to manifest\n    {% endset %}\n\n    merge into {{ manifest_table }} m\n    using ( {{ last_success_query }} ) s\n    on m.model = s.model\n    when matched then\n        update set last_success = greatest(m.last_success, s.last_success)\n    when not matched then\n        insert (model, last_success) values(model, last_success);\n\n    {% if target.type == 'snowflake' %}\n      commit;\n    {% endif %}\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3772879, "supported_languages": null}, "macro.snowplow_utils.postgres__update_incremental_manifest_table": {"name": "postgres__update_incremental_manifest_table", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/update_incremental_manifest_table.sql", "original_file_path": "macros/incremental_hooks/update_incremental_manifest_table.sql", "unique_id": "macro.snowplow_utils.postgres__update_incremental_manifest_table", "macro_sql": "{% macro postgres__update_incremental_manifest_table(manifest_table, base_events_table, models, session_timestamp) -%}\n\n  {% if models %}\n\n    begin transaction;\n      --temp table to find the greatest last_success per model.\n      --this protects against partial backfills causing the last_success to move back in time.\n      create temporary table snowplow_models_last_success (\n        model varchar,\n        last_success {{type_timestamp()}}\n      );\n      insert into snowplow_models_last_success (\n        select\n          a.model,\n          greatest(a.last_success, b.last_success) as last_success\n\n        from (\n\n          select\n            model,\n            last_success\n\n          from\n            (select max({{ session_timestamp }}) as last_success from {{ base_events_table }}) as ls,\n            ({% for model in models %} select '{{model}}' as model {%- if not loop.last %} union all {% endif %} {% endfor %}) as mod\n\n          where last_success is not null -- if run contains no data don't add to manifest\n\n        ) a\n        left join {{ manifest_table }} b\n        on a.model = b.model\n        );\n\n      delete from {{ manifest_table }} where model in (select model from snowplow_models_last_success);\n      insert into {{ manifest_table }} (select * from snowplow_models_last_success);\n\n    end transaction;\n\n    drop table snowplow_models_last_success;\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.377712, "supported_languages": null}, "macro.snowplow_utils.get_new_event_limits_table_relation": {"name": "get_new_event_limits_table_relation", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/get_new_event_limits_table_relation.sql", "original_file_path": "macros/incremental_hooks/get_new_event_limits_table_relation.sql", "unique_id": "macro.snowplow_utils.get_new_event_limits_table_relation", "macro_sql": "{% macro get_new_event_limits_table_relation(package_name) %}\n\n  {%- set new_event_limits_table = ref(package_name~'_base_new_event_limits') -%}\n\n  {{ return(new_event_limits_table) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.377955, "supported_languages": null}, "macro.snowplow_utils.get_successful_models": {"name": "get_successful_models", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/incremental_hooks/get_successful_models.sql", "original_file_path": "macros/incremental_hooks/get_successful_models.sql", "unique_id": "macro.snowplow_utils.get_successful_models", "macro_sql": "{% macro get_successful_models(models=[], run_results=results) -%}\n\n  {% set successful_models = [] %}\n  {# Remove the patch version from dbt version #}\n  {% set dbt_version_trunc = dbt_version.split('.')[0:2]|join('.')|float %}\n\n  {% if execute %}\n\n    {% for res in run_results -%}\n      {# Filter for models #}\n      {% if res.node.unique_id.startswith('model.') %}\n\n        {% set is_model_to_include = true if not models|length or res.node.name in models else false %}\n\n        {# run_results schema changed between dbt v0.18 and v0.19 so different methods to define success #}\n        {% if dbt_version_trunc <= 0.18 %}\n          {% set skipped = true if res.status is none and res.skip else false %}\n          {% set errored = true if res.status == 'ERROR' else false %}\n          {% set success = true if not (skipped or errored) else false %}\n        {% else %}\n          {% set success = true if res.status == 'success' else false %}\n        {% endif %}\n\n        {% if success and is_model_to_include %}\n\n          {%- do successful_models.append(res.node.name) -%}\n\n        {% endif %}\n\n      {% endif %}\n\n    {% endfor %}\n\n    {{ return(successful_models) }}\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3793752, "supported_languages": null}, "macro.snowplow_utils.base_create_snowplow_events_this_run": {"name": "base_create_snowplow_events_this_run", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_create_snowplow_events_this_run.sql", "original_file_path": "macros/base/base_create_snowplow_events_this_run.sql", "unique_id": "macro.snowplow_utils.base_create_snowplow_events_this_run", "macro_sql": "{% macro base_create_snowplow_events_this_run(sessions_this_run_table='snowplow_base_sessions_this_run', session_identifiers=[{\"schema\" : \"atomic\", \"field\" : \"domain_sessionid\"}], session_sql=none, session_timestamp='load_tstamp', derived_tstamp_partitioned=true, days_late_allowed=3, max_session_days=3, app_ids=[], snowplow_events_database=none, snowplow_events_schema='atomic', snowplow_events_table='events', entities_or_sdes=none, custom_sql=none) %}\n    {{ return(adapter.dispatch('base_create_snowplow_events_this_run', 'snowplow_utils')(sessions_this_run_table, session_identifiers, session_sql, session_timestamp, derived_tstamp_partitioned, days_late_allowed, max_session_days, app_ids, snowplow_events_database, snowplow_events_schema, snowplow_events_table, entities_or_sdes, custom_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__base_create_snowplow_events_this_run"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.390783, "supported_languages": null}, "macro.snowplow_utils.default__base_create_snowplow_events_this_run": {"name": "default__base_create_snowplow_events_this_run", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_create_snowplow_events_this_run.sql", "original_file_path": "macros/base/base_create_snowplow_events_this_run.sql", "unique_id": "macro.snowplow_utils.default__base_create_snowplow_events_this_run", "macro_sql": "{% macro default__base_create_snowplow_events_this_run(sessions_this_run_table, session_identifiers, session_sql, session_timestamp, derived_tstamp_partitioned, days_late_allowed, max_session_days, app_ids, snowplow_events_database, snowplow_events_schema, snowplow_events_table, entities_or_sdes, custom_sql) %}\n    {%- set lower_limit, upper_limit = snowplow_utils.return_limits_from_model(ref(sessions_this_run_table),\n                                                                            'start_tstamp',\n                                                                            'end_tstamp') %}\n    {% set sessions_this_run = ref(sessions_this_run_table) %}\n    {% set snowplow_events = api.Relation.create(database=snowplow_events_database, schema=snowplow_events_schema, identifier=snowplow_events_table) %}\n\n    {% set events_this_run_query %}\n        with identified_events AS (\n            select\n                {% if session_sql %}\n                    {{ session_sql }} as session_identifier,\n                {% else -%}\n                    COALESCE(\n                        {% for identifier in session_identifiers %}\n                            {%- if identifier['schema']|lower != 'atomic' -%}\n                                {{ snowplow_utils.get_field(identifier['schema'], identifier['field'], 'e', dbt.type_string(), 0, snowplow_events) }}\n                            {%- else -%}\n                                e.{{identifier['field']}}\n                            {%- endif -%}\n                            ,\n                        {%- endfor -%}\n                        NULL\n                    ) as session_identifier,\n                {%- endif %}\n                e.*\n                {% if custom_sql %}\n                    , {{ custom_sql }}\n                {% endif %}\n\n            from {{ snowplow_events }} e\n\n        )\n\n        select\n            a.*,\n            b.user_identifier -- take user_identifier from manifest. This ensures only 1 domain_userid per session.\n\n        from identified_events as a\n        inner join {{ sessions_this_run }} as b\n        on a.session_identifier = b.session_identifier\n\n        where a.{{ session_timestamp }} <= {{ snowplow_utils.timestamp_add('day', max_session_days, 'b.start_tstamp') }}\n        and a.dvce_sent_tstamp <= {{ snowplow_utils.timestamp_add('day', days_late_allowed, 'a.dvce_created_tstamp') }}\n        and a.{{ session_timestamp }} >= {{ lower_limit }}\n        and a.{{ session_timestamp }} <= {{ upper_limit }}\n        and a.{{ session_timestamp }} >= b.start_tstamp -- deal with late loading events\n\n        {% if derived_tstamp_partitioned and target.type == 'bigquery' | as_bool() %}\n            and a.derived_tstamp >= {{ snowplow_utils.timestamp_add('hour', -1, lower_limit) }}\n            and a.derived_tstamp <= {{ upper_limit }}\n        {% endif %}\n\n        and {{ snowplow_utils.app_id_filter(app_ids) }}\n\n        qualify row_number() over (partition by a.event_id order by a.{{ session_timestamp }}, a.dvce_created_tstamp) = 1\n    {% endset %}\n\n    {{ return(events_this_run_query) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.return_limits_from_model", "macro.snowplow_utils.get_field", "macro.dbt.type_string", "macro.snowplow_utils.timestamp_add", "macro.snowplow_utils.app_id_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.3922591, "supported_languages": null}, "macro.snowplow_utils.postgres__base_create_snowplow_events_this_run": {"name": "postgres__base_create_snowplow_events_this_run", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_create_snowplow_events_this_run.sql", "original_file_path": "macros/base/base_create_snowplow_events_this_run.sql", "unique_id": "macro.snowplow_utils.postgres__base_create_snowplow_events_this_run", "macro_sql": "{% macro postgres__base_create_snowplow_events_this_run(sessions_this_run_table, session_identifiers, session_sql, session_timestamp, derived_tstamp_partitioned, days_late_allowed, max_session_days, app_ids, snowplow_events_database, snowplow_events_schema, snowplow_events_table, entities_or_sdes, custom_sql) %}\n    {%- set lower_limit, upper_limit = snowplow_utils.return_limits_from_model(ref(sessions_this_run_table),\n                                                                            'start_tstamp',\n                                                                            'end_tstamp') %}\n\n\n    {# Get all the session and user contexts extracted and ready to join later #}\n    {% set unique_session_identifiers = dict() %} {# need to avoid duplicate contexts when values come from the same one, so just use the first of that context #}\n\n    {% if session_identifiers %}\n        {% for identifier in session_identifiers %}\n            {% if identifier['schema']|lower != 'atomic' and identifier['schema'] not in unique_session_identifiers %}\n                {% do unique_session_identifiers.update({identifier['schema']: identifier}) %}\n            {%- endif -%}\n            {% if identifier['schema'] in unique_session_identifiers.keys() %}\n                {% if identifier['alias'] != unique_session_identifiers[identifier['schema']]['alias'] or identifier['prefix'] != unique_session_identifiers[identifier['schema']]['prefix']  %}\n                    {% do exceptions.warn(\"Snowplow Warning: Duplicate context ( \" ~ identifier['schema'] ~\" ) detected for session identifiers, using first alias and prefix provided ( \" ~ unique_session_identifiers[identifier['schema']] ~ \" ) in base events this run.\") %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n\n    {# check uniqueness of entity/sde names provided, warn those also in session identifiers #}\n    {% if entities_or_sdes %}\n        {% set ent_sde_names = [] %}\n        {% for ent_or_sde in entities_or_sdes %}\n            {% do ent_sde_names.append(ent_or_sde['schema']) %}\n            {% if ent_or_sde['schema'] in unique_session_identifiers.keys() %}\n                {% if ent_or_sde['alias'] != unique_session_identifiers[ent_or_sde['schema']]['alias'] or ent_or_sde['prefix'] != unique_session_identifiers[ent_or_sde['schema']]['prefix']  %}\n                    {% do exceptions.warn(\"Snowplow Warning: Context or SDE ( \" ~ ent_or_sde['schema'] ~ \" ) used for session_identifier is being included, using alias and prefix from session_identifier ( \" ~ unique_session_identifiers[ent_or_sde['schema']] ~ \" ).\") %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n        {% if ent_sde_names | unique | list | length != entities_or_sdes | length %}\n            {% do exceptions.raise_compiler_error(\"There are duplicate schema names in your provided `entities_or_sdes` list. Please correct this before proceeding.\")%}\n        {% endif %}\n    {% endif %}\n\n    {% set sessions_this_run = ref(sessions_this_run_table) %}\n    {% set snowplow_events = api.Relation.create(database=snowplow_events_database, schema=snowplow_events_schema, identifier=snowplow_events_table) %}\n\n    {% set events_this_run_query %}\n        with\n\n        {# Extract the session identifier contexts into CTEs #}\n        {% if unique_session_identifiers -%}\n            {% for identifier in unique_session_identifiers.values() %}\n                {% if identifier['schema']|lower != 'atomic' %}\n                    {{ snowplow_utils.get_sde_or_context(snowplow_events_schema, identifier['schema'], lower_limit, upper_limit, identifier['prefix'], database=snowplow_events_database) }},\n                {%- endif -%}\n            {% endfor %}\n        {% endif %}\n\n        {# Extract the entitity/sde contexts into CTEs UNLESS they are in the session already #}\n        {%- if entities_or_sdes -%}\n            {%- for ent_or_sde in entities_or_sdes -%}\n                {%- set name = none -%}\n                {%- set prefix = none -%}\n                {%- set single_entity = true -%}\n                {%- if ent_or_sde['schema'] -%}\n                    {%- set name = ent_or_sde['schema'] -%}\n                {%- else -%}\n                    {%- do exceptions.raise_compiler_error(\"Need to specify the schema name of your Entity or SDE using the {'schema'} attribute in a key-value map.\") -%}\n                {%- endif -%}\n                {%- if ent_or_sde['prefix'] -%}\n                    {%- set prefix = ent_or_sde['prefix'] -%}\n                {%- else -%}\n                    {%- set prefix = name -%}\n                {%- endif -%}\n                {%- if ent_or_sde['single_entity'] and ent_or_sde['single_entity'] is boolean -%}\n                    {%- set single_entity = ent_or_sde['single_entity'] -%}\n                {%- endif %}\n                {% if ent_or_sde['schema'] not in unique_session_identifiers.keys() %} {# Exclude any that we have already made above #}\n                    {{ snowplow_utils.get_sde_or_context(snowplow_events_schema, name, lower_limit, upper_limit, prefix, single_entity, database=snowplow_events_database) }},\n                {% endif %}\n            {% endfor -%}\n        {%- endif %}\n\n        identified_events AS (\n            select\n                {% if session_sql -%}\n                    {{ session_sql }} as session_identifier,\n                {% else -%}\n                    COALESCE(\n                            {% for identifier in session_identifiers %}\n                                {%- if identifier['schema']|lower != 'atomic' %}\n                                    {# Use the parsed version of the context to ensure we have the right alias and prefix #}\n                                    {% set uniq_iden = unique_session_identifiers[identifier['schema']] %}\n                                    {% if uniq_iden['alias'] %}{{uniq_iden['alias']}}{% else %}{{uniq_iden['schema']}}{% endif %}.{% if uniq_iden['prefix'] %}{{ uniq_iden['prefix'] }}{% else %}{{ uniq_iden['schema']}}{% endif %}_{{identifier['field']}}\n                                {%- else %}\n                                    e.{{identifier['field']}}\n                                {%- endif -%}\n                                ,\n                            {%- endfor -%}\n                            NULL\n                        ) as session_identifier,\n                {%- endif %}\n                    e.*\n                    {% if custom_sql %}\n                    , {{ custom_sql }}\n                    {%- endif %}\n\n            from {{ snowplow_events }} e\n            {% if unique_session_identifiers|length > 0 %}\n                {% for identifier in unique_session_identifiers.values() %}\n                    {%- if identifier['schema']|lower != 'atomic' -%}\n                    left join {{ identifier['schema'] }} {% if identifier['alias'] %}as {{ identifier['alias'] }}{% endif %} on e.event_id = {% if identifier['alias'] %}{{ identifier['alias']}}{% else %}{{ identifier['schema'] }}{% endif %}.{{identifier['prefix']}}__id and e.collector_tstamp = {% if identifier['alias'] %}{{ identifier['alias']}}{% else %}{{ identifier['schema'] }}{% endif %}.{{ identifier['prefix'] }}__tstamp\n                    {% endif -%}\n                {% endfor %}\n            {% endif %}\n\n        ), events_this_run as (\n\n            select\n                a.*,\n                b.user_identifier, -- take user_identifier from manifest. This ensures only 1 domain_userid per session.\n                row_number() over (partition by a.event_id order by a.{{ session_timestamp }}, a.dvce_created_tstamp ) as event_id_dedupe_index,\n                count(*) over (partition by a.event_id) as event_id_dedupe_count\n\n            from identified_events as a\n            inner join {{ sessions_this_run }} as b\n            on a.session_identifier = b.session_identifier\n\n            where a.{{ session_timestamp }} <= {{ snowplow_utils.timestamp_add('day', max_session_days, 'b.start_tstamp') }}\n            and a.dvce_sent_tstamp <= {{ snowplow_utils.timestamp_add('day', days_late_allowed, 'a.dvce_created_tstamp') }}\n            and a.{{ session_timestamp }} >= {{ lower_limit }}\n            and a.{{ session_timestamp }} <= {{ upper_limit }}\n            and a.{{ session_timestamp }} >= b.start_tstamp -- deal with late loading events\n            and {{ snowplow_utils.app_id_filter(app_ids) }}\n\n        )\n\n        select *\n\n        from events_this_run as e\n        {%- if entities_or_sdes -%}\n            {% for ent_or_sde in entities_or_sdes -%}\n                {%- set name = none -%}\n                {%- set prefix = none -%}\n                {%- set single_entity = true -%}\n                {%- set alias = none -%}\n                {%- if ent_or_sde['schema'] -%}\n                    {%- set name = ent_or_sde['schema'] -%}\n                {%- else -%}\n                    {%- do exceptions.raise_compiler_error(\"Need to specify the schema name of your Entity or SDE using the {'schema'} attribute in a key-value map.\") -%}\n                {%- endif -%}\n                {%- if ent_or_sde['prefix'] and name not in unique_session_identifiers.keys() -%}\n                    {%- set prefix = ent_or_sde['prefix'] -%}\n                {%- elif name in unique_session_identifiers.keys() and unique_session_identifiers.get(name, {}).get('prefix') -%}\n                    {%- set prefix = unique_session_identifiers[name]['prefix'] -%}\n                {%- else -%}\n                    {%- set prefix = name -%}\n                {%- endif -%}\n                {%- if ent_or_sde['single_entity'] and ent_or_sde['single_entity'] is boolean -%}\n                    {%- set single_entity = ent_or_sde['single_entity'] -%}\n                {%- endif -%}\n                {%- if ent_or_sde['alias'] and name not in unique_session_identifiers.keys() -%}\n                    {%- set alias = ent_or_sde['alias'] -%}\n                {%- elif name in unique_session_identifiers.keys() and unique_session_identifiers.get(name, {}).get('alias') -%}\n                    {%- set alias = unique_session_identifiers[name] -%}\n                {%- endif %}\n                left join {{name}} {% if alias -%} as {{ alias }} {%- endif %} on e.event_id = {% if alias -%} {{ alias }} {%- else -%}{{name}}{%- endif %}.{{prefix}}__id\n                and e.collector_tstamp = {% if alias -%} {{ alias }} {%- else -%}{{name}}{%- endif %}.{{prefix}}__tstamp\n                {% if not single_entity -%} and mod({% if alias -%} {{ alias }} {%- else -%}{{name}}{%- endif %}.{{prefix}}__index, e.event_id_dedupe_count) = 0{%- endif -%}\n            {% endfor %}\n        {% endif %}\n        where event_id_dedupe_index = 1\n\n    {% endset %}\n\n    {{ return(events_this_run_query) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.return_limits_from_model", "macro.snowplow_utils.get_sde_or_context", "macro.snowplow_utils.timestamp_add", "macro.snowplow_utils.app_id_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.399294, "supported_languages": null}, "macro.snowplow_utils.base_quarantine_sessions": {"name": "base_quarantine_sessions", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_quarantine_sessions.sql", "original_file_path": "macros/base/base_quarantine_sessions.sql", "unique_id": "macro.snowplow_utils.base_quarantine_sessions", "macro_sql": "{% macro base_quarantine_sessions(max_session_length, quarantined_sessions='snowplow_base_quarantined_sessions', src_relation=this) %}\n\n  {{ return(adapter.dispatch('base_quarantine_sessions', 'snowplow_utils')(max_session_length, quarantined_sessions, src_relation)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__base_quarantine_sessions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.40023, "supported_languages": null}, "macro.snowplow_utils.default__base_quarantine_sessions": {"name": "default__base_quarantine_sessions", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_quarantine_sessions.sql", "original_file_path": "macros/base/base_quarantine_sessions.sql", "unique_id": "macro.snowplow_utils.default__base_quarantine_sessions", "macro_sql": "{% macro default__base_quarantine_sessions(max_session_length, quarantined_sessions_str, src_relation) %}\n  {% set quarantined_sessions = ref(quarantined_sessions_str) %}\n\n  {% set sessions_to_quarantine_sql = snowplow_utils.base_get_quarantine_sql(src_relation, max_session_length) %}\n\n  {% set quarantine_query %}\n\n  merge into {{ quarantined_sessions }} trg\n  using ({{ sessions_to_quarantine_sql }}) src\n  on trg.session_identifier = src.session_identifier\n  when not matched then insert (session_identifier) values(session_identifier);\n\n  {% endset %}\n\n  {{ return(quarantine_query) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.base_get_quarantine_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.400553, "supported_languages": null}, "macro.snowplow_utils.postgres__base_quarantine_sessions": {"name": "postgres__base_quarantine_sessions", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_quarantine_sessions.sql", "original_file_path": "macros/base/base_quarantine_sessions.sql", "unique_id": "macro.snowplow_utils.postgres__base_quarantine_sessions", "macro_sql": "{% macro postgres__base_quarantine_sessions(max_session_length, quarantined_sessions_str, src_relation) %}\n\n  {% set quarantined_sessions = ref(quarantined_sessions_str) %}\n  {% set sessions_to_quarantine_tmp = 'sessions_to_quarantine_tmp' %}\n\n  begin;\n\n    create temporary table {{ sessions_to_quarantine_tmp }} as (\n      {{ snowplow_utils.base_get_quarantine_sql(src_relation, max_session_length) }}\n    );\n\n    delete from {{ quarantined_sessions }}\n    where session_identifier in (select session_identifier from {{ sessions_to_quarantine_tmp }});\n\n    insert into {{ quarantined_sessions }} (\n      select session_identifier from {{ sessions_to_quarantine_tmp }});\n\n    drop table {{ sessions_to_quarantine_tmp }};\n\n  commit;\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.base_get_quarantine_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.400893, "supported_languages": null}, "macro.snowplow_utils.base_get_quarantine_sql": {"name": "base_get_quarantine_sql", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_quarantine_sessions.sql", "original_file_path": "macros/base/base_quarantine_sessions.sql", "unique_id": "macro.snowplow_utils.base_get_quarantine_sql", "macro_sql": "{% macro base_get_quarantine_sql(relation, max_session_length) %}\n\n  {# Find sessions exceeding max_session_days #}\n  {% set quarantine_sql -%}\n\n    select\n      session_identifier\n\n    from {{ relation }}\n    -- '=' since end_tstamp is restricted to start_tstamp + max_session_days\n    where end_tstamp = {{ snowplow_utils.timestamp_add(\n                              'day',\n                              max_session_length,\n                              'start_tstamp'\n                              ) }}\n\n  {%- endset %}\n\n  {{ return(quarantine_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4011421, "supported_languages": null}, "macro.snowplow_utils.base_create_snowplow_quarantined_sessions": {"name": "base_create_snowplow_quarantined_sessions", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_create_snowplow_quarantined_sessions.sql", "original_file_path": "macros/base/base_create_snowplow_quarantined_sessions.sql", "unique_id": "macro.snowplow_utils.base_create_snowplow_quarantined_sessions", "macro_sql": "{% macro base_create_snowplow_quarantined_sessions() %}\n\n    {% set create_quarantined_query %}\n        with prep as (\n        select\n            {% if target.type == 'redshift' %} {# Done because max causes errors when used in subquery, #}\n                cast(null as varchar(6000)) session_identifier\n            {% else %}\n                cast(null as {{ snowplow_utils.type_max_string() }}) session_identifier\n            {% endif %}\n        )\n\n        select *\n\n        from prep\n        where false\n\n    {% endset %}\n\n    {{ return(create_quarantined_query) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.type_max_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4015439, "supported_languages": null}, "macro.snowplow_utils.base_create_snowplow_sessions_lifecycle_manifest": {"name": "base_create_snowplow_sessions_lifecycle_manifest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_create_snowplow_sessions_lifecycle_manifest.sql", "original_file_path": "macros/base/base_create_snowplow_sessions_lifecycle_manifest.sql", "unique_id": "macro.snowplow_utils.base_create_snowplow_sessions_lifecycle_manifest", "macro_sql": "{% macro base_create_snowplow_sessions_lifecycle_manifest(session_identifiers=[{\"schema\": \"atomic\", \"field\" : \"domain_sessionid\"}], session_sql=none, session_timestamp='load_tstamp', user_identifiers=[{\"schema\": \"atomic\", \"field\" : \"domain_userid\"}], user_sql=none, quarantined_sessions=none, derived_tstamp_partitioned=true, days_late_allowed=3, max_session_days=3, app_ids=[], snowplow_events_database=none, snowplow_events_schema='atomic', snowplow_events_table='events', event_limits_table='snowplow_base_new_event_limits', incremental_manifest_table='snowplow_incremental_manifest', package_name='snowplow') %}\n    {{ return(adapter.dispatch('base_create_snowplow_sessions_lifecycle_manifest', 'snowplow_utils')(session_identifiers, session_sql, session_timestamp, user_identifiers, user_sql, quarantined_sessions, derived_tstamp_partitioned, days_late_allowed, max_session_days, app_ids, snowplow_events_database, snowplow_events_schema, snowplow_events_table, event_limits_table, incremental_manifest_table, package_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.default__base_create_snowplow_sessions_lifecycle_manifest"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.412513, "supported_languages": null}, "macro.snowplow_utils.default__base_create_snowplow_sessions_lifecycle_manifest": {"name": "default__base_create_snowplow_sessions_lifecycle_manifest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_create_snowplow_sessions_lifecycle_manifest.sql", "original_file_path": "macros/base/base_create_snowplow_sessions_lifecycle_manifest.sql", "unique_id": "macro.snowplow_utils.default__base_create_snowplow_sessions_lifecycle_manifest", "macro_sql": "{% macro default__base_create_snowplow_sessions_lifecycle_manifest(session_identifiers, session_sql, session_timestamp, user_identifiers, user_sql, quarantined_sessions, derived_tstamp_partitioned, days_late_allowed, max_session_days, app_ids, snowplow_events_database, snowplow_events_schema, snowplow_events_table, event_limits_table, incremental_manifest_table, package_name) %}\n    {% set base_event_limits = ref(event_limits_table) %}\n    {% set lower_limit, upper_limit, _ = snowplow_utils.return_base_new_event_limits(base_event_limits) %}\n    {% set session_lookback_limit = snowplow_utils.get_session_lookback_limit(lower_limit) %}\n    {% set is_run_with_new_events = snowplow_utils.is_run_with_new_events(package_name, event_limits_table, incremental_manifest_table) %}\n    {% set snowplow_events = api.Relation.create(database=snowplow_events_database, schema=snowplow_events_schema, identifier=snowplow_events_table) %}\n\n    {% set sessions_lifecycle_manifest_query %}\n\n        with new_events_session_ids_init as (\n            select\n            {% if session_sql %}\n                {{ session_sql }} as session_identifier,\n            {% elif session_identifiers|length > 0 %}\n                COALESCE(\n                    {% for identifier in session_identifiers %}\n                        {%- if identifier['schema']|lower != 'atomic' -%}\n                            {{ snowplow_utils.get_field(identifier['schema'], identifier['field'], 'e', dbt.type_string(), 0, snowplow_events) }}\n                        {%- else -%}\n                            e.{{identifier['field']}}\n                        {%- endif -%}\n                        ,\n                    {%- endfor -%}\n                    NULL\n                ) as session_identifier,\n            {%- else -%}\n                {% do exceptions.raise_compiler_error(\"Need to specify either session identifiers or custom session SQL\") %}\n            {%- endif %}\n            {%- if user_sql -%}\n                max({{ user_sql }}) as user_identifier,\n            {%- elif user_identifiers|length > 0 %}\n                max(\n                    COALESCE(\n                        {% for identifier in user_identifiers %}\n                            {%- if identifier['schema']|lower != 'atomic' -%}\n                                {{ snowplow_utils.get_field(identifier['schema'], identifier['field'], 'e', dbt.type_string(), 0, snowplow_events) }}\n                            {%- else -%}\n                                e.{{identifier['field']}}\n                            {%- endif -%}\n                            ,\n                        {%- endfor -%}\n                        NULL\n                    )\n                ) as user_identifier, -- Edge case 1: Arbitary selection to avoid window function like first_value.\n            {% else %}\n                {% do exceptions.raise_compiler_error(\"Need to specify either user identifiers or custom user SQL\") %}\n            {%- endif %}\n                min({{ session_timestamp }}) as start_tstamp,\n                max({{ session_timestamp }}) as end_tstamp\n\n            from {{ snowplow_events }} e\n\n            where\n                dvce_sent_tstamp <= {{ snowplow_utils.timestamp_add('day', days_late_allowed, 'dvce_created_tstamp') }} -- don't process data that's too late\n                and {{ session_timestamp }} >= {{ lower_limit }}\n                and {{ session_timestamp }} <= {{ upper_limit }}\n                and {{ snowplow_utils.app_id_filter(app_ids) }}\n                and {{ is_run_with_new_events }} --don't reprocess sessions that have already been processed.\n                {% if derived_tstamp_partitioned and target.type == 'bigquery' | as_bool() %} -- BQ only\n                and derived_tstamp >= {{ lower_limit }}\n                and derived_tstamp <= {{ upper_limit }}\n                {% endif %}\n\n            group by 1\n        ), new_events_session_ids as (\n            select *\n            from new_events_session_ids_init e\n            {% if quarantined_sessions %}\n                where session_identifier is not null\n                and not exists (select 1 from {{ ref(quarantined_sessions) }} as a where a.session_identifier = e.session_identifier) -- don't continue processing v.long sessions\n            {%- endif %}\n\n        )\n        {% if is_incremental() %}\n\n        , previous_sessions as (\n        select *\n\n        from {{ this }}\n\n        where start_tstamp >= {{ session_lookback_limit }}\n        and {{ is_run_with_new_events }} --don't reprocess sessions that have already been processed.\n        )\n\n        , session_lifecycle as (\n        select\n            ns.session_identifier,\n            coalesce(self.user_identifier, ns.user_identifier) as user_identifier, -- Edge case 1: Take previous value to keep domain_userid consistent. Not deterministic but performant\n            least(ns.start_tstamp, coalesce(self.start_tstamp, ns.start_tstamp)) as start_tstamp,\n            greatest(ns.end_tstamp, coalesce(self.end_tstamp, ns.end_tstamp)) as end_tstamp -- BQ 1 NULL will return null hence coalesce\n\n        from new_events_session_ids ns\n        left join previous_sessions as self\n            on ns.session_identifier = self.session_identifier\n\n        where\n            self.session_identifier is null -- process all new sessions\n            or self.end_tstamp < {{ snowplow_utils.timestamp_add('day', max_session_days, 'self.start_tstamp') }} --stop updating sessions exceeding 3 days\n        )\n\n        {% else %}\n\n        , session_lifecycle as (\n\n        select * from new_events_session_ids\n\n        )\n\n        {% endif %}\n\n        select\n        sl.session_identifier,\n        sl.user_identifier,\n        sl.start_tstamp,\n        least({{ snowplow_utils.timestamp_add('day', max_session_days, 'sl.start_tstamp') }}, sl.end_tstamp) as end_tstamp -- limit session length to max_session_days\n        {% if target.type in ['databricks', 'spark'] -%}\n        , DATE(start_tstamp) as start_tstamp_date\n        {%- endif %}\n\n        from session_lifecycle sl\n    {% endset %}\n\n    {{ return(sessions_lifecycle_manifest_query) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.return_base_new_event_limits", "macro.snowplow_utils.get_session_lookback_limit", "macro.snowplow_utils.is_run_with_new_events", "macro.snowplow_utils.get_field", "macro.dbt.type_string", "macro.snowplow_utils.timestamp_add", "macro.snowplow_utils.app_id_filter", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.415296, "supported_languages": null}, "macro.snowplow_utils.postgres__base_create_snowplow_sessions_lifecycle_manifest": {"name": "postgres__base_create_snowplow_sessions_lifecycle_manifest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_create_snowplow_sessions_lifecycle_manifest.sql", "original_file_path": "macros/base/base_create_snowplow_sessions_lifecycle_manifest.sql", "unique_id": "macro.snowplow_utils.postgres__base_create_snowplow_sessions_lifecycle_manifest", "macro_sql": "{% macro postgres__base_create_snowplow_sessions_lifecycle_manifest(session_identifiers, session_sql, session_timestamp, user_identifiers, user_sql, quarantined_sessions, derived_tstamp_partitioned, days_late_allowed, max_session_days, app_ids, snowplow_events_database, snowplow_events_schema, snowplow_events_table, event_limits_table, incremental_manifest_table, package_name) %}\n    {% set base_event_limits = ref(event_limits_table) %}\n    {% set lower_limit, upper_limit, _ = snowplow_utils.return_base_new_event_limits(base_event_limits) %}\n    {% set session_lookback_limit = snowplow_utils.get_session_lookback_limit(lower_limit) %}\n    {% set is_run_with_new_events = snowplow_utils.is_run_with_new_events(package_name, event_limits_table, incremental_manifest_table) %}\n    {% set snowplow_events = api.Relation.create(database=snowplow_events_database, schema=snowplow_events_schema, identifier=snowplow_events_table) %}\n\n    {% set sessions_lifecycle_manifest_query %}\n\n        with\n        {# Get all the session and user contexts extracted and ready to join later #}\n        {% set unique_identifiers = dict() %} {# need to avoid duplicate contexts when values come from the same one, so just use the first of that context #}\n\n        {% if session_identifiers %}\n            {% for identifier in session_identifiers %}\n                {% if identifier['schema']|lower != 'atomic' and identifier['schema'] not in unique_identifiers %}\n                    {{ snowplow_utils.get_sde_or_context(snowplow_events_schema, identifier['schema'], lower_limit, upper_limit, identifier['prefix'], database=snowplow_events_database) }},\n                    {% do unique_identifiers.update({identifier['schema']: identifier}) %}\n                {%- endif -%}\n            {% endfor %}\n        {% endif %}\n\n        {% if user_identifiers%}\n            {% for identifier in user_identifiers %}\n                {% if identifier['schema']|lower != 'atomic' and identifier['schema'] not in unique_identifiers %}\n                    {{ snowplow_utils.get_sde_or_context(snowplow_events_schema, identifier['schema'], lower_limit, upper_limit, identifier['prefix'], database=snowplow_events_database) }},\n                    {% do unique_identifiers.update({identifier['schema']: identifier}) %}\n                {%- endif -%}\n            {% endfor %}\n        {% endif %}\n\n        {# Produce the core session and single user identifier for sessions with new events #}\n        new_events_session_ids_init as (\n            select\n            {% if session_sql %}\n                {{ session_sql }} as session_identifier,\n            {% elif session_identifiers|length > 0 %}\n                COALESCE(\n                    {% for identifier in session_identifiers %}\n                        {%- if identifier['schema']|lower != 'atomic' -%}\n                            {# Use the parsed version of the context to ensure we have the right alias and prefix #}\n                            {% set uniq_iden = unique_identifiers[identifier['schema']] %}\n                            {% if uniq_iden['alias'] %}{{uniq_iden['alias']}}{% else %}{{uniq_iden['schema']}}{% endif %}.{% if uniq_iden['prefix'] %}{{ uniq_iden['prefix']  ~ '_' }}{% endif %}{{identifier['field']}}\n                        {%- else -%}\n                            e.{{identifier['field']}}\n                        {%- endif -%}\n                        ,\n                    {%- endfor -%}\n                    NULL\n                ) as session_identifier,\n            {% else %}\n                {% do exceptions.raise_compiler_error(\"Need to specify either session identifiers or custom session SQL\") %}\n            {% endif %}\n            {% if user_sql %}\n                max({{ user_sql }}) as user_identifier,\n            {% elif user_identifiers|length > 0 %}\n                max(\n                    COALESCE(\n                        {% for identifier in user_identifiers %}\n                            {%- if identifier['schema']|lower != 'atomic' %}\n                            {# Use the parsed version of the context to ensure we have the right alias and prefix #}\n                                {% set uniq_iden = unique_identifiers[identifier['schema']] %}\n                                {% if uniq_iden['alias'] %}{{uniq_iden['alias']}}{% else %}{{uniq_iden['schema']}}{% endif %}.{% if uniq_iden['prefix'] %}{{ uniq_iden['prefix'] ~ '_' }}{% endif %}{{identifier['field']}}\n                            {%- else %}\n                                e.{{identifier['field']}}\n                            {%- endif -%}\n                            ,\n                        {%- endfor -%}\n                        NULL\n                    )\n                ) as user_identifier, -- Edge case 1: Arbitary selection to avoid window function like first_value.\n            {% else %}\n                {% do exceptions.raise_compiler_error(\"Need to specify either user identifiers or custom user SQL\") %}\n            {% endif %}\n                min({{ session_timestamp }}) as start_tstamp,\n                max({{ session_timestamp }}) as end_tstamp\n\n            from {{ snowplow_events }} e\n            {% if unique_identifiers|length > 0 %}\n                {% for identifier in unique_identifiers.values() %}\n                    {%- if identifier['schema']|lower != 'atomic' -%}\n                    left join {{ identifier['schema'] }} {% if identifier['alias'] %}as {{ identifier['alias'] }}{% endif %} on e.event_id = {% if identifier['alias'] %}{{ identifier['alias']}}{% else %}{{ identifier['schema'] }}{% endif %}.{% if identifier['prefix'] %}{{ identifier['prefix'] }}{% else %}{{ identifier['schema']}}{% endif %}__id and e.collector_tstamp = {% if identifier['alias'] %}{{ identifier['alias']}}{% else %}{{ identifier['schema'] }}{% endif %}.{% if identifier['prefix'] %}{{ identifier['prefix'] }}{% else %}{{ identifier['schema']}}{% endif %}__tstamp\n                    {% endif -%}\n                {% endfor %}\n            {% endif %}\n            where\n                dvce_sent_tstamp <= {{ snowplow_utils.timestamp_add('day', days_late_allowed, 'dvce_created_tstamp') }} -- don't process data that's too late\n                and {{ session_timestamp }} >= {{ lower_limit }}\n                and {{ session_timestamp }} <= {{ upper_limit }}\n                and {{ snowplow_utils.app_id_filter(app_ids) }}\n                and {{ is_run_with_new_events }} --don't reprocess sessions that have already been processed.\n                {% if derived_tstamp_partitioned and target.type == 'bigquery' | as_bool() %} -- BQ only\n                and derived_tstamp >= {{ lower_limit }}\n                and derived_tstamp <= {{ upper_limit }}\n                {% endif %}\n\n            group by 1\n\n        {# Exclude quarantined sessions #}\n        ), new_events_session_ids as (\n            select *\n            from new_events_session_ids_init e\n            {% if quarantined_sessions %}\n                where session_identifier is not null\n                and not exists (select 1 from {{ ref(quarantined_sessions) }} as a where a.session_identifier = e.session_identifier) -- don't continue processing v.long sessions\n            {%- endif %}\n        )\n\n        {% if is_incremental() %}\n\n        , previous_sessions as (\n        select *\n\n        from {{ this }}\n\n        where start_tstamp >= {{ session_lookback_limit }}\n        and {{ is_run_with_new_events }} --don't reprocess sessions that have already been processed.\n        )\n\n        , session_lifecycle as (\n        select\n            ns.session_identifier,\n            coalesce(self.user_identifier, ns.user_identifier) as user_identifier, -- Edge case 1: Take previous value to keep domain_userid consistent. Not deterministic but performant\n            least(ns.start_tstamp, coalesce(self.start_tstamp, ns.start_tstamp)) as start_tstamp,\n            greatest(ns.end_tstamp, coalesce(self.end_tstamp, ns.end_tstamp)) as end_tstamp -- BQ 1 NULL will return null hence coalesce\n\n        from new_events_session_ids ns\n        left join previous_sessions as self\n            on ns.session_identifier = self.session_identifier\n\n        where\n            self.session_identifier is null -- process all new sessions\n            or self.end_tstamp < {{ snowplow_utils.timestamp_add('day', max_session_days, 'self.start_tstamp') }} --stop updating sessions exceeding 3 days\n        )\n\n        {% else %}\n\n        , session_lifecycle as (\n\n        select * from new_events_session_ids\n\n        )\n\n        {% endif %}\n\n        select\n        sl.session_identifier,\n        sl.user_identifier,\n        sl.start_tstamp,\n        least({{ snowplow_utils.timestamp_add('day', max_session_days, 'sl.start_tstamp') }}, sl.end_tstamp) as end_tstamp -- limit session length to max_session_days\n\n        from session_lifecycle sl\n    {% endset %}\n\n    {{ return(sessions_lifecycle_manifest_query) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.return_base_new_event_limits", "macro.snowplow_utils.get_session_lookback_limit", "macro.snowplow_utils.is_run_with_new_events", "macro.snowplow_utils.get_sde_or_context", "macro.snowplow_utils.timestamp_add", "macro.snowplow_utils.app_id_filter", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.420415, "supported_languages": null}, "macro.snowplow_utils.base_create_snowplow_sessions_this_run": {"name": "base_create_snowplow_sessions_this_run", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_create_snowplow_sessions_this_run.sql", "original_file_path": "macros/base/base_create_snowplow_sessions_this_run.sql", "unique_id": "macro.snowplow_utils.base_create_snowplow_sessions_this_run", "macro_sql": "{% macro base_create_snowplow_sessions_this_run(lifecycle_manifest_table='snowplow_base_sessions_lifecycle_manifest', new_event_limits_table='snowplow_base_new_event_limits') %}\n    {% set lifecycle_manifest = ref(lifecycle_manifest_table) %}\n    {% set new_event_limits = ref(new_event_limits_table) %}\n    {%- set lower_limit,\n        upper_limit,\n        session_start_limit = snowplow_utils.return_base_new_event_limits(new_event_limits) %}\n\n    {% set sessions_sql %}\n\n\n        select\n        s.session_identifier,\n        s.user_identifier,\n        s.start_tstamp,\n        -- end_tstamp used in next step to limit events. When backfilling, set end_tstamp to upper_limit if end_tstamp > upper_limit.\n        -- This ensures we don't accidentally process events after upper_limit\n        case when s.end_tstamp > {{ upper_limit }} then {{ upper_limit }} else s.end_tstamp end as end_tstamp\n\n        from {{ lifecycle_manifest }} s\n\n        where\n        -- General window of start_tstamps to limit table scans. Logic complicated by backfills.\n        -- To be within the run, session start_tstamp must be >= lower_limit - max_session_days as we limit end_tstamp in manifest to start_tstamp + max_session_days\n        s.start_tstamp >= {{ session_start_limit }}\n        and s.start_tstamp <= {{ upper_limit }}\n        -- Select sessions within window that either; start or finish between lower & upper limit, start and finish outside of lower and upper limits\n        and not (s.start_tstamp > {{ upper_limit }} or s.end_tstamp < {{ lower_limit }})\n    {% endset %}\n\n    {{ return(sessions_sql) }}\n{% endmacro%}", "depends_on": {"macros": ["macro.snowplow_utils.return_base_new_event_limits"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.42144, "supported_languages": null}, "macro.snowplow_utils.base_create_snowplow_incremental_manifest": {"name": "base_create_snowplow_incremental_manifest", "resource_type": "macro", "package_name": "snowplow_utils", "path": "macros/base/base_create_snowplow_incremental_manifest.sql", "original_file_path": "macros/base/base_create_snowplow_incremental_manifest.sql", "unique_id": "macro.snowplow_utils.base_create_snowplow_incremental_manifest", "macro_sql": "{% macro base_create_snowplow_incremental_manifest() %}\n\n    {% set create_manifest_query %}\n        with prep as (\n        select\n            cast(null as {{ snowplow_utils.type_max_string() }}) model,\n            cast('1970-01-01' as {{ type_timestamp() }}) as last_success\n        )\n\n        select *\n\n        from prep\n        where false\n    {% endset %}\n\n    {{ return(create_manifest_query) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.snowplow_utils.type_max_string", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4217741, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4221299, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4229372, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.42309, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4232361, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.423383, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.423511, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.423656, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.424344, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.424902, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4259992, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.426222, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4264388, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.426666, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.426879, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.427109, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.427407, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.427613, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.427895, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.427986, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.428073, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.428163, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.428482, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.429049, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4302561, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.430793, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.431469, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4318771, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4319959, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.432114, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.432226, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.432344, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.43462, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.434765, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4348989, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.435035, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4365351, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.437293, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4374158, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.43765, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4379048, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.438018, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.438126, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4382331, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.438339, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.438805, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4393, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.439934, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4401448, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4403598, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.440682, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.441816, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4451299, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.44544, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.445763, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.447019, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4475, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4479628, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4481, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.448235, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.448381, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4485152, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.448643, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.449315, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dq_tools.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.450643, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.451218, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.451361, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.451494, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.451634, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.451766, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.451915, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.452126, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.452214, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.452297, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.452828, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.453866, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.454016, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4548259, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.457681, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.462126, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4635892, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.464, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.464132, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.464305, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.464593, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.464691, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.464789, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4648771, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4649642, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.465183, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.465272, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.465357, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.465694, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.466041, "supported_languages": null}, "macro.dbt_project_evaluator.check_model_is_table": {"name": "check_model_is_table", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/check_model_is_table.sql", "original_file_path": "macros/check_model_is_table.sql", "unique_id": "macro.dbt_project_evaluator.check_model_is_table", "macro_sql": "{%- macro check_model_is_table(model) -%}\n    {%- if model.config.materialized != 'table' -%}\n        {%- do exceptions.raise_compiler_error(\n            \"Model must use the table materialization. Please check any model overrides.\"\n        ) -%}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.466279, "supported_languages": null}, "macro.dbt_project_evaluator.recursive_dag": {"name": "recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.recursive_dag", "macro_sql": "{% macro recursive_dag() %}\n    {{ return(adapter.dispatch('recursive_dag', 'dbt_project_evaluator')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.469474, "supported_languages": null}, "macro.dbt_project_evaluator.default__recursive_dag": {"name": "default__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.default__recursive_dag", "macro_sql": "{% macro default__recursive_dag() %}\n\nwith recursive direct_relationships as (\n    select\n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n),\n\n-- should this be a fct_ model?\n\n-- recursive CTE\n-- one record for every resource and each of its downstream children (including itself)\nall_relationships (\n    parent_id,\n    parent,\n    parent_resource_type,\n    parent_model_type,\n    parent_materialized,\n    parent_access,\n    parent_is_public,\n    parent_source_name,\n    parent_file_path,\n    parent_directory_path,\n    parent_file_name,\n    parent_is_excluded,\n    child_id,\n    child,\n    child_resource_type,\n    child_model_type,\n    child_materialized,\n    child_access,\n    child_is_public,\n    child_source_name,\n    child_file_path,\n    child_directory_path,\n    child_file_name,\n    child_is_excluded,\n    distance,\n    path,\n    is_dependent_on_chain_of_views\n) as (\n    -- anchor\n    select distinct\n        resource_id as parent_id,\n        resource_name as parent,\n        resource_type as parent_resource_type,\n        model_type as parent_model_type,\n        materialized as parent_materialized,\n        access as parent_access,\n        is_public as parent_is_public,\n        source_name as parent_source_name,\n        file_path as parent_file_path,\n        directory_path as parent_directory_path,\n        file_name as parent_file_name,\n        is_excluded as parent_is_excluded,\n        resource_id as child_id,\n        resource_name as child,\n        resource_type as child_resource_type,\n        model_type as child_model_type,\n        materialized as child_materialized,\n        access as child_access,\n        is_public as child_is_public,\n        source_name as child_source_name,\n        file_path as child_file_path,\n        directory_path as child_directory_path,\n        file_name as child_file_name,\n        is_excluded as child_is_excluded,\n        0 as distance,\n        {{ dbt.array_construct(['resource_name']) }} as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    -- where direct_parent_id is null {# optional lever to change filtering of anchor clause to only include root resources #}\n\n    union all\n\n    -- recursive clause\n    select\n        all_relationships.parent_id as parent_id,\n        all_relationships.parent as parent,\n        all_relationships.parent_resource_type as parent_resource_type,\n        all_relationships.parent_model_type as parent_model_type,\n        all_relationships.parent_materialized as parent_materialized,\n        all_relationships.parent_access as parent_access,\n        all_relationships.parent_is_public as parent_is_public,\n        all_relationships.parent_source_name as parent_source_name,\n        all_relationships.parent_file_path as parent_file_path,\n        all_relationships.parent_directory_path as parent_directory_path,\n        all_relationships.parent_file_name as parent_file_name,\n        all_relationships.parent_is_excluded as parent_is_excluded,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.resource_name as child,\n        direct_relationships.resource_type as child_resource_type,\n        direct_relationships.model_type as child_model_type,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.access as child_access,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.source_name as child_source_name,\n        direct_relationships.file_path as child_file_path,\n        direct_relationships.directory_path as child_directory_path,\n        direct_relationships.file_name as child_file_name,\n        direct_relationships.is_excluded as child_is_excluded,\n        all_relationships.distance+1 as distance,\n        {{ dbt.array_append('all_relationships.path', 'direct_relationships.resource_name') }} as path,\n        case\n            when\n                all_relationships.child_materialized in ('view', 'ephemeral')\n                and coalesce(all_relationships.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n    from direct_relationships\n    inner join all_relationships\n        on all_relationships.child_id = direct_relationships.direct_parent_id\n\n    {% if var('max_depth_dag') | int > 0 %}\n        {% if var('max_depth_dag') | int < 2 or var('max_depth_dag') | int < var('chained_views_threshold') | int %}\n            {% do exceptions.raise_compiler_error(\n                'Variable max_depth_dag must be at least 2 and must be greater or equal to than chained_views_threshold.'\n                ) %}\n        {% else %}\n        where distance <= {{ var('max_depth_dag')}}\n        {% endif %}\n    {% endif %}\n\n)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.array_construct", "macro.dbt.array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.470593, "supported_languages": null}, "macro.dbt_project_evaluator.bigquery__recursive_dag": {"name": "bigquery__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.bigquery__recursive_dag", "macro_sql": "{% macro bigquery__recursive_dag() %}\n\n-- as of Feb 2022 BigQuery doesn't support with recursive in the same way as other DWs\n{% set max_depth = var('max_depth_dag') | int %}\n{% if max_depth < 2 or max_depth < var('chained_views_threshold') | int %}\n    {% do exceptions.raise_compiler_error(\n        'Variable max_depth_dag must be at least 2 and must be greater or equal to than chained_views_threshold.'\n        ) %}\n{% endif %}\n\nwith direct_relationships as (\n    select\n        *\n    from {{ ref('int_direct_relationships') }}\n    where resource_type <> 'test'\n)\n\n-- must do distinct prior to creating array because BigQuery doesn't support distinct on array type\n, get_distinct as (\n    select distinct\n        resource_id as parent_id,\n        resource_id as child_id,\n        resource_name,\n        materialized as child_materialized,\n        is_public as child_is_public,\n        access as child_access,\n        is_excluded as child_is_excluded\n\n    from direct_relationships\n)\n\n, cte_0 as (\n    select\n        parent_id,\n        child_id,\n        child_materialized,\n        child_is_public,\n        child_access,\n        child_is_excluded,\n        0 as distance,\n        {{ dbt.array_construct(['resource_name']) }} as path,\n        cast(null as boolean) as is_dependent_on_chain_of_views\n    from get_distinct\n)\n\n{% for i in range(1,max_depth) %}\n{% set prev_cte_path %}cte_{{ i - 1 }}.path{% endset %}\n, cte_{{i}} as (\n    select\n        cte_{{i - 1}}.parent_id as parent_id,\n        direct_relationships.resource_id as child_id,\n        direct_relationships.materialized as child_materialized,\n        direct_relationships.is_public as child_is_public,\n        direct_relationships.access as child_access,\n        direct_relationships.is_excluded as child_is_excluded,\n        cte_{{i - 1}}.distance+1 as distance,\n        {{ dbt.array_append(prev_cte_path, 'direct_relationships.resource_name') }} as path,\n        case\n            when\n                cte_{{i - 1}}.child_materialized in ('view', 'ephemeral')\n                and coalesce(cte_{{i - 1}}.is_dependent_on_chain_of_views, true)\n                then true\n            else false\n        end as is_dependent_on_chain_of_views\n\n        from direct_relationships\n            inner join cte_{{i - 1}}\n            on cte_{{i - 1}}.child_id = direct_relationships.direct_parent_id\n)\n{% endfor %}\n\n, all_relationships_unioned as (\n    {% for i in range(max_depth) %}\n    select * from cte_{{i}}\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n)\n\n, resource_info as (\n    select * from {{ ref('int_all_graph_resources') }}\n)\n\n\n, all_relationships as (\n    select\n        parent.resource_id as parent_id,\n        parent.resource_name as parent,\n        parent.resource_type as parent_resource_type,\n        parent.model_type as parent_model_type,\n        parent.materialized as parent_materialized,\n        parent.is_public as parent_is_public,\n        parent.access as parent_access,\n        parent.source_name as parent_source_name,\n        parent.file_path as parent_file_path,\n        parent.directory_path as parent_directory_path,\n        parent.file_name as parent_file_name,\n        parent.is_excluded as parent_is_excluded,\n        child.resource_id as child_id,\n        child.resource_name as child,\n        child.resource_type as child_resource_type,\n        child.model_type as child_model_type,\n        child.materialized as child_materialized,\n        child.is_public as child_is_public,\n        child.access as child_access,\n        child.source_name as child_source_name,\n        child.file_path as child_file_path,\n        child.directory_path as child_directory_path,\n        child.file_name as child_file_name,\n        child.is_excluded as child_is_excluded,\n        all_relationships_unioned.distance,\n        all_relationships_unioned.path,\n        all_relationships_unioned.is_dependent_on_chain_of_views\n\n    from all_relationships_unioned\n    left join resource_info as parent\n        on all_relationships_unioned.parent_id = parent.resource_id\n    left join resource_info as child\n        on all_relationships_unioned.child_id = child.resource_id\n)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.array_construct", "macro.dbt.array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4719832, "supported_languages": null}, "macro.dbt_project_evaluator.spark__recursive_dag": {"name": "spark__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.spark__recursive_dag", "macro_sql": "{% macro spark__recursive_dag() %}\n-- as of June 2022 databricks SQL doesn't support \"with recursive\" in the same way as other DWs\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.472213, "supported_languages": null}, "macro.dbt_project_evaluator.trino__recursive_dag": {"name": "trino__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.trino__recursive_dag", "macro_sql": "{% macro trino__recursive_dag() %}\n{#-- Although Trino supports a recursive WITH-queries,\n-- it is less performant than creating CTEs with loops and union them --#}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4723551, "supported_languages": null}, "macro.dbt_project_evaluator.athena__recursive_dag": {"name": "athena__recursive_dag", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/recursive_dag.sql", "original_file_path": "macros/recursive_dag.sql", "unique_id": "macro.dbt_project_evaluator.athena__recursive_dag", "macro_sql": "{% macro athena__recursive_dag() %}\n    {{ return(bigquery__recursive_dag()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.bigquery__recursive_dag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4724731, "supported_languages": null}, "macro.dbt_project_evaluator.wrap_string_with_quotes": {"name": "wrap_string_with_quotes", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/wrap_string_with_quotes.sql", "original_file_path": "macros/wrap_string_with_quotes.sql", "unique_id": "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro_sql": "{% macro wrap_string_with_quotes(str) %}\n  {% if not str %}\n    {{ return('cast(NULL as ' ~ dbt.type_string() ~ ')') }}\n  {% else %}\n    {{ return(\"'\" ~ str ~ \"'\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4729059, "supported_languages": null}, "macro.dbt_project_evaluator.loop_vars": {"name": "loop_vars", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/loop_vars.sql", "original_file_path": "macros/loop_vars.sql", "unique_id": "macro.dbt_project_evaluator.loop_vars", "macro_sql": "{% macro loop_vars(vars) %}\n    {{ return(adapter.dispatch('loop_vars', 'dbt_project_evaluator')(vars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__loop_vars"]}, "description": "A macro that loops through variables and returns them as a SQL query to be used in a model", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbt_project_evaluator://models/staging/variables/variables.yml", "arguments": [{"name": "vars", "type": "list|string", "description": "A list of variables from dbt_project.yml"}], "created_at": 1714072384.404206, "supported_languages": null}, "macro.dbt_project_evaluator.default__loop_vars": {"name": "default__loop_vars", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/loop_vars.sql", "original_file_path": "macros/loop_vars.sql", "unique_id": "macro.dbt_project_evaluator.default__loop_vars", "macro_sql": "{% macro default__loop_vars(vars) %}\n{%- set sql_query = [] -%}\n{%- for var_name in vars -%}\n    {%- if var(var_name,[]) is not string -%}\n        {%- for var_value in var(var_name,[]) -%}\n            {% set sql_command %}\n            select '{{ var_name }}' as var_name, '{{ var_value }}' as var_value\n            {% endset %}\n            {%- do sql_query.append(sql_command) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {% set sql_command %}\n        select '{{ var_name }}' as var_name, '{{ var(var_name,[]) }}' as var_value\n        {% endset %}\n        {%- do sql_query.append(sql_command) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- if sql_query -%}\n{{ sql_query | join('union all') }}\n{%- else -%}\nselect '' as var_name, '' as var_value\nlimit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4741309, "supported_languages": null}, "macro.dbt_project_evaluator.set_is_excluded": {"name": "set_is_excluded", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/set_is_excluded.sql", "original_file_path": "macros/set_is_excluded.sql", "unique_id": "macro.dbt_project_evaluator.set_is_excluded", "macro_sql": "{% macro set_is_excluded(resource, resource_type) %}\n    {{ return(adapter.dispatch('set_is_excluded', 'dbt_project_evaluator')(resource, resource_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__set_is_excluded"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4746199, "supported_languages": null}, "macro.dbt_project_evaluator.default__set_is_excluded": {"name": "default__set_is_excluded", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/set_is_excluded.sql", "original_file_path": "macros/set_is_excluded.sql", "unique_id": "macro.dbt_project_evaluator.default__set_is_excluded", "macro_sql": "{% macro default__set_is_excluded(resource, resource_type) %}\n\n    {% set re = modules.re %}\n    {%- set ns = namespace(exclude=false) -%}\n\n    {% if resource_type == 'node' %}\n        {%- set resource_path = resource.original_file_path | replace(\"\\\\\",\"\\\\\\\\\") -%}\n    {% elif resource_type == 'source' %}\n        {%- set resource_path = resource.original_file_path | replace(\"\\\\\",\"\\\\\\\\\") ~ \":\" ~ resource.fqn[-2] ~ \".\" ~ resource.fqn[-1] -%}\n    {% else %}\n        {{ exceptions.raise_compiler_error(\n            \"`set_is_excluded()` macro does not support resource type: \" ~ resource_type\n        ) }}\n    {% endif %}\n    \n\n    {#- we exclude the resource if it is from the current project and matches the pattern -#}\n    {%- for exclude_paths_pattern in var('exclude_paths_from_project',[]) -%}\n        {%- set matched_path = re.search(exclude_paths_pattern, resource_path, re.IGNORECASE) -%}\n        {%- if matched_path and resource.package_name == project_name %}\n            {% set ns.exclude = true %}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {#- we exclude the resource if the package if it is listed in `exclude_packages` or if it is \"all\" -#}\n    {%- if (\n        resource.package_name != project_name) \n        and (resource.package_name in  var('exclude_packages',[]) or 'all' in var('exclude_packages',[])) \n    -%}\n        {% set ns.exclude = true %}\n    {%- endif -%}\n\n    {{ return(ns.exclude) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4757051, "supported_languages": null}, "macro.dbt_project_evaluator.find_all_hard_coded_references": {"name": "find_all_hard_coded_references", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/find_all_hard_coded_references.sql", "original_file_path": "macros/find_all_hard_coded_references.sql", "unique_id": "macro.dbt_project_evaluator.find_all_hard_coded_references", "macro_sql": "{% macro find_all_hard_coded_references(node) %}\n    {{ return(adapter.dispatch('find_all_hard_coded_references', 'dbt_project_evaluator')(node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__find_all_hard_coded_references"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.476825, "supported_languages": null}, "macro.dbt_project_evaluator.default__find_all_hard_coded_references": {"name": "default__find_all_hard_coded_references", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/find_all_hard_coded_references.sql", "original_file_path": "macros/find_all_hard_coded_references.sql", "unique_id": "macro.dbt_project_evaluator.default__find_all_hard_coded_references", "macro_sql": "{% macro default__find_all_hard_coded_references(node) %}\n\n    {%- set all_hard_coded_references_list = [] -%}\n\n    {% if node.resource_type == 'model' and node.language == \"sql\" %}\n\n        {% if execute %}\n        {%- set model_raw_sql = node.raw_sql or node.raw_code -%}\n        {%- else -%}\n        {%- set model_raw_sql = '' -%}\n        {%- endif -%}\n\n        {# we remove the comments that start with -- , or other characters configured #}\n        {%- set re = modules.re -%}\n        {%- set comment_chars_match = \"(\" ~ var('comment_chars') | join(\"|\") ~ \").*\" -%}\n        {%- set model_raw_sql_no_comments = re.sub(comment_chars_match, '', model_raw_sql) -%}\n\n        {#-\n            REGEX Explanations\n            \n            # from_var_1\n            - matches (from or join) followed by some spaces and then {{var(<something>)}}\n            \n            # from_var_2\n            - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n            \n            # from_table_1\n            - matches (from or join) followed by some spaces and then <something>.<something_else>\n              where each <something> is enclosed by (` or [ or \" or ' or nothing)\n            \n            # from_table_2\n            - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n              where each <something> is enclosed by (` or [ or \" or ' or nothing)\n            \n            # from_table_3\n            - matches (from or join) followed by some spaces and then <something>\n              where <something> is enclosed by (` or [ or \" or ')\n\n            # notes\n            - all regex matches exclude text that immediately follows \"distinct \"\n\n        -#}\n\n        {%- set re = modules.re -%}\n\n        {%- set from_hard_coded_references = {\n            'from_var_1':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n                ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n                # third matching group\n                # at least 1 of anything except a parenthesis or quotation mark\n                ([^)\\'\\\"]+)\n\n                # fourth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)\n                ([\\'\\\"]?\\s*)\n\n                # fifth matching group\n                # a closing parenthesis, 0 or more whitespace character(s), closing }}\n                (\\)\\s*}})\n\n                ',\n            'from_var_2':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character\n                (from|join)\\s+\n\n                # second matching group\n                # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n                ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n                # third matching group\n                # at least 1 of anything except a parenthesis or quotation mark            \n                ([^)\\'\\\"]+)\n\n                # fourth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)\n                ([\\'\\\"]?\\s*)\n\n                # fifth matching group\n                # a comma\n                (,)\n\n                # sixth matching group\n                # 0 or more whitespace character(s), 1 or 0 quotation mark            \n                (\\s*[\\'\\\"]?)\n\n                # seventh matching group\n                # at least 1 of anything except a parenthesis or quotation mark            \n                ([^)\\'\\\"]+)\n\n                # eighth matching group\n                # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n                ([\\'\\\"]?\\s*)\n\n                # ninth matching group\n                # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n                (\\)\\s*}})\n\n                ',\n            'from_table_1':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character            \n                (from|join)\\s+\n\n                # second matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # third matching group\n                # at least 1 word character\n                (\\w+)\n\n                # fouth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)\n                ([\\]`\\\"\\']?)\n\n                # fifth matching group\n                # a period\n                (\\.)\n\n                # sixth matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # seventh matching group\n                # at least 1 word character\n                (\\w+)\n\n                # eighth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n                ([\\]`\\\"\\']?)(?=\\s|$)\n\n                ',\n            'from_table_2':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character \n                (from|join)\\s+\n\n                # second matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n                ([\\[`\\\"\\']?)\n\n                # third matching group\n                # at least 1 word character\n                (\\w+)\n\n                # fouth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n                ([\\]`\\\"\\']?)\n\n                # fifth matching group\n                # a period            \n                (\\.)\n\n                # sixth matching group\n                # 1 or 0 of (opening bracket, backtick, or quotation mark)\n                ([\\[`\\\"\\']?)\n\n                # seventh matching group\n                # at least 1 word character            \n                (\\w+)\n\n                # eighth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark) \n                ([\\]`\\\"\\']?)\n\n                # ninth matching group\n                # a period             \n                (\\.)\n\n                # tenth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n                ([\\[`\\\"\\']?)\n\n                # eleventh matching group\n                # at least 1 word character   \n                (\\w+)\n\n                # twelfth matching group\n                # 1 or 0 of (closing bracket, backtick, or quotation mark) followed by a whitespace character or end of string\n                ([\\]`\\\"\\']?)(?=\\s|$)\n\n                ',\n            'from_table_3':\n                '(?ix)\n\n                # NOT following \"distinct \"\n                (?<!distinct\\s)\n\n                # first matching group\n                # from or join followed by at least 1 whitespace character             \n                (from|join)\\s+\n\n                # second matching group\n                # 1 of (opening bracket, backtick, or quotation mark)            \n                ([\\[`\\\"\\'])\n\n                # third matching group\n                # at least 1 word character\n                (\\w+)\n                \n                # fourth matching group\n                # 1 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n                ([\\]`\\\"\\'])(?=\\s|$)\n\n                '\n        } -%}\n\n        {%- for regex_name, regex_pattern in from_hard_coded_references.items() -%}\n\n            {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql_no_comments) -%}\n                \n                {%- for match in all_regex_matches -%}\n\n                    {%- set raw_reference = match[1:]|join()|trim -%}\n\n                    {%- do all_hard_coded_references_list.append(raw_reference) -%}\n\n                {%- endfor -%}\n        \n        {%- endfor -%}\n\n    {% endif %}\n    \n    {% set all_hard_coded_references = set(all_hard_coded_references_list)|sort|join(', ')|trim %}\n\n    {{ return(all_hard_coded_references) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.478147, "supported_languages": null}, "macro.dbt_project_evaluator.filter_exceptions": {"name": "filter_exceptions", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/filter_exceptions.sql", "original_file_path": "macros/filter_exceptions.sql", "unique_id": "macro.dbt_project_evaluator.filter_exceptions", "macro_sql": "{% macro filter_exceptions() -%}\n    {{ return(adapter.dispatch('filter_exceptions', 'dbt_project_evaluator')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__filter_exceptions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.478615, "supported_languages": null}, "macro.dbt_project_evaluator.default__filter_exceptions": {"name": "default__filter_exceptions", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/filter_exceptions.sql", "original_file_path": "macros/filter_exceptions.sql", "unique_id": "macro.dbt_project_evaluator.default__filter_exceptions", "macro_sql": "{% macro default__filter_exceptions() %}\n\n    {% set query_filters %}\n    select\n        column_name,\n        id_to_exclude\n    from {{ ref('dbt_project_evaluator_exceptions') }}\n    where fct_name = '{{ model.name }}'\n    {% endset %}\n\n    {% if execute %}\n    {% set is_default_seed = 'dbt_project_evaluator' in graph.nodes.values() | \n        selectattr('resource_type', 'equalto', 'seed') | \n        selectattr('name', 'equalto', 'dbt_project_evaluator_exceptions') | \n        map(attribute = 'package_name') | list %}\n\n    {% if not is_default_seed %}\n    \n        {% if flags.WHICH not in ['compile'] %}\n            where 1 = 1\n            {% for row_filter in run_query(query_filters) %}\n                and {{ row_filter[0] }} not like '{{ row_filter[1] }}'\n            {% endfor %}\n        {% endif %}\n    \n    {% endif %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4792829, "supported_languages": null}, "macro.dbt_project_evaluator.get_directory_pattern": {"name": "get_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_directory_pattern", "macro_sql": "{% macro get_directory_pattern() %}\n  {%- set env_var_home_exists = env_var(\"HOME\", \"not_set\") != \"not_set\" -%}\n  {%- set on_mac_or_linux = env_var_home_exists and \"\\\\\\\\\" not in env_var(\"HOME\") -%}\n  {%- if on_mac_or_linux -%}\n    {{ return(\"/\") }}\n  {% else %}\n    {{ return(\"\\\\\\\\\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.480073, "supported_languages": null}, "macro.dbt_project_evaluator.get_regexp_directory_pattern": {"name": "get_regexp_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_regexp_directory_pattern", "macro_sql": "{% macro get_regexp_directory_pattern() %}\n  {% set regexp_escaped = get_directory_pattern() | replace(\"\\\\\\\\\", \"\\\\\\\\\\\\\\\\\") %}\n  {% do return(regexp_escaped) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_directory_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.480274, "supported_languages": null}, "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern": {"name": "get_dbtreplace_directory_pattern", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/get_directory_pattern.sql", "original_file_path": "macros/get_directory_pattern.sql", "unique_id": "macro.dbt_project_evaluator.get_dbtreplace_directory_pattern", "macro_sql": "{% macro get_dbtreplace_directory_pattern() %}\n  {%- set env_var_home_exists = env_var(\"HOME\", \"not_set\") != \"not_set\" -%}\n  {%- set on_mac_or_linux = env_var_home_exists and \"\\\\\\\\\" not in env_var(\"HOME\") -%}\n  {%- if on_mac_or_linux -%}\n    {{ dbt.replace(\"file_path\", \"regexp_replace(file_path,'.*/','')\", \"''\") }}\n  {% else %}\n    {{ dbt.replace(\"file_path\", \"regexp_replace(file_path,'.*\\\\\\\\\\\\\\\\','')\", \"''\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4806762, "supported_languages": null}, "macro.dbt_project_evaluator.is_not_empty_string": {"name": "is_not_empty_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/is_not_empty_string.sql", "original_file_path": "macros/is_not_empty_string.sql", "unique_id": "macro.dbt_project_evaluator.is_not_empty_string", "macro_sql": "{% macro is_not_empty_string(str) %}\n    {{ return(adapter.dispatch('is_not_empty_string', 'dbt_project_evaluator')(str)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__is_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4809248, "supported_languages": null}, "macro.dbt_project_evaluator.default__is_not_empty_string": {"name": "default__is_not_empty_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/is_not_empty_string.sql", "original_file_path": "macros/is_not_empty_string.sql", "unique_id": "macro.dbt_project_evaluator.default__is_not_empty_string", "macro_sql": "{% macro default__is_not_empty_string(str) %}\n\n    {% if str %}\n    {{ true }}\n    {% else %}\n    {{ false }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4810839, "supported_languages": null}, "macro.dbt_project_evaluator.insert_resources_from_graph": {"name": "insert_resources_from_graph", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/insert_resources_from_graph.sql", "original_file_path": "macros/insert_resources_from_graph.sql", "unique_id": "macro.dbt_project_evaluator.insert_resources_from_graph", "macro_sql": "{% macro insert_resources_from_graph(relation, resource_type='nodes', relationships=False, columns=False, batch_size=var('insert_batch_size') | int) %}\n  {%- set values = get_resource_values(resource_type, relationships, columns) -%}\n  {%- set values_length = values | length -%}\n  {%- set loop_count = (values_length / batch_size) | round(0, 'ceil') | int -%}\n  \n    {%- for loop_number in range(loop_count) -%}\n        {%- set lower_bound = loop.index0 * batch_size -%}\n        {%- set upper_bound = loop.index * batch_size -%}\n        {%- set values_subset = values[lower_bound : upper_bound] %}\n        {%- set values_list_of_strings = [] -%}\n        {%- for indiv_values in values_subset %}\n            {%- do values_list_of_strings.append( indiv_values | join(\", \\n\")) -%}\n        {%- endfor -%}\n        {%- set values_string = '(' ~ values_list_of_strings | join(\"), \\n\\n(\") ~ ')' %}\n        {%- set insert_statement = \"insert into \" ~ relation ~ \" values \\n\" ~  values_string ~ \";\"%}\n        {% call statement('insert') -%}\n            {{ insert_statement }}\n        {%- endcall %}\n    {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_resource_values", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4824991, "supported_languages": null}, "macro.dbt_project_evaluator.print_dbt_project_evaluator_issues": {"name": "print_dbt_project_evaluator_issues", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/on-run-end/print_dbt_project_evaluator_issues.sql", "original_file_path": "macros/on-run-end/print_dbt_project_evaluator_issues.sql", "unique_id": "macro.dbt_project_evaluator.print_dbt_project_evaluator_issues", "macro_sql": "{% macro print_dbt_project_evaluator_issues(format='table', quote=\"\") %}\n\n  {%- if flags.WHICH in [\"build\",\"test\"] -%}\n    {{ print(\"\\n### List of issues raised by dbt_project_evaluator ###\") }}\n\n    {#-\n      if you create custom dbt_project_evaluator rules on your package using the test `dbt_project_evaluator.is_empty`,\n      the test name should start with the same name as the default.\n    -#}\n    {% set test_name_prefix_of_custom_rules = var(\n      \"test_name_prefix_of_custom_rules\",\n      default=\"dbt_project_evaluator_is_empty_\",\n    ) %}\n\n    {% for result in results | selectattr('failures') | selectattr('failures', '>', 0) %}\n      \n      {% set is_test = result.node.config.materialized == \"test\" %}\n      {% set package_name = result.node.package_name %}\n      {% set resource_name = result.node.name %}\n      {% if is_test and (\n        package_name == \"dbt_project_evaluator\"\n        or resource_name.startswith(test_name_prefix_of_custom_rules)\n      ) %}\n        \n        {{ print(\"\\n-- \" ~ result.node.fqn | join(\".\") ~ \" --\") }}\n\n        {% set unique_id_model_checked = result.node.depends_on.nodes[0] %}\n\n        {% set model_details = graph[\"nodes\"][unique_id_model_checked] %}\n        {% set name_model_checked = model_details.alias %}\n        {% set model_schema = quote ~ model_details.schema ~ quote %}\n        {% set model_database = quote ~ model_details.database ~ quote if model_details.database  else None %}\n        {% set db_schema = model_database ~ \".\" ~ model_schema if model_database else model_schema %}\n\n        {% set sql_statement %}\n        select * from {{db_schema}}.{{name_model_checked}}\n        {% endset %}\n\n        {% set query_results = run_query(sql_statement) %}\n        {% if format == 'table' %}\n          {{ print(query_results.print_table(max_column_width=80, max_rows=1000) or \"\") }}\n        {% elif format == 'csv' %}  \n          {{ print(query_results.print_csv() or \"\") }}\n        {% else %}\n            {%- do exceptions.raise_compiler_error(\"format can only be 'table' or 'csv'\") -%}\n        {% endif %}\n\n\n      {% endif %}\n\n    {% endfor %}\n\n    {{ print(\"\\n\") }}\n  {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.484729, "supported_languages": null}, "macro.dbt_project_evaluator.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/duckdb_shims.sql", "original_file_path": "macros/cross_db_shim/duckdb_shims.sql", "unique_id": "macro.dbt_project_evaluator.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) -%}\n    str_split({{string_text}}, {{delimiter_text}})[{{part_number}}]\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.485024, "supported_languages": null}, "macro.dbt_project_evaluator.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/duckdb_shims.sql", "original_file_path": "macros/cross_db_shim/duckdb_shims.sql", "unique_id": "macro.dbt_project_evaluator.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {# \n        This is not the full support for listagg on DuckDB but it allows tests to pass/fail for this package\n        - order_by_clause does not work, so we need to sort the CTE before calling listagg\n        - support for limit_num was not added\n    #}\n\n    {% if limit_num -%}\n        {%- do exceptions.raise_compiler_error(\"listagg on DuckDB doesn't support limit_num\") -%}\n    {%- endif %}\n\n    string_agg(\n        {{ measure }}\n        , {{ delimiter_text }}\n        {{ order_by_clause }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4852731, "supported_languages": null}, "macro.dbt_project_evaluator.redshift__type_string": {"name": "redshift__type_string", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/redshift_shims.sql", "original_file_path": "macros/cross_db_shim/redshift_shims.sql", "unique_id": "macro.dbt_project_evaluator.redshift__type_string", "macro_sql": "{%- macro redshift__type_string() -%}\n  {{ \"VARCHAR(600)\" }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.485387, "supported_languages": null}, "macro.dbt_project_evaluator.spark__escape_single_quotes": {"name": "spark__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/cross_db_shim/spark_shims.sql", "original_file_path": "macros/cross_db_shim/spark_shims.sql", "unique_id": "macro.dbt_project_evaluator.spark__escape_single_quotes", "macro_sql": "{% macro spark__escape_single_quotes(expression) -%}\n    {{ expression | replace(\"'\",\"\\\\'\") }}  \n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.485539, "supported_languages": null}, "macro.dbt_project_evaluator.get_node_values": {"name": "get_node_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_node_values.sql", "original_file_path": "macros/unpack/get_node_values.sql", "unique_id": "macro.dbt_project_evaluator.get_node_values", "macro_sql": "{%- macro get_node_values() -%}\n    {{ return(adapter.dispatch('get_node_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_node_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.486444, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_node_values": {"name": "default__get_node_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_node_values.sql", "original_file_path": "macros/unpack/get_node_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_node_values", "macro_sql": "{%- macro default__get_node_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.nodes.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n        {%- set hard_coded_references = dbt_project_evaluator.find_all_hard_coded_references(node) -%}\n        {%- set contract = node.contract.enforced if node.contract else false -%}\n        {%- set exclude_node = dbt_project_evaluator.set_is_excluded(node, resource_type=\"node\") -%}\n\n\n        {%- set values_line  = \n            [\n                wrap_string_with_quotes(node.unique_id),\n                wrap_string_with_quotes(node.name),\n                wrap_string_with_quotes(node.resource_type),\n                wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n                \"cast(\" ~ node.config.enabled | trim ~ \" as boolean)\",\n                wrap_string_with_quotes(node.config.materialized),\n                wrap_string_with_quotes(node.config.on_schema_change),\n                wrap_string_with_quotes(node.group),\n                wrap_string_with_quotes(node.access),\n                wrap_string_with_quotes(node.latest_version),\n                wrap_string_with_quotes(node.version),\n                wrap_string_with_quotes(node.deprecation_date),\n                \"cast(\" ~ contract | trim  ~ \" as boolean)\",\n                node.columns.values() | list | length,\n                node.columns.values() | list | selectattr('description') | list | length,\n                wrap_string_with_quotes(node.database),\n                wrap_string_with_quotes(node.schema),\n                wrap_string_with_quotes(node.package_name),\n                wrap_string_with_quotes(node.alias),\n                \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n                \"''\" if not node.column_name else wrap_string_with_quotes(dbt.escape_single_quotes(node.column_name)),\n                wrap_string_with_quotes(node.meta | tojson),\n                wrap_string_with_quotes(dbt.escape_single_quotes(hard_coded_references)),\n                wrap_string_with_quotes(node.get('depends_on',{}).get('macros',[]) | tojson),\n                \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.test_metadata) | trim ~ \" as boolean)\",\n                \"cast(\" ~ exclude_node ~ \" as boolean)\",\n            ]\n        %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.find_all_hard_coded_references", "macro.dbt_project_evaluator.set_is_excluded", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.488255, "supported_languages": null}, "macro.dbt_project_evaluator.get_metric_values": {"name": "get_metric_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_metric_values.sql", "original_file_path": "macros/unpack/get_metric_values.sql", "unique_id": "macro.dbt_project_evaluator.get_metric_values", "macro_sql": "{%- macro get_metric_values() -%}\n    {{ return(adapter.dispatch('get_metric_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_metric_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.488788, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_metric_values": {"name": "default__get_metric_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_metric_values.sql", "original_file_path": "macros/unpack/get_metric_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_metric_values", "macro_sql": "{%- macro default__get_metric_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.metrics.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n   \n          {%- set values_line = \n            [\n            wrap_string_with_quotes(node.unique_id),\n            wrap_string_with_quotes(node.name),\n            wrap_string_with_quotes(node.resource_type),\n            wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n            \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n            wrap_string_with_quotes(node.type),\n            wrap_string_with_quotes(dbt.escape_single_quotes(node.label)),\n            wrap_string_with_quotes(node.package_name),\n            wrap_string_with_quotes(dbt.escape_single_quotes(tojson(node.filter))),\n            wrap_string_with_quotes(node.type_params.measure.name),\n            wrap_string_with_quotes(node.type_params.measure.alias),\n            wrap_string_with_quotes(node.type_params.numerator | tojson),\n            wrap_string_with_quotes(node.type_params.denominator | tojson),\n            wrap_string_with_quotes(node.type_params.expr),\n            wrap_string_with_quotes(node.type_params.window | tojson),\n            wrap_string_with_quotes(node.type_params.grain_to_date),\n            wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.489996, "supported_languages": null}, "macro.dbt_project_evaluator.get_resource_values": {"name": "get_resource_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_resource_values.sql", "original_file_path": "macros/unpack/get_resource_values.sql", "unique_id": "macro.dbt_project_evaluator.get_resource_values", "macro_sql": "{% macro get_resource_values(resource=None, relationships=None, columns=None) %}\n  {% if relationships %}\n    {{ return(adapter.dispatch('get_relationship_values', 'dbt_project_evaluator')(node_type=resource)) }}\n  {% elif columns %}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_project_evaluator')(node_type=resource)) }}\n  {% elif resource == 'exposures' %}\n    {{ return(adapter.dispatch('get_exposure_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'sources' %}\n    {{ return(adapter.dispatch('get_source_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'metrics' %}\n    {{ return(adapter.dispatch('get_metric_values', 'dbt_project_evaluator')()) }}\n  {% elif resource == 'nodes' %}\n    {{ return(adapter.dispatch('get_node_values', 'dbt_project_evaluator')()) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_project_evaluator.get_relationship_values", "macro.dbt_project_evaluator.default__get_relationship_values", "macro.dbt_project_evaluator.get_column_values", "macro.dbt_project_evaluator.default__get_column_values", "macro.dbt_project_evaluator.get_exposure_values", "macro.dbt_project_evaluator.default__get_exposure_values", "macro.dbt_project_evaluator.get_source_values", "macro.dbt_project_evaluator.default__get_source_values", "macro.dbt_project_evaluator.get_metric_values", "macro.dbt_project_evaluator.default__get_metric_values", "macro.dbt_project_evaluator.get_node_values", "macro.dbt_project_evaluator.default__get_node_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.491245, "supported_languages": null}, "macro.dbt_project_evaluator.get_relationship_values": {"name": "get_relationship_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_relationship_values.sql", "original_file_path": "macros/unpack/get_relationship_values.sql", "unique_id": "macro.dbt_project_evaluator.get_relationship_values", "macro_sql": "{%- macro get_relationship_values(node_type) -%}\n    {{ return(adapter.dispatch('get_relationship_values', 'dbt_project_evaluator')(node_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_relationship_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.492703, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_relationship_values": {"name": "default__get_relationship_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_relationship_values.sql", "original_file_path": "macros/unpack/get_relationship_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_relationship_values", "macro_sql": "{%- macro default__get_relationship_values(node_type) -%}\n\n    {%- if execute -%}\n        {%- if node_type == 'nodes' %}\n            {% set nodes_list = graph.nodes.values() %}   \n        {%- elif node_type == 'exposures' -%}\n            {% set nodes_list = graph.exposures.values() %}\n        {%- elif node_type == 'metrics' -%}\n            {% set nodes_list = graph.metrics.values() %}\n        {%- else -%}\n            {{ exceptions.raise_compiler_error(\"node_type needs to be either nodes, exposures or metrics, got \" ~ node_type) }}\n        {% endif -%}\n        \n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n            {%- if node.get('depends_on',{}).get('nodes',[]) |length == 0 -%}\n\n                {%- set values_line = \n                  [\n                    \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt.type_string() ~ \")\",\n                    \"cast(NULL as \" ~ dbt.type_string() ~ \")\",\n                    \"FALSE\",\n                  ] \n                %}\n                  \n                {%- do values.append(values_line) -%}\n\n            {%- else -%}       \n\n                {%- for parent in node.get('depends_on',{}).get('nodes',[]) -%}\n\n                    {%- set values_line = \n                        [\n                            \"cast('\" ~ node.unique_id ~ \"' as \" ~ dbt.type_string() ~ \")\",\n                            \"cast('\" ~ parent ~ \"' as \" ~ dbt.type_string() ~ \")\",\n                            \"\" ~ loop.last ~ \"\" if node.unique_id.split('.')[0] == 'test' else \"FALSE\"\n                        ]\n                    %}\n                      \n                    {%- do values.append(values_line) -%}\n\n                {%- endfor -%}\n\n            {%- endif -%}\n\n        {%- endfor -%}\n    \n    {{ return(values) }}\n\n    {%- endif -%}\n  \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.494103, "supported_languages": null}, "macro.dbt_project_evaluator.get_exposure_values": {"name": "get_exposure_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_exposure_values.sql", "original_file_path": "macros/unpack/get_exposure_values.sql", "unique_id": "macro.dbt_project_evaluator.get_exposure_values", "macro_sql": "{%- macro get_exposure_values() -%}\n    {{ return(adapter.dispatch('get_exposure_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_exposure_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4945762, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_exposure_values": {"name": "default__get_exposure_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_exposure_values.sql", "original_file_path": "macros/unpack/get_exposure_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_exposure_values", "macro_sql": "{%- macro default__get_exposure_values() -%}\n\n    {%- if execute -%}\n\n        {%- set nodes_list = graph.exposures.values() -%}\n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n\n          {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n              wrap_string_with_quotes(node.type),\n              wrap_string_with_quotes(node.maturity),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.url),\n              wrap_string_with_quotes(dbt.escape_single_quotes(node.owner.name)),\n              wrap_string_with_quotes(dbt.escape_single_quotes(node.owner.email)),\n              wrap_string_with_quotes(node.meta | tojson)\n            ]\n          %}\n\n          {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n    {{ return(values) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.495438, "supported_languages": null}, "macro.dbt_project_evaluator.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_column_values.sql", "original_file_path": "macros/unpack/get_column_values.sql", "unique_id": "macro.dbt_project_evaluator.get_column_values", "macro_sql": "{%- macro get_column_values(node_type) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_project_evaluator')(node_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.49615, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_column_values.sql", "original_file_path": "macros/unpack/get_column_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_column_values", "macro_sql": "{%- macro default__get_column_values(node_type) -%}\n\n    {%- if execute -%}\n        {%- if node_type == 'nodes' %}\n            {% set nodes_list = graph.nodes.values() %}   \n        {%- elif node_type == 'sources' -%}\n            {% set nodes_list = graph.sources.values() %}\n        {%- else -%}\n            {{ exceptions.raise_compiler_error(\"node_type needs to be either nodes or sources, got \" ~ node_type) }}\n        {% endif -%}\n\n        {%- set values = [] -%}\n\n        {%- for node in nodes_list -%}\n            {%- for column in node.columns.values() -%}\n\n                {%- set values_line  = \n                    [\n                        wrap_string_with_quotes(node.unique_id),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.name)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.description)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.data_type)),\n                        wrap_string_with_quotes(dbt.escape_single_quotes(column.quote))\n                    ]\n                %}\n\n                {%- do values.append(values_line) -%}\n\n            {%- endfor -%}\n        {%- endfor -%}\n    {{ return(values) }}\n\n    {%- endif -%}\n  \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt.escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.497026, "supported_languages": null}, "macro.dbt_project_evaluator.get_source_values": {"name": "get_source_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_source_values.sql", "original_file_path": "macros/unpack/get_source_values.sql", "unique_id": "macro.dbt_project_evaluator.get_source_values", "macro_sql": "{%- macro get_source_values() -%}\n    {{ return(adapter.dispatch('get_source_values', 'dbt_project_evaluator')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_project_evaluator.default__get_source_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.4976199, "supported_languages": null}, "macro.dbt_project_evaluator.default__get_source_values": {"name": "default__get_source_values", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "macros/unpack/get_source_values.sql", "original_file_path": "macros/unpack/get_source_values.sql", "unique_id": "macro.dbt_project_evaluator.default__get_source_values", "macro_sql": "{%- macro default__get_source_values() -%}\n\n    {%- if execute -%}\n    {%- set nodes_list = graph.sources.values() -%}\n    {%- set values = [] -%}\n\n    {%- for node in nodes_list -%}\n\n        {%- set exclude_source = dbt_project_evaluator.set_is_excluded(node, resource_type=\"source\") -%}\n\n         {%- set values_line = \n            [\n              wrap_string_with_quotes(node.unique_id),\n              wrap_string_with_quotes(node.name),\n              wrap_string_with_quotes(node.original_file_path | replace(\"\\\\\",\"\\\\\\\\\")),\n              wrap_string_with_quotes(node.alias),\n              wrap_string_with_quotes(node.resource_type),\n              wrap_string_with_quotes(node.source_name),\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.source_description) | trim ~ \" as boolean)\",\n              \"cast(\" ~ dbt_project_evaluator.is_not_empty_string(node.description) | trim ~ \" as boolean)\",\n              \"cast(\" ~ node.config.enabled ~ \" as boolean)\",\n              wrap_string_with_quotes(node.loaded_at_field | replace(\"'\", \"_\")),\n              wrap_string_with_quotes(node.database),\n              wrap_string_with_quotes(node.schema),\n              wrap_string_with_quotes(node.package_name),\n              wrap_string_with_quotes(node.loader),\n              wrap_string_with_quotes(node.identifier),\n              wrap_string_with_quotes(node.meta | tojson),\n              \"cast(\" ~ exclude_source ~ \" as boolean)\",\n            ]\n        %}\n            \n        {%- do values.append(values_line) -%}\n\n    {%- endfor -%}\n    {%- endif -%}\n\n\n    {{ return(values) }}\n \n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_project_evaluator.set_is_excluded", "macro.dbt_project_evaluator.wrap_string_with_quotes", "macro.dbt_project_evaluator.is_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.498726, "supported_languages": null}, "macro.dbt_project_evaluator.test_is_empty": {"name": "test_is_empty", "resource_type": "macro", "package_name": "dbt_project_evaluator", "path": "tests/generic/test_is_empty.sql", "original_file_path": "tests/generic/test_is_empty.sql", "unique_id": "macro.dbt_project_evaluator.test_is_empty", "macro_sql": "{% test is_empty(model) %}\n\n    {{ config (\n        severity = 'warn',\n        fail_calc = \"n_records\"\n    ) }}\n\n    select count(*) as n_records\n    from {{ model }}\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.498948, "supported_languages": null}, "macro.dbt_product_analytics.flows": {"name": "flows", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/flows.sql", "original_file_path": "macros/flows.sql", "unique_id": "macro.dbt_product_analytics.flows", "macro_sql": "{% macro flows(\n  event_stream=None,\n  primary_event=None, \n  n_events_from=5, \n  before_or_after='after', \n  top_n=20, \n  start_date=none, \n  end_date=none) \n%}\n\n  {% if event_stream is none %}\n    {{ exceptions.raise_compiler_error('parameter \\'event_stream\\' must be provided')}}\n  {% endif %}\n\n  {% if primary_event is none %}\n    {{ exceptions.raise_compiler_error('parameter \\'primary_event\\' must be provided')}}\n  {% endif %}  \n\n  with event_stream as {{ dbt_product_analytics._select_event_stream(event_stream, start_date, end_date) }}\n\n  , flow_events as (\n    select\n      {% if before_or_after == 'after' %} event_type as event_0 {% endif %}\n      {% for i in range(n_events_from) %}\n        {% if before_or_after == 'before' %} {% set index = n_events_from - i %} {% else %} {% set index = i + 1 %} {% endif %}\n        {% if before_or_after == 'before' %}{% if not loop.first %},{% endif %}lag{% else %}, lead{% endif %}(event_type, {{ index }}) over(partition by user_id order by event_date) as event_{{ index }}\n      {% endfor %}\n      {% if before_or_after == 'before' %}, event_type as event_0 {% endif %}\n    from event_stream\n  )\n\n  , flow_counts as (\n    select\n      *\n      , count(*) as n_events\n    from flow_events\n    where event_0 = '{{ primary_event }}'\n    group by 1 {% for i in range(n_events_from) %}, {{ i + 2 }} {% endfor %}\n  )\n\n  , final as (\n    select *\n    from flow_counts\n    order by n_events desc\n    limit {{ top_n }}\n  )\n\n  select * from final\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_product_analytics._select_event_stream"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5009868, "supported_languages": null}, "macro.dbt_product_analytics.funnel": {"name": "funnel", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/funnel.sql", "original_file_path": "macros/funnel.sql", "unique_id": "macro.dbt_product_analytics.funnel", "macro_sql": "{% macro funnel(steps=none, event_stream=none, start_date=none, end_date=none) %}\n  {{ return(adapter.dispatch('funnel','dbt_product_analytics')(steps, event_stream, start_date, end_date)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_product_analytics.default__funnel"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.503, "supported_languages": null}, "macro.dbt_product_analytics.default__funnel": {"name": "default__funnel", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/funnel.sql", "original_file_path": "macros/funnel.sql", "unique_id": "macro.dbt_product_analytics.default__funnel", "macro_sql": "{% macro default__funnel(steps, event_stream, start_date, end_date) %}\n  with event_stream as {{ dbt_product_analytics._select_event_stream(event_stream, start_date, end_date) }}\n  {% for step in steps %}\n    , event_stream_step_{{ loop.index }} as (\n      select event_stream.* \n      from event_stream\n      {% if loop.index > 1 %}\n        inner join event_stream_step_{{ loop.index - 1 }} as previous_events\n          on event_stream.user_id = previous_events.user_id\n          and previous_events.event_type = '{{ loop.previtem }}'\n          and previous_events.event_date <= event_stream.event_date\n      {% endif %}\n      where event_stream.event_type = '{{ step }}'\n    )\n\n    , step_{{ loop.index }} as (\n      select count(distinct user_id) as unique_users \n      from event_stream_step_{{ loop.index }}\n    )  \n\n  {% endfor %}\n\n  , event_funnel as (\n    {% for step in steps %}\n      select '{{ step }}' as event_type, unique_users, {{ loop.index }} as step_index\n      from step_{{ loop.index }}\n      {% if not loop.last %}\n        union all\n      {% endif %}\n    {% endfor %}\n  )\n\n  , final as (\n    select event_type\n      , unique_users, 1.0 * unique_users / nullif(first_value(unique_users) over(order by step_index), 0) as pct_conversion\n      , 1.0 * unique_users / nullif(lag(unique_users) over(order by step_index), 0) as pct_of_previous\n    from event_funnel\n  )\n\n  select * from final\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_product_analytics._select_event_stream"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.503687, "supported_languages": null}, "macro.dbt_product_analytics.snowflake__funnel": {"name": "snowflake__funnel", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/funnel.sql", "original_file_path": "macros/funnel.sql", "unique_id": "macro.dbt_product_analytics.snowflake__funnel", "macro_sql": "{% macro snowflake__funnel(steps, event_stream, start_date, end_date) %}\n  with event_stream as {{ dbt_product_analytics._select_event_stream(event_stream, start_date, end_date) }}\n\n  , steps as (\n    {% for step in steps %}\n      select\n        '{{ step }}' as event_type\n        , {{ loop.index }} as index\n      {% if not loop.last %}\n        union all\n      {% endif %}\n    {% endfor %}\n  )\n  , event_funnel as (\n    select event_type, count(distinct user_id) as unique_users\n    from event_stream\n    match_recognize(\n        partition by user_id\n        order by event_date\n        all rows per match\n        pattern({% for step in steps %} ({% for i in range(loop.length - loop.index + 1) %} step_{{ loop.index }}+{% endfor %}) {% if not loop.last %} | {% endif %} {% endfor %} )\n        define\n          {% for step in steps %}\n            step_{{ loop.index }} as event_type = '{{ step }}' {% if not loop.last %} , {% endif %}\n          {% endfor %}\n    )\n    group by event_type\n  )\n  \n  , final as (\n    select event_funnel.event_type\n      , unique_users, cast(unique_users as double) / nullif(first_value(unique_users) over(order by steps.index), 0) as pct_conversion\n      , 1.0 * cast(unique_users as double) / nullif(lag(unique_users) over(order by steps.index), 0) as pct_of_previous\n    from event_funnel\n    left join steps\n      on event_funnel.event_type = steps.event_type\n    order by steps.index\n  )\n\n  select * from final\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_product_analytics._select_event_stream"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.504461, "supported_languages": null}, "macro.dbt_product_analytics.trino__funnel": {"name": "trino__funnel", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/funnel.sql", "original_file_path": "macros/funnel.sql", "unique_id": "macro.dbt_product_analytics.trino__funnel", "macro_sql": "{% macro trino__funnel(steps, event_stream) %}\n  {{ dbt_product_analytics.snowflake__funnel(steps, event_stream) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_product_analytics.snowflake__funnel"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.504704, "supported_languages": null}, "macro.dbt_product_analytics.retention": {"name": "retention", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/retention.sql", "original_file_path": "macros/retention.sql", "unique_id": "macro.dbt_product_analytics.retention", "macro_sql": "{% macro retention(event_stream=None, first_action=None, second_action=None, start_date=None, end_date=None, periods=[0,1,7,14,30,60,120], period_type='day', group_by=None) %}\n  {% if event_stream is none %}\n    {{ exceptions.raise_compiler_error('parameter \\'event_stream\\' must be provided')}}\n  {% endif %}\n\n  {% if first_action is none %}\n    {{ exceptions.raise_compiler_error('parameter \\'first_action\\' must be provided')}}\n  {% endif %}\n\n  {% if second_action is none %}\n    {{ exceptions.raise_compiler_error('parameter \\'second_action\\' must be provided')}}\n  {% endif %}\n  \n  with event_stream as {{ dbt_product_analytics._select_event_stream(event_stream, start_date, end_date) }}\n\n  , first_event_users as (\n    select\n      user_id\n      {% if group_by %}, {{ group_by }} as dimension {% endif %}\n      , min(event_date) as first_event_date\n    from event_stream\n    group by 1 {% if group_by %}, {{ group_by }} {% endif %}\n  )\n\n  , first_events as (\n    select {% if group_by %} dimension, {% endif %}\n    count(*) as unique_users_total\n    from first_event_users\n    {% if group_by %} group by 1 {% endif %}\n  )\n\n  {% for period in periods %}\n  , secondary_events_{{ period }} as (\n    select {{ period }} as period,\n    {% if group_by %} dimension, {% endif %}\n    count(distinct event_stream.user_id) as unique_users\n    from event_stream\n    inner join first_event_users\n      on event_stream.user_id = first_event_users.user_id\n      {% if group_by %} and event_stream.{{ group_by }} = first_event_users.dimension {% endif %}\n    where event_type = '{{ second_action }}'\n    and event_date >= {{ dbt_product_analytics._dateadd(datepart=period_type, interval=period, from_date_or_timestamp='first_event_date') }}\n\n    group by period {% if group_by %}, {{ group_by }} {% endif %}\n  )\n  {% endfor %}\n\n  , final as (\n    select \n      period, \n      {% if group_by %} first_events.dimension, {% endif %}\n      unique_users,\n      1.0 * unique_users / unique_users_total as pct_users\n    from first_events\n    left join (\n      {% for period in periods %}\n        select * from secondary_events_{{ period }}\n        {% if not loop.last %}\n          union all\n        {% endif %}\n      {% endfor %}\n    ) secondary_events on  1 = 1\n    {% if group_by %}\n      and first_events.dimension = secondary_events.dimension\n      where period is not null\n    {% endif %}\n  )\n\n  select * from final\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_product_analytics._select_event_stream", "macro.dbt_product_analytics._dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.507305, "supported_languages": null}, "macro.dbt_product_analytics.event_stream": {"name": "event_stream", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/event_stream.sql", "original_file_path": "macros/event_stream.sql", "unique_id": "macro.dbt_product_analytics.event_stream", "macro_sql": "{% macro event_stream(\n    from=none,\n    event_type_col=none,\n    user_id_col=none, \n    date_col=none,\n    start_date=none, \n    end_date=none)\n%}\n  {{ return(adapter.dispatch('event_stream', 'dbt_product_analytics')(from, event_type_col, user_id_col, date_col, start_date, end_date)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_product_analytics.default__event_stream"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.507831, "supported_languages": null}, "macro.dbt_product_analytics.default__event_stream": {"name": "default__event_stream", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/event_stream.sql", "original_file_path": "macros/event_stream.sql", "unique_id": "macro.dbt_product_analytics.default__event_stream", "macro_sql": "{% macro default__event_stream(from, event_type_col, user_id_col, date_col, start_date, end_date) %}\n  select {{ event_type_col }} as event_type, {{ user_id_col }} as user_id, {{ date_col }} as event_date\n  from {{ from }}\n  where 1 = 1\n  {% if start_date is not none %}\n    and {{ date_col }} >= {{ dbt_product_analytics._cast_to_date(start_date) }}\n  {% endif %}\n  {% if end_date is not none %}\n    and {{ date_col }} < {{ dbt_product_analytics._cast_to_date(end_date) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_product_analytics._cast_to_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.508238, "supported_languages": null}, "macro.dbt_product_analytics._select_event_stream": {"name": "_select_event_stream", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/helpers/_select_event_stream.sql", "original_file_path": "macros/helpers/_select_event_stream.sql", "unique_id": "macro.dbt_product_analytics._select_event_stream", "macro_sql": "{% macro _select_event_stream(event_stream, start_date=none, end_date=none) -%}\n  ( {% if not (event_stream|string|trim).startswith('select ') %} select * from {% endif %} {{ event_stream }}\n    {% if start_date or end_date %} where 1 = 1 {% endif %}\n    {% if start_date %} and event_date >= '{{ start_date }}' {% endif %}\n    {% if end_date %} and event_date < '{{ end_date }}' {% endif %}\n   )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5087302, "supported_languages": null}, "macro.dbt_product_analytics._dateadd": {"name": "_dateadd", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/helpers/_dateadd.sql", "original_file_path": "macros/helpers/_dateadd.sql", "unique_id": "macro.dbt_product_analytics._dateadd", "macro_sql": "{% macro _dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('_dateadd', 'dbt_product_analytics')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_product_analytics.default___dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.509094, "supported_languages": null}, "macro.dbt_product_analytics.default___dateadd": {"name": "default___dateadd", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/helpers/_dateadd.sql", "original_file_path": "macros/helpers/_dateadd.sql", "unique_id": "macro.dbt_product_analytics.default___dateadd", "macro_sql": "{% macro default___dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.dateadd", "macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.509294, "supported_languages": null}, "macro.dbt_product_analytics.trino___dateadd": {"name": "trino___dateadd", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/helpers/_dateadd.sql", "original_file_path": "macros/helpers/_dateadd.sql", "unique_id": "macro.dbt_product_analytics.trino___dateadd", "macro_sql": "{% macro trino___dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ from_date_or_timestamp }} + interval '{{ interval }}' {{ datepart }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5094411, "supported_languages": null}, "macro.dbt_product_analytics.sqlite___dateadd": {"name": "sqlite___dateadd", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/helpers/_dateadd.sql", "original_file_path": "macros/helpers/_dateadd.sql", "unique_id": "macro.dbt_product_analytics.sqlite___dateadd", "macro_sql": "{% macro sqlite___dateadd(datepart, interval, from_date_or_timestamp) %}\n  date({{ from_date_or_timestamp }}, '+{{ interval }} {{ datepart }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.509574, "supported_languages": null}, "macro.dbt_product_analytics._run_query": {"name": "_run_query", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/helpers/_run_query.sql", "original_file_path": "macros/helpers/_run_query.sql", "unique_id": "macro.dbt_product_analytics._run_query", "macro_sql": "{% macro _run_query(query) %}\n    -- {# example usage:\n    --     dbt -q run-operation _run_query --args \"{\\\"query\\\": \\\"{{ dbt_product_analytics.funnel(steps=[{ 'event_type': 'placed' }, {'event_type': 'completed'}, {'event_type': 'returned'}], event_stream=ref('order_events')) }}\\\"}\"\n    --     [{\"event_type\": \"placed\", \"unique_users\": 15.0, \"pct_conversion\": 1.0, \"pct_of_previous\": null}, {\"event_type\": \"completed\", \"unique_users\": 2.0, \"pct_conversion\": 0.13333333333333333, \"pct_of_previous\": 0.13333333333333333}, {\"event_type\": \"returned\", \"unique_users\": 1.0, \"pct_conversion\": 0.06666666666666667, \"pct_of_previous\": 0.5}]\n    -- #}\n    {% set res = run_query(render(query)) %}\n    {% do res.print_json() %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.509839, "supported_languages": null}, "macro.dbt_product_analytics._cast_to_date": {"name": "_cast_to_date", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/helpers/_cast_to_date.sql", "original_file_path": "macros/helpers/_cast_to_date.sql", "unique_id": "macro.dbt_product_analytics._cast_to_date", "macro_sql": "{% macro _cast_to_date(str) %}\n  {{ return(adapter.dispatch('_cast_to_date', 'dbt_product_analytics')(str)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_product_analytics.default___cast_to_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.510355, "supported_languages": null}, "macro.dbt_product_analytics.default___cast_to_date": {"name": "default___cast_to_date", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/helpers/_cast_to_date.sql", "original_file_path": "macros/helpers/_cast_to_date.sql", "unique_id": "macro.dbt_product_analytics.default___cast_to_date", "macro_sql": "{% macro default___cast_to_date(str) %}\n    cast('{{ str }}' as date)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5104792, "supported_languages": null}, "macro.dbt_product_analytics.sqlite___cast_to_date": {"name": "sqlite___cast_to_date", "resource_type": "macro", "package_name": "dbt_product_analytics", "path": "macros/helpers/_cast_to_date.sql", "original_file_path": "macros/helpers/_cast_to_date.sql", "unique_id": "macro.dbt_product_analytics.sqlite___cast_to_date", "macro_sql": "{% macro sqlite___cast_to_date(str) %}\n    '{{ str }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5105898, "supported_languages": null}, "macro.dbt_graph_theory.generate_subgraph_id": {"name": "generate_subgraph_id", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/largest_connected_subgraphs.sql", "original_file_path": "macros/largest_connected_subgraphs.sql", "unique_id": "macro.dbt_graph_theory.generate_subgraph_id", "macro_sql": "{% macro generate_subgraph_id() %}\n    {{ return(adapter.dispatch(\"generate_subgraph_id\", macro_namespace=\"dbt_graph_theory\")()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.bigquery__generate_subgraph_id"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.515958, "supported_languages": null}, "macro.dbt_graph_theory.bigquery__generate_subgraph_id": {"name": "bigquery__generate_subgraph_id", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/largest_connected_subgraphs.sql", "original_file_path": "macros/largest_connected_subgraphs.sql", "unique_id": "macro.dbt_graph_theory.bigquery__generate_subgraph_id", "macro_sql": "{% macro bigquery__generate_subgraph_id() %}\n{# handle the bigquery case explicitly, to allow for  #}\nselect\n    graph_id,\n    vertex,\n    cast(dense_rank() over (partition by graph_id order by to_json_string(subgraph_members)) as {{ type_string() }}) as subgraph_id\nfrom node_subgraphs\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.516077, "supported_languages": null}, "macro.dbt_graph_theory.default__generate_subgraph_id": {"name": "default__generate_subgraph_id", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/largest_connected_subgraphs.sql", "original_file_path": "macros/largest_connected_subgraphs.sql", "unique_id": "macro.dbt_graph_theory.default__generate_subgraph_id", "macro_sql": "{% macro default__generate_subgraph_id() %}\nselect\n    graph_id,\n    vertex,\n    cast(dense_rank() over (partition by graph_id order by subgraph_members) as {{ type_string() }}) as subgraph_id\nfrom node_subgraphs\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.516175, "supported_languages": null}, "macro.dbt_graph_theory.largest_connected_subgraphs": {"name": "largest_connected_subgraphs", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/largest_connected_subgraphs.sql", "original_file_path": "macros/largest_connected_subgraphs.sql", "unique_id": "macro.dbt_graph_theory.largest_connected_subgraphs", "macro_sql": "{% macro largest_connected_subgraphs(\n    input,\n    edge_id='id',\n    vertex_1='vertex_1',\n    vertex_2='vertex_2',\n    graph_id=none\n) %}\n    {#\n        This macro takes a graph in the given structure, and identifies connected subgraphs of the same table.\n        \n        Required [minimal] table structure:\n        graph_id (Optional, amongoose):\n            An identifier at the graph level (ie. if the table in question represents multiple graphs).\n            When this is not defined, it is assumed that the table represents the one graph.\n        edge_id (amongoose):\n            An identifier of the edge (from vertex_1 to vertex_2). This field should be unique at the graph level.\n        vertex_1 (amongoose):\n            The alias for the first (origin, for directed graphs) vertex of the given edge_id.\n            Nulls are allowed, and correspond to the given vertex_2 not being connected to any other vertices.\n        vertex_2 (amongoose):\n            The alias for the second (destination, for directed graphs) vertex of the given edge_id.\n            Nulls are allowed, and correspond to the given vertex_1 not being connected to any other vertices.\n\n        It returns a query giving a vertex / graph level table with the following fields:\n        graph_id (amongoose):\n            Identifies the graph based on the input table. If graph_id was not present in the input table, this field is always '1'.\n        vertex (amongoose):\n            Identifies the vertex that the given subgraph and subgraph_members corresponds to. This (as well as graph_id) defines the level of the table.\n        subgraph_id (amongoose):\n            An identifier of the (connected) subgraph for the given vertices for the given edge.\n            This is unique at the graph level.  \n        subgraph_members (array[Any]):\n            An array of the vertices that constitute the given subgraph. The data type of the array is that of the vertex_1 and vertex_2 fields. \n\n        Parameters:\n        input (amongoose or a ref / source): The input model or CTE that follows the structure above.\n        edge_id (amongoose): The field corresponding to the edge_id field described above.\n        vertex_1 (amongoose): The field corresponding to the vertex_1 field described above.\n        vertex_2 (amongoose): The field corresponding to the vertex_2 field described above.\n        graph_id (amongoose, Optional, default = None): The field corresponding to the graph_id field described above.\n    #}\n\n    with recursive enforce_graph as (\n        {{ dbt_graph_theory.enforce_graph_structure(\n            input,\n            edge_id=edge_id,\n            vertex_1=vertex_1,\n            vertex_2=vertex_2,\n            graph_id=graph_id\n        )}}\n    ),\n    \n    all_vertices as (\n        select\n            {{ graph_id if graph_id else \"cast('1' as \" ~ type_string() ~ \")\" }} as graph_id,\n            {{ vertex_1 }} as vertex\n        from enforce_graph\n        where {{ vertex_1 }} is not null\n        {{ dbt_graph_theory.set_union(distinct=true) }}\n        select\n            {{ graph_id if graph_id else \"cast('1' as \" ~ type_string() ~ \")\" }} as graph_id,\n            {{ vertex_2 }} as vertex\n        from enforce_graph\n        where {{ vertex_2 }} is not null\n    ),\n\n    {# enforce bi-directional edges #}\n    all_edges as (\n        select\n            {{ graph_id if graph_id else \"cast('1' as \" ~ type_string() ~ \")\" }} as graph_id,\n            {{ vertex_1 }} as vertex_1,\n            {{ vertex_2 }} as vertex_2\n        from\n            enforce_graph\n        where\n            coalesce({{ vertex_1 }} != {{ vertex_2 }}, true) and\n            ({{ vertex_1 }} is not null or {{ vertex_2 }} is not null)\n        {{ dbt_graph_theory.set_union(distinct=true) }}\n        select\n            {{ graph_id if graph_id else \"cast('1' as \" ~ type_string() ~ \")\" }} as graph_id,\n            {{ vertex_2 }} as vertex_1,\n            {{ vertex_1 }} as vertex_2\n        from\n            enforce_graph\n        where\n            coalesce({{ vertex_1 }} != {{ vertex_2 }}, true) and\n            ({{ vertex_1 }} is not null or {{ vertex_2 }} is not null)\n    ),\n\n    graph_walk as (\n        select\n            all_vertices.graph_id,\n            all_vertices.vertex as orig_vertex,\n            all_edges.vertex_1,\n            all_edges.vertex_2,\n            {{ dbt_graph_theory.array_construct(components=['all_edges.vertex_1', 'all_edges.vertex_2']) }} as path_array\n        from \n            all_edges\n        inner join all_vertices on\n            all_vertices.graph_id = all_edges.graph_id and\n            all_vertices.vertex = all_edges.vertex_1\n        {{ dbt_graph_theory.set_union(distinct=false) }}\n        select\n            graph_walk.graph_id,\n            graph_walk.orig_vertex,\n            all_edges.vertex_1,\n            all_edges.vertex_2,\n            {{ dbt_graph_theory.array_append(array='graph_walk.path_array', new_value='all_edges.vertex_2') }} as path_array\n        from\n            all_edges\n        inner join graph_walk on\n            -- walk from the \"end\" vertex of the last edge to the \"start\" vertex of the next edge\n            -- only walk there if the target vertex has not already been reached on the walk\n            -- note: while this does not guarantee full coverage on each path, it means that every reachable vertex from every original vertex has a row.\n            graph_walk.graph_id = all_edges.graph_id and\n            graph_walk.vertex_2 = all_edges.vertex_1 and\n            not({{ dbt_graph_theory.array_contains(array='graph_walk.path_array', value='all_edges.vertex_2') }})\n    ),\n\n    all_paths as (\n        select\n            graph_id,\n            orig_vertex,\n            vertex_1 as end_vertex\n        from\n            graph_walk\n        {{ dbt_graph_theory.set_union(distinct=true) }}\n        select\n            graph_id,\n            orig_vertex,\n            vertex_2 as end_vertex\n        from\n            graph_walk\n    ),\n\n    node_subgraphs as (\n        select\n            graph_id,\n            orig_vertex as vertex,\n            {{ dbt_graph_theory.array_agg(\n                field='end_vertex',\n                distinct=true,\n                order_field='end_vertex',\n                order='asc'\n            ) }} as subgraph_members\n        from all_paths\n        group by\n            graph_id,\n            orig_vertex\n    ),\n\n    generate_subgraph_id as (\n        {{ dbt_graph_theory.generate_subgraph_id() }}\n    ),\n\n    largest_connected_subgraphs as (\n        select\n            node_subgraphs.graph_id,\n            node_subgraphs.vertex,\n            node_subgraphs.subgraph_members,\n            concat(\n                {{ 'node_subgraphs.graph_id' if graph_id else \"''\" }},\n                {{ \"'__',\" if graph_id }}\n                generate_subgraph_id.subgraph_id\n            ) as subgraph_id\n        from node_subgraphs\n        left join generate_subgraph_id on\n            node_subgraphs.graph_id = generate_subgraph_id.graph_id and\n            node_subgraphs.vertex = generate_subgraph_id.vertex\n    )\n\n    select * from largest_connected_subgraphs\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.enforce_graph_structure", "macro.dq_tools.type_string", "macro.dbt_graph_theory.set_union", "macro.dbt_graph_theory.array_construct", "macro.dbt_graph_theory.array_append", "macro.dbt_graph_theory.array_contains", "macro.dbt_graph_theory.array_agg", "macro.dbt_graph_theory.generate_subgraph_id"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.517868, "supported_languages": null}, "macro.dbt_graph_theory.connect_ordered_graph": {"name": "connect_ordered_graph", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/connect_ordered_graph.sql", "original_file_path": "macros/connect_ordered_graph.sql", "unique_id": "macro.dbt_graph_theory.connect_ordered_graph", "macro_sql": "{% macro connect_ordered_graph(\n    input,\n    edge_id='id',\n    vertex_1='vertex_1',\n    vertex_2='vertex_2',\n    ordering={'edge_order': 'numeric'},\n    graph_id=none\n) %}\n    {#\n        This macro takes an ordered graph in the given structure, and connects any unconnected subgraphs.\n        Additional fields are dropped - if these are required, they should be joined back in.\n        \n        Required [minimal] table structure:\n        graph_id (Optional, string):\n            An identifier at the graph level (ie. if the table in question represents multiple graphs).\n            When this is not defined, it is assumed that the table represents the one graph.\n        edge_id (string):\n            An identifier of the edge (from vertex_1 to vertex_2). This field should be unique at the graph level.\n        vertex_1 (string):\n            The alias for the first (origin, for directed graphs) vertex of the given edge_id.\n            Nulls are allowed, and correspond to the given vertex_2 not being connected to any other vertices.\n        vertex_2 (string):\n            The alias for the second (destination, for directed graphs) vertex of the given edge_id.\n            Nulls are allowed, and correspond to the given vertex_1 not being connected to any other vertices.\n        ordering (timestamp, date or numeric):\n            The field corresponding to the order of the edges of the given graph. This is used to connect sensible nodes to each other\n            (ie. in order from one subgraph to the other).\n\n        It returns a query giving a vertex / graph level table with the following fields:\n        graph_id (string):\n            Identifies the graph based on the input table. If graph_id was not present in the input table, this field is always '1'.\n        vertex (string):\n            Identifies the vertex that the given subgraph and subgraph_members corresponds to. This (as well as graph_id) defines the level of the table.\n        subgraph_id (string):\n            An identifier of the (connected) subgraph for the given vertices for the given edge.\n            This is unique at the graph level.  \n        subgraph_members (array[Any]):\n            An array of the vertices that constitute the given subgraph. The data type of the array is that of the vertex_1 and vertex_2 fields. \n\n        Parameters:\n        input (string or a ref / source): The input model or CTE that follows the structure above.\n        edge_id (string): The field corresponding to the edge_id field described above.\n        vertex_1 (string): The field corresponding to the vertex_1 field described above.\n        vertex_2 (string): The field corresponding to the vertex_2 field described above.\n        ordering (dict[string, string]):\n            A dict with key being the field corresponding to the ordering as descripted above,\n            and the value being the data type of the given field.\n            For example, { 'event_time' : 'timestamp' } corresponds to a field named event_time of type timestamp.\n            The data type must be one of: 'timestamp', 'date', 'numeric'.\n        graph_id (string, Optional, default = None): The field corresponding to the graph_id field described above.\n    #}\n\n{% set supported_ordering_types = ['numeric', 'timestamp', 'date'] %}\n\n{% set ordering_field = ordering.keys()|list|first %}\n{% set ordering_type = ordering.values()|list|first %}\n\n{{ exceptions.raise_compiler_error(\n    'Please input a supported ordering type - must be one of: '~ supported_ordering_types\n) if ordering_type not in supported_ordering_types }}\n\nwith subgraphs as (\n    {{ dbt_graph_theory.largest_connected_subgraphs(\n        input=input,\n        edge_id=edge_id,\n        vertex_1=vertex_1,\n        vertex_2=vertex_2,\n        graph_id=graph_id\n    ) }}\n),\n\nenforce_graph_types as (\n    select\n        cast({{ graph_id if graph_id else '1'}} as {{ type_string() }}) as graph_id,\n        cast({{ edge_id }} as {{ type_string() }}) as edge_id,\n        cast({{ vertex_1 }} as {{ type_string() }}) as vertex_1,\n        cast({{ vertex_2 }} as {{ type_string() }}) as vertex_2,\n        {% if ordering_type == 'timestamp' %}\n        {{ dbt_graph_theory.cast_timestamp(ordering_field) }} as ordering\n        {% else %}\n        cast({{ ordering_field }} as {{ordering_type}}) as ordering\n        {% endif %}\n    from\n        {{ input }}\n),\n\nfrom_vertices as (\n    select\n        _input.graph_id,\n        _input.vertex_1 as vertex,\n        _input.ordering,\n        subgraphs.subgraph_id\n    from enforce_graph_types as _input\n    inner join subgraphs on\n        _input.graph_id = subgraphs.graph_id and\n        _input.vertex_1 = subgraphs.vertex\n),\n\nto_vertices as (\n    select\n        _input.graph_id,\n        _input.vertex_2 as vertex,\n        _input.ordering,\n        subgraphs.subgraph_id\n    from enforce_graph_types as _input\n    inner join subgraphs on\n        _input.graph_id = subgraphs.graph_id and\n        _input.vertex_2 = subgraphs.vertex\n),\n\nvertex_ordering as (\n    select\n        graph_id,\n        vertex,\n        ordering\n    from from_vertices\n    {{ dbt_graph_theory.set_union(distinct=true) }}\n    select\n        graph_id,\n        vertex,\n        ordering\n    from to_vertices\n),\n\nvertex_min_max_ordering as (\n    select\n        graph_id,\n        vertex,\n        max(ordering) as max_ordering,\n        min(ordering) as min_ordering\n    from vertex_ordering\n    group by \n        graph_id,\n        vertex\n),\n\nsubgraph_max_min_ordering as (\n    select\n        subgraphs.graph_id,\n        subgraphs.subgraph_id,\n        subgraphs.subgraph_members,\n        min(orderings.min_ordering) as min_ordering,\n        max(orderings.max_ordering) as max_ordering\n    from\n        subgraphs\n    inner join\n        vertex_min_max_ordering as orderings on\n            subgraphs.graph_id = orderings.graph_id and\n            subgraphs.vertex = orderings.vertex\n    group by\n        subgraphs.graph_id,\n        subgraphs.subgraph_id,\n        subgraphs.subgraph_members\n),\n\nsubgraph_lead_lags as (\n    select\n        graph_id,\n        subgraph_id,\n        min_ordering,\n        max_ordering,\n        lag(subgraph_id) over (partition by graph_id order by min_ordering) as lag_subgraph_id,\n        lag(max_ordering) over (partition by graph_id order by min_ordering) as lag_max_ordering\n    from\n        subgraph_max_min_ordering\n),\n\nnew_edges_join as (\n    select\n        _required_edges.graph_id,\n        to_vertices.vertex as vertex_1,\n        to_vertices.ordering as old_ordering,\n        from_vertices.vertex as vertex_2,\n        from_vertices.ordering as new_ordering,\n        -- the join condition ensure that we need to be able to dedupe a > condition, we use this field to do that - ie. we pick the most recent\n        -- \"to_vertices\" row that has joined (ie. is less than the required max ordering (min_ordering in the next subgraph))\n        row_number() over (partition by to_vertices.graph_id, to_vertices.subgraph_id order by to_vertices.ordering desc) = 1 as is_max_to_vertex_joined\n    from\n        subgraph_lead_lags as _required_edges\n    inner join\n        from_vertices on\n            -- this is the vertex in the subgraph that has the min ordering\n            _required_edges.graph_id = from_vertices.graph_id and\n            _required_edges.subgraph_id = from_vertices.subgraph_id and\n            _required_edges.min_ordering = from_vertices.ordering\n    inner join\n        to_vertices on\n            -- these are the vertices in the previous subgraph that have an ordering less than the min of the subgraph\n            _required_edges.graph_id = to_vertices.graph_id and\n            _required_edges.lag_subgraph_id = to_vertices.subgraph_id and\n            _required_edges.min_ordering > to_vertices.ordering\n    -- filter out the \"first\" subgraph id - the remainder is exactly the number of new edges required.\n    where _required_edges.lag_max_ordering is not null\n),\n\ninclude_new_edges as (\n    select\n        {{ 'graph_id as ' ~ graph_id ~ ',' if graph_id }}\n        edge_id as {{ edge_id }},\n        ordering as {{ ordering_field }},\n        vertex_1 as {{ vertex_1 }}, \n        vertex_2 as {{ vertex_2 }}\n    from enforce_graph_types\n    {{ dbt_graph_theory.set_union(distinct=false) }}\n    select\n        {{ 'graph_id as ' ~ graph_id ~ ',' if graph_id }}\n        concat(\n            {{ \"cast(graph_id as {{ type_string() }}), '_',\" if graph_id }} \n            'inserted_edge_',\n            cast(row_number() over (order by graph_id, vertex_1) as {{ type_string() }})\n        ) as {{ edge_id }},\n        {% if ordering_type == 'timestamp' %}\n        case\n            when\n                new_ordering = old_ordering or\n                old_ordering = {{ dbt_utils.dateadd('second', '-1', 'new_ordering') }}\n                then new_ordering\n            else {{ dbt_utils.dateadd('second', '-1', 'new_ordering') }}\n        end\n        {% elif ordering_type == 'date' %}\n        case\n            when\n                new_ordering = old_ordering or\n                old_ordering = {{ dbt_utils.dateadd('day', '-1', 'new_ordering') }}\n                then new_ordering\n            else {{ dbt_utils.dateadd('day', '-1', 'new_ordering') }}\n        end\n        {% elif ordering_type == 'numeric' %}\n        old_ordering + (new_ordering - old_ordering) / 2\n        {% endif %} as {{ ordering_field }},\n        vertex_1 as {{ vertex_1 }},\n        vertex_2 as {{ vertex_2 }}\n    from new_edges_join\n    -- drop any incorrect rows joined previously by the > join condition\n    where is_max_to_vertex_joined\n)\n\nselect * from include_new_edges\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.largest_connected_subgraphs", "macro.dq_tools.type_string", "macro.dbt_graph_theory.cast_timestamp", "macro.dbt_graph_theory.set_union", "macro.dq_tools.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5237172, "supported_languages": null}, "macro.dbt_graph_theory.enforce_graph_structure": {"name": "enforce_graph_structure", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/enforce_graph_structure.sql", "original_file_path": "macros/enforce_graph_structure.sql", "unique_id": "macro.dbt_graph_theory.enforce_graph_structure", "macro_sql": "{% macro enforce_graph_structure(\n    input,\n    edge_id='id',\n    vertex_1='vertex_1',\n    vertex_2='vertex_2',\n    graph_id=none\n) %}\n    {#\n        This macro takes a table and enforces that it follows the graph table structure.\n\n        Parameters:\n        input (string or a ref / source): The input model or CTE that follows the structure above.\n        edge_id (string): The edge_id field of the given input.\n        vertex_1 (string): The vertex_1 field of the given input.\n        vertex_2 (string): The vertex_2 field of the given input.\n        graph_id (string, Optional, default = None): The (optional) graph_di field of the given input.\n    #}\n\nselect\n    cast({{ edge_id }} as {{ type_string() }}) as {{ edge_id }},\n    {{ 'cast(' ~ graph_id ~ ' as ' ~ type_string() ~ ') as ' ~ graph_id ~ ',' if graph_id }}\n    cast({{ vertex_1 }} as {{ type_string() }}) as {{ vertex_1 }},\n    cast({{ vertex_2 }} as {{ type_string() }}) as {{ vertex_2 }}\nfrom\n    {{ input }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dq_tools.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5243819, "supported_languages": null}, "macro.dbt_graph_theory.cast_timestamp": {"name": "cast_timestamp", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/cast_timestamp.sql", "original_file_path": "macros/utils/cast_timestamp.sql", "unique_id": "macro.dbt_graph_theory.cast_timestamp", "macro_sql": "{% macro cast_timestamp(field) %}\n    {{ return(adapter.dispatch(\"cast_timestamp\", macro_namespace=\"dbt_graph_theory\")(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.bigquery__cast_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.52471, "supported_languages": null}, "macro.dbt_graph_theory.snowflake__cast_timestamp": {"name": "snowflake__cast_timestamp", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/cast_timestamp.sql", "original_file_path": "macros/utils/cast_timestamp.sql", "unique_id": "macro.dbt_graph_theory.snowflake__cast_timestamp", "macro_sql": "{% macro snowflake__cast_timestamp(field) %}\n    cast({{ field }} as timestamp_ntz)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.524802, "supported_languages": null}, "macro.dbt_graph_theory.postgres__cast_timestamp": {"name": "postgres__cast_timestamp", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/cast_timestamp.sql", "original_file_path": "macros/utils/cast_timestamp.sql", "unique_id": "macro.dbt_graph_theory.postgres__cast_timestamp", "macro_sql": "{% macro postgres__cast_timestamp(field) %}\n    cast({{ field }} as timestamp)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5248902, "supported_languages": null}, "macro.dbt_graph_theory.bigquery__cast_timestamp": {"name": "bigquery__cast_timestamp", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/cast_timestamp.sql", "original_file_path": "macros/utils/cast_timestamp.sql", "unique_id": "macro.dbt_graph_theory.bigquery__cast_timestamp", "macro_sql": "{% macro bigquery__cast_timestamp(field) %}\n    timestamp({{ field }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.524975, "supported_languages": null}, "macro.dbt_graph_theory.default__cast_timestamp": {"name": "default__cast_timestamp", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/cast_timestamp.sql", "original_file_path": "macros/utils/cast_timestamp.sql", "unique_id": "macro.dbt_graph_theory.default__cast_timestamp", "macro_sql": "{% macro default__cast_timestamp(field) %}\n    {{ dbt_graph_theory.adapter_missing_exception() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.adapter_missing_exception"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5250812, "supported_languages": null}, "macro.dbt_graph_theory.sql_values": {"name": "sql_values", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/sql_values.sql", "original_file_path": "macros/utils/sql_values.sql", "unique_id": "macro.dbt_graph_theory.sql_values", "macro_sql": "{% macro sql_values(data=[],metadata={\"names\": [], \"types\": []}, table_alias = \"v\") %}\n{#\n    sql_values is a list of ordered lists with the relevant sql_values.\n    metadata is a dict with names and types as the two keys. Ordering is same as sql_values\n#}\n    {{ return(adapter.dispatch(\"sql_values\", macro_namespace=\"dbt_graph_theory\")(data, metadata, table_alias)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.bigquery__sql_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.526898, "supported_languages": null}, "macro.dbt_graph_theory.bigquery__sql_values": {"name": "bigquery__sql_values", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/sql_values.sql", "original_file_path": "macros/utils/sql_values.sql", "unique_id": "macro.dbt_graph_theory.bigquery__sql_values", "macro_sql": "{% macro bigquery__sql_values(data, metadata, table_alias) %}\n\n    {% set has_types = metadata.get(\"types\", [])|length > 0 %}\n    {% set has_names = metadata.get(\"names\", [])|length > 0 %}\n    (\n    select * from unnest(\n        [\n        struct\n        {% for row in data -%}\n            \n            {% if has_types %}\n            {% set outer_loop = loop %}\n            (\n            {% for col in row -%}\n            {% if has_names and outer_loop.first %}\n                cast( {{ col }} as {{ metadata[\"types\"][loop.index0] }}) as {{ metadata[\"names\"][loop.index0] }} {{',' if not loop.last}}\n            {% else %}\n                cast( {{ col }} as {{ metadata[\"types\"][loop.index0] }}) {{',' if not loop.last}}\n            {% endif %}\n            {%- endfor %}\n            )\n\n            {% else %}\n            \n            {% if has_types and outer_loop.first %}\n                {% for col in row %}\n                cast( {{ col }} as {{ metadata[\"types\"][loop.index0] }}) as {{ metadata[\"names\"][loop.index0] }} {{',' if not loop.last}}\n                {% endfor %}\n            {% else %}\n            ({{ row|join(\", \")}}) {{',' if not loop.last}}\n            {% endif %}\n            {% endif %}\n        {% endfor %}\n        ]\n    )\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5280771, "supported_languages": null}, "macro.dbt_graph_theory.default__sql_values": {"name": "default__sql_values", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/sql_values.sql", "original_file_path": "macros/utils/sql_values.sql", "unique_id": "macro.dbt_graph_theory.default__sql_values", "macro_sql": "{% macro default__sql_values(data, metadata, table_alias) %}\n\n    {% set has_types = metadata.get(\"types\", [])|length > 0 %}\n    {% set has_names = metadata.get(\"names\", [])|length > 0 %}\n    (\n        values\n        {% for row in data -%}\n            {% if has_types %}\n            {% set outer_loop = loop %}\n            (\n            {% for col in row -%}\n                cast( {{ col }} as {{ metadata[\"types\"][loop.index0] }}) {{',' if not loop.last}}\n            {%- endfor %}\n            )\n            {% else %}\n            ({{ row|join(\", \")}}) {{',' if not loop.last}}\n            {% endif %}\n        {% endfor %}\n    ) as {{ table_alias }}\n    {{ \"(\" ~ metadata[\"names\"]|join(\",\") ~ \")\" if has_names }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5289128, "supported_languages": null}, "macro.dbt_graph_theory.set_union": {"name": "set_union", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/set_union.sql", "original_file_path": "macros/utils/set_union.sql", "unique_id": "macro.dbt_graph_theory.set_union", "macro_sql": "{% macro set_union(distinct=true) %}\n    {{ return(adapter.dispatch(\"set_union\", macro_namespace=\"dbt_graph_theory\")(distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.bigquery__set_union"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.529193, "supported_languages": null}, "macro.dbt_graph_theory.bigquery__set_union": {"name": "bigquery__set_union", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/set_union.sql", "original_file_path": "macros/utils/set_union.sql", "unique_id": "macro.dbt_graph_theory.bigquery__set_union", "macro_sql": "{% macro bigquery__set_union(distinct) %}\n    {{ 'union distinct' if distinct else 'union all' }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.529314, "supported_languages": null}, "macro.dbt_graph_theory.default__set_union": {"name": "default__set_union", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/set_union.sql", "original_file_path": "macros/utils/set_union.sql", "unique_id": "macro.dbt_graph_theory.default__set_union", "macro_sql": "{% macro default__set_union(distinct) %}\n    {{ 'union' if distinct else 'union all' }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.529427, "supported_languages": null}, "macro.dbt_graph_theory.array_contains": {"name": "array_contains", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_contains.sql", "original_file_path": "macros/utils/array_contains.sql", "unique_id": "macro.dbt_graph_theory.array_contains", "macro_sql": "{% macro array_contains(array, value) %}\n    {{ return(adapter.dispatch(\"array_contains\", macro_namespace=\"dbt_graph_theory\")(array, value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.bigquery__array_contains"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.529802, "supported_languages": null}, "macro.dbt_graph_theory.snowflake__array_contains": {"name": "snowflake__array_contains", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_contains.sql", "original_file_path": "macros/utils/array_contains.sql", "unique_id": "macro.dbt_graph_theory.snowflake__array_contains", "macro_sql": "{% macro snowflake__array_contains(array, value) %}\n    array_contains(cast({{ value }} as variant), {{ array }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.529919, "supported_languages": null}, "macro.dbt_graph_theory.postgres__array_contains": {"name": "postgres__array_contains", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_contains.sql", "original_file_path": "macros/utils/array_contains.sql", "unique_id": "macro.dbt_graph_theory.postgres__array_contains", "macro_sql": "{% macro postgres__array_contains(array, value) %}\n    {{ value }} = any({{ array }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.530035, "supported_languages": null}, "macro.dbt_graph_theory.bigquery__array_contains": {"name": "bigquery__array_contains", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_contains.sql", "original_file_path": "macros/utils/array_contains.sql", "unique_id": "macro.dbt_graph_theory.bigquery__array_contains", "macro_sql": "{% macro bigquery__array_contains(array, value) %}\n    ({{ value }} in unnest({{array}}))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.530317, "supported_languages": null}, "macro.dbt_graph_theory.default__array_contains": {"name": "default__array_contains", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_contains.sql", "original_file_path": "macros/utils/array_contains.sql", "unique_id": "macro.dbt_graph_theory.default__array_contains", "macro_sql": "{% macro default__array_contains(array, value) %}\n    {{ dbt_graph_theory.adapter_missing_exception() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.adapter_missing_exception"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.530507, "supported_languages": null}, "macro.dbt_graph_theory.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_agg.sql", "original_file_path": "macros/utils/array_agg.sql", "unique_id": "macro.dbt_graph_theory.array_agg", "macro_sql": "{% macro array_agg(field, distinct=false, order_field=none, order=none) %}\n    {{ return(adapter.dispatch(\"array_agg\", macro_namespace=\"dbt_graph_theory\")(field, distinct, order_field, order)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.bigquery__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5311182, "supported_languages": null}, "macro.dbt_graph_theory.snowflake__array_agg": {"name": "snowflake__array_agg", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_agg.sql", "original_file_path": "macros/utils/array_agg.sql", "unique_id": "macro.dbt_graph_theory.snowflake__array_agg", "macro_sql": "{% macro snowflake__array_agg(field, distinct, order_field, order) %}\n    array_agg({{ \"distinct\" if distinct }} {{ field }}) {{ \"within group (order by \" ~ order_field ~ \" \" ~ order ~ \")\" if order_field }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.531361, "supported_languages": null}, "macro.dbt_graph_theory.postgres__array_agg": {"name": "postgres__array_agg", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_agg.sql", "original_file_path": "macros/utils/array_agg.sql", "unique_id": "macro.dbt_graph_theory.postgres__array_agg", "macro_sql": "{% macro postgres__array_agg(field, distinct, order_field, order) %}\n    {# nulls are removed from the array to keep it alligned with the snowflake implementation #}\n    array_remove(array_agg({{ \"distinct\" if distinct }} {{ field }} {{ \"order by \" ~ order_field ~ \" \" ~ order if order_field }}), null)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5315971, "supported_languages": null}, "macro.dbt_graph_theory.bigquery__array_agg": {"name": "bigquery__array_agg", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_agg.sql", "original_file_path": "macros/utils/array_agg.sql", "unique_id": "macro.dbt_graph_theory.bigquery__array_agg", "macro_sql": "{% macro bigquery__array_agg(field, distinct, order_field, order) %}\n    {# nulls are removed from the array to keep it alligned with the snowflake implementation #}\n    array_agg({{'distinct' if distinct}} {{field}} ignore nulls {{ \"order by \" ~ order_field ~ \" \" ~ order if order_field }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.531816, "supported_languages": null}, "macro.dbt_graph_theory.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_agg.sql", "original_file_path": "macros/utils/array_agg.sql", "unique_id": "macro.dbt_graph_theory.default__array_agg", "macro_sql": "{% macro default__array_agg(field, distinct, order_field, order) %}\n    {{ dbt_graph_theory.adapter_missing_exception() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.adapter_missing_exception"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5319722, "supported_languages": null}, "macro.dbt_graph_theory.set_except": {"name": "set_except", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/set_except.sql", "original_file_path": "macros/utils/set_except.sql", "unique_id": "macro.dbt_graph_theory.set_except", "macro_sql": "{% macro set_except() %}\n    {{ return(adapter.dispatch(\"set_except\", macro_namespace=\"dbt_graph_theory\")()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.bigquery__set_except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.532224, "supported_languages": null}, "macro.dbt_graph_theory.bigquery__set_except": {"name": "bigquery__set_except", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/set_except.sql", "original_file_path": "macros/utils/set_except.sql", "unique_id": "macro.dbt_graph_theory.bigquery__set_except", "macro_sql": "{% macro bigquery__set_except() %}\n    except distinct\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.532306, "supported_languages": null}, "macro.dbt_graph_theory.default__set_except": {"name": "default__set_except", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/set_except.sql", "original_file_path": "macros/utils/set_except.sql", "unique_id": "macro.dbt_graph_theory.default__set_except", "macro_sql": "{% macro default__set_except() %}\n    except\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5323699, "supported_languages": null}, "macro.dbt_graph_theory.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_graph_theory.array_construct", "macro_sql": "{% macro array_construct(components) %}\n    {{ return(adapter.dispatch(\"array_construct\", macro_namespace=\"dbt_graph_theory\")(components)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5327091, "supported_languages": null}, "macro.dbt_graph_theory.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_graph_theory.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(components) %}\n    array_construct({{ components|join(\",\") }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.532835, "supported_languages": null}, "macro.dbt_graph_theory.postgres__array_construct": {"name": "postgres__array_construct", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_graph_theory.postgres__array_construct", "macro_sql": "{% macro postgres__array_construct(components) %}\n    array[{{ components|join(\",\") }}]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.532955, "supported_languages": null}, "macro.dbt_graph_theory.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_graph_theory.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(components) %}\n    [{{ components|join(\",\") }}]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.53316, "supported_languages": null}, "macro.dbt_graph_theory.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_graph_theory.default__array_construct", "macro_sql": "{% macro default__array_construct(components) %}\n    {{ dbt_graph_theory.adapter_missing_exception() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.adapter_missing_exception"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5332758, "supported_languages": null}, "macro.dbt_graph_theory.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_graph_theory.array_append", "macro_sql": "{% macro array_append(array, new_value) %}\n    {{ return(adapter.dispatch(\"array_append\", macro_namespace=\"dbt_graph_theory\")(array, new_value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5337899, "supported_languages": null}, "macro.dbt_graph_theory.snowflake__array_append": {"name": "snowflake__array_append", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_graph_theory.snowflake__array_append", "macro_sql": "{% macro snowflake__array_append(array, new_value) %}\n    array_append({{ array }}, {{ new_value }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.533914, "supported_languages": null}, "macro.dbt_graph_theory.postgres__array_append": {"name": "postgres__array_append", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_graph_theory.postgres__array_append", "macro_sql": "{% macro postgres__array_append(array, new_value) %}\n    array_append({{ array }}, {{ new_value }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.534025, "supported_languages": null}, "macro.dbt_graph_theory.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_graph_theory.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_value) %}\n    array_concat({{ array }}, [{{ new_value }}])\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.534135, "supported_languages": null}, "macro.dbt_graph_theory.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_graph_theory.default__array_append", "macro_sql": "{% macro default__array_append(array, new_value) %}\n    {{ dbt_graph_theory.adapter_missing_exception() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_graph_theory.adapter_missing_exception"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.534243, "supported_languages": null}, "macro.dbt_graph_theory.adapter_missing_exception": {"name": "adapter_missing_exception", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "macros/exceptions/adapter_missing_exception.sql", "original_file_path": "macros/exceptions/adapter_missing_exception.sql", "unique_id": "macro.dbt_graph_theory.adapter_missing_exception", "macro_sql": "{% macro adapter_missing_exception() %}\n\n  {% set supported_adapters = [\n  \"dbt_postgres\",\n  \"dbt_snowflake\",\n  \"dbt_bigquery\"\n] %}\n\n  {{- exceptions.raise_compiler_error(\n    \"This package only supports the following adapters:\\n\" ~ \n    \"- \" ~ supported_adapters | join(\",\\n- \") ~ \"\\n\" ~ \n    \"To increase adapter support, please submit an issue or a pull request against https://github.com/jpmmcneill/dbt-graph-theory \"\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.534595, "supported_languages": null}, "macro.dbt_graph_theory.test_graph_is_connected": {"name": "test_graph_is_connected", "resource_type": "macro", "package_name": "dbt_graph_theory", "path": "tests/generic/graph_is_connected.sql", "original_file_path": "tests/generic/graph_is_connected.sql", "unique_id": "macro.dbt_graph_theory.test_graph_is_connected", "macro_sql": "{% test graph_is_connected(\n    model,\n    edge_id,\n    vertex_1,\n    vertex_2,\n    graph_id=none\n) %}\n\nwith connected_subgraphs as (\n    {{ dbt_graph_theory.largest_connected_subgraphs(\n        input=model,\n        edge_id=edge_id,\n        vertex_1=vertex_1,\n        vertex_2=vertex_2,\n        graph_id=graph_id\n    ) }}\n),\n\nsubgraphs_per_graph as (\n    select\n        {{ 'graph_id,' if graph_id }}\n        count(distinct subgraph_id) as num_subgraphs\n    from\n        connected_subgraphs\n    {{ 'group by graph_id' if graph_id }}\n)\n\nselect * from subgraphs_per_graph\nwhere num_subgraphs != 1\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_graph_theory.largest_connected_subgraphs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.535032, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5354319, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.535508, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.535572, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.535649, "supported_languages": null}, "macro.dbt_expectations.trino__type_timestamp": {"name": "trino__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_timestamp", "macro_sql": "{% macro trino__type_timestamp() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.535715, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.535855, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.535918, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.535981, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5360398, "supported_languages": null}, "macro.dbt_expectations.duckdb__type_datetime": {"name": "duckdb__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.duckdb__type_datetime", "macro_sql": "{% macro duckdb__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5361001, "supported_languages": null}, "macro.dbt_expectations.spark__type_datetime": {"name": "spark__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.spark__type_datetime", "macro_sql": "{% macro spark__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5361578, "supported_languages": null}, "macro.dbt_expectations.trino__type_datetime": {"name": "trino__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_datetime", "macro_sql": "{% macro trino__type_datetime() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.536219, "supported_languages": null}, "macro.dbt_expectations.md5": {"name": "md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/md5.sql", "original_file_path": "macros/utils/md5.sql", "unique_id": "macro.dbt_expectations.md5", "macro_sql": "{%- macro md5(string_value) -%}\n    {{ return(adapter.dispatch('md5', 'dbt_expectations')(string_value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.536525, "supported_languages": null}, "macro.dbt_expectations.default__md5": {"name": "default__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/md5.sql", "original_file_path": "macros/utils/md5.sql", "unique_id": "macro.dbt_expectations.default__md5", "macro_sql": "\n\n{%- macro default__md5(string_value) -%}\n\n  {{ dbt.hash(string_value) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5366359, "supported_languages": null}, "macro.dbt_expectations.trino__md5": {"name": "trino__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/md5.sql", "original_file_path": "macros/utils/md5.sql", "unique_id": "macro.dbt_expectations.trino__md5", "macro_sql": "{%- macro trino__md5(string_value) -%}\n\n  md5(cast({{ string_value }} as varbinary))\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5367239, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.536958, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5371819, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.53856, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5388548, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.539225, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.539655, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.539903, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.540252, "supported_languages": null}, "macro.dbt_expectations.duckdb__regexp_instr": {"name": "duckdb__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.duckdb__regexp_instr", "macro_sql": "{% macro duckdb__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.540632, "supported_languages": null}, "macro.dbt_expectations.spark__regexp_instr": {"name": "spark__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nlength(regexp_extract({{ source_value }}, '{{ regexp }}', 0))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5409222, "supported_languages": null}, "macro.dbt_expectations.trino__regexp_instr": {"name": "trino__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.trino__regexp_instr", "macro_sql": "{% macro trino__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n    {% if flags %}\n        {{ dbt_expectations._validate_re2_flags(flags) }}\n        {# Trino prepends \"(?flags)\" to set flags for current group #}\n        {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n    {% endif %}\n    {% if is_raw %}\n        {{ exceptions.warn(\n                \"is_raw option is not supported for this adapter \"\n                ~ \"and is being ignored.\"\n        ) }}\n    {% endif %}\n    {%- set regexp_query = \"regexp_position(\" ~ source_value ~ \", '\" ~ regexp ~ \"', \" ~ position ~ \", \" ~ occurrence ~ \")\" -%}\n    {# Trino regexp_position returns -1 if not found. Change it to 0, to be consistent with other adapters #}\n    if({{ regexp_query}} = -1, 0, {{ regexp_query}})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.541447, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5418088, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\"\n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.54222, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5425642, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5426571, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5427442, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.542829, "supported_languages": null}, "macro.dbt_expectations.spark__log_natural": {"name": "spark__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.spark__log_natural", "macro_sql": "{% macro spark__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.542917, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.543417, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.543531, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.543606, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.543675, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.543736, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5438, "supported_languages": null}, "macro.dbt_expectations.duckdb__rand": {"name": "duckdb__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.duckdb__rand", "macro_sql": "{% macro duckdb__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.54386, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5440462, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.bigquery__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.544523, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.544721, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5449011, "supported_languages": null}, "macro.dbt_expectations.spark__quantile": {"name": "spark__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.spark__quantile", "macro_sql": "{% macro spark__quantile(field, quantile, partition) -%}\n    percentile({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.545085, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5454662, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.546012, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5469708, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.547673, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.548466, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5487099, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5493052, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.553466, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.553932, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.554336, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.555413, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5556228, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5557098, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5561569, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.557003, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.557591, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.558027, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5586822, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.559266, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5603478, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.561533, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5624378, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.562676, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5632331, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.564188, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.564802, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.56578, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5668821, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.56729, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.568345, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.570413, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5713549, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.572427, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.57311, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.573432, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.574195, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.57452, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5756001, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.575905, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5770812, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.577468, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.578845, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.579422, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.579988, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.580438, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.580752, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.581571, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.582305, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.583055, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.584172, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.584557, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.584772, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.585406, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5863721, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.58726, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.587456, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.587902, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.588466, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5891688, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5898502, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.590662, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.591347, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncast(count(distinct {{ column_name }}) as {{ dbt.type_float() }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.592132, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5928671, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.5944488, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.595268, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.596134, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.59668, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.597198, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.597845, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.598952, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.599284, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.599939, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.6007721, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.60144, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.602323, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.603039, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min(cast({{ date_col }} as date)) as start_{{ date_part }},\n            max(cast({{ date_col }} as date)) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n\n    {%- set db_start_date = dr.columns[0].values()[0] -%}\n    {%- set db_end_date = dr.columns[1].values()[0] -%}\n\n    {% if db_start_date is not string %}\n        {%- set db_start_date = db_start_date.strftime('%Y-%m-%d') -%}\n        {%- set db_end_date = db_end_date.strftime('%Y-%m-%d') -%}\n    {% endif %}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\n\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.606961, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.610417, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.611021, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.612565, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.613467, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.6140149, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.615238, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by {{ columns|join(', ') }}) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ dbt_expectations.md5(column) }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression", "macro.dbt_expectations.md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.616263, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }},\n        {%- endfor %}\n        count(*) as {{adapter.quote(\"n_records\")}}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.617892, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{# the if just allows for column names or literal numbers #}\n{% endfor %} = {% if sum_total is number %}{{sum_total}}{% else %}sum({{ sum_total }}){% endif %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.6187038, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.6192179, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.619781, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1714072381.6210828, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.snowplow_normalize.__snowplow_normalize__": {"name": "__snowplow_normalize__", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_overview.md", "original_file_path": "docs/markdown/snowplow_normalize_overview.md", "unique_id": "doc.snowplow_normalize.__snowplow_normalize__", "block_contents": "# Snowplow Normalize Package\n\nWelcome to the model documentation site for the Snowplow Normalize dbt package. The package provides 2 macros and a python script that is used to generate normalized data warehouse models (i.e. 1 table per specified event types); these models provide a table per event type that you specify, and can also produce a thin table of the normalized events and a user table, for use within downstream ETL tools. This package also contains the `manifest` and `_this_run` tables to support the incremental logic.\n\n**For more information, including a detailed operation guide please visit the [Snowplow Docs](https://docs.snowplow.io/docs/modeling-your-data/modeling-your-data-with-dbt/).**\n\n*Note this model design doc site is linked to latest release of the package. If you are not using the latest release, [generate and serve](https://docs.getdbt.com/reference/commands/cmd-docs#dbt-docs-serve) the doc site locally for accurate documentation.*\n\n## Overview\n\nThis package contains a python script that is designed to be used in conjunction with the macros provided to generate models that normalize the Snowplow `atomic.events` table into individual tables. These models use the standard Snowplow `_this_run` logic to only process new events. For more information on usage and the design of the models produced, see the [Package Docs](https://docs.snowplow.io/docs/modeling-your-data/modeling-your-data-with-dbt/dbt-normalize-model).\n\n## Installation\n\nCheck [dbt Hub](https://hub.getdbt.com/snowplow/snowplow_normalize/latest/) for the latest installation instructions, or read the [dbt docs][dbt-package-docs] for more information on installing packages.\n\n# Join the Snowplow community\n\nWe welcome all ideas, questions and contributions!\n\nFor support requests, please use our community support [Discourse][discourse] forum.\n\nIf you find a bug, please report an issue on GitHub.\n\n# Copyright and license\n\nThe snowplow-normalize package is Copyright 2022-2023 Snowplow Analytics Ltd.\n\nLicensed under the [Apache License, Version 2.0][license] (the \"License\");\nyou may not use this software except in compliance with the License.\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n[license]: http://www.apache.org/licenses/LICENSE-2.0\n[dbt-package-docs]: https://docs.getdbt.com/docs/building-a-dbt-project/package-management\n[discourse]: http://discourse.snowplow.io/"}, "doc.snowplow_normalize.table_base_incremental_manifest": {"name": "table_base_incremental_manifest", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_base_docs.md", "original_file_path": "docs/markdown/snowplow_normalize_base_docs.md", "unique_id": "doc.snowplow_normalize.table_base_incremental_manifest", "block_contents": "This incremental table is a manifest of the timestamp of the latest event consumed per model within the `snowplow-normalize` package as well as any models leveraging the incremental framework provided by the package. The latest event's timestamp is based off `collector_tstamp`. This table is used to determine what events should be processed in the next run of the model."}, "doc.snowplow_normalize.table_base_new_event_limits": {"name": "table_base_new_event_limits", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_base_docs.md", "original_file_path": "docs/markdown/snowplow_normalize_base_docs.md", "unique_id": "doc.snowplow_normalize.table_base_new_event_limits", "block_contents": "This table contains the lower and upper timestamp limits for the given run of the normalize model. These limits are used to select new events from the events table."}, "doc.snowplow_normalize.table_base_events_this_run": {"name": "table_base_events_this_run", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_base_docs.md", "original_file_path": "docs/markdown/snowplow_normalize_base_docs.md", "unique_id": "doc.snowplow_normalize.table_base_events_this_run", "block_contents": "For any given run, this table contains all required events to be consumed by subsequent nodes in the Snowplow dbt normalize package. This is a cleaned, deduped dataset, containing all columns from the raw events table.\n\n**Note: This table should be used as the input to any custom modules that require event level data, rather than selecting straight from `atomic.events`**"}, "doc.snowplow_normalize.table_events": {"name": "table_events", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_base_docs.md", "original_file_path": "docs/markdown/snowplow_normalize_base_docs.md", "unique_id": "doc.snowplow_normalize.table_events", "block_contents": "The `events` table contains all canonical events generated by [Snowplow's](https://snowplow.io/) trackers, including web, mobile and server side events."}, "doc.snowplow_normalize.col_app_id": {"name": "col_app_id", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_app_id", "block_contents": "Application ID e.g. \u2018angry-birds\u2019 is used to distinguish different applications that are being tracked by the same Snowplow stack, e.g. production versus dev."}, "doc.snowplow_normalize.col_platform": {"name": "col_platform", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_platform", "block_contents": "Platform e.g. \u2018web\u2019"}, "doc.snowplow_normalize.col_etl_tstamp": {"name": "col_etl_tstamp", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_etl_tstamp", "block_contents": "Timestamp event began ETL e.g. \u20182017-01-26 00:01:25.292\u2019"}, "doc.snowplow_normalize.col_collector_tstamp": {"name": "col_collector_tstamp", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_collector_tstamp", "block_contents": "Time stamp for the event recorded by the collector e.g. \u20182013-11-26 00:02:05\u2019"}, "doc.snowplow_normalize.col_dvce_created_tstamp": {"name": "col_dvce_created_tstamp", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_dvce_created_tstamp", "block_contents": "Timestamp event was recorded on the client device e.g. \u20182013-11-26 00:03:57.885\u2019"}, "doc.snowplow_normalize.col_event": {"name": "col_event", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_event", "block_contents": "The type of event recorded e.g. \u2018page_view\u2019"}, "doc.snowplow_normalize.col_event_id": {"name": "col_event_id", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_event_id", "block_contents": "A UUID for each event e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019"}, "doc.snowplow_normalize.col_txn_id": {"name": "col_txn_id", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_txn_id", "block_contents": "Transaction ID set client-side, used to de-dupe records e.g. 421828"}, "doc.snowplow_normalize.col_name_tracker": {"name": "col_name_tracker", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_name_tracker", "block_contents": "Tracker namespace e.g. \u2018sp1\u2019"}, "doc.snowplow_normalize.col_v_tracker": {"name": "col_v_tracker", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_v_tracker", "block_contents": "Tracker version e.g. \u2018js-3.0.0\u2019"}, "doc.snowplow_normalize.col_v_collector": {"name": "col_v_collector", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_v_collector", "block_contents": "Collector version e.g. \u2018ssc-2.1.0-kinesis\u2019"}, "doc.snowplow_normalize.col_v_etl": {"name": "col_v_etl", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_v_etl", "block_contents": "ETL version e.g. \u2018snowplow-micro-1.1.0-common-1.4.2\u2019"}, "doc.snowplow_normalize.col_user_id": {"name": "col_user_id", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_user_id", "block_contents": "Unique ID set by business e.g. \u2018jon.doe@email.com\u2019"}, "doc.snowplow_normalize.col_user_ipaddress": {"name": "col_user_ipaddress", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_user_ipaddress", "block_contents": "User IP address e.g. \u201892.231.54.234\u2019"}, "doc.snowplow_normalize.col_user_fingerprint": {"name": "col_user_fingerprint", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_user_fingerprint", "block_contents": "A user fingerprint generated by looking at the individual browser features e.g. 2161814971"}, "doc.snowplow_normalize.col_domain_userid": {"name": "col_domain_userid", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_domain_userid", "block_contents": "User ID set by Snowplow using 1st party cookie e.g. \u2018bc2e92ec6c204a14\u2019"}, "doc.snowplow_normalize.col_domain_sessionidx": {"name": "col_domain_sessionidx", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_domain_sessionidx", "block_contents": "A visit / session index e.g. 3"}, "doc.snowplow_normalize.col_network_userid": {"name": "col_network_userid", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_network_userid", "block_contents": "User ID set by Snowplow using 3rd party cookie e.g. \u2018ecdff4d0-9175-40ac-a8bb-325c49733607\u2019"}, "doc.snowplow_normalize.col_geo_country": {"name": "col_geo_country", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_geo_country", "block_contents": "ISO 3166-1 code for the country the visitor is located in e.g. \u2018GB\u2019, \u2018US\u2019"}, "doc.snowplow_normalize.col_geo_region": {"name": "col_geo_region", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_geo_region", "block_contents": "ISO-3166-2 code for country region the visitor is in e.g. \u2018I9\u2019, \u2018TX\u2019"}, "doc.snowplow_normalize.col_geo_city": {"name": "col_geo_city", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_geo_city", "block_contents": "City the visitor is in e.g. \u2018New York\u2019, \u2018London\u2019"}, "doc.snowplow_normalize.col_geo_zipcode": {"name": "col_geo_zipcode", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_geo_zipcode", "block_contents": "Postcode the visitor is in e.g. \u201894109\u2019"}, "doc.snowplow_normalize.col_geo_latitude": {"name": "col_geo_latitude", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_geo_latitude", "block_contents": "Visitor location latitude e.g. 37.443604"}, "doc.snowplow_normalize.col_geo_longitude": {"name": "col_geo_longitude", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_geo_longitude", "block_contents": "Visitor location longitude e.g. -122.4124"}, "doc.snowplow_normalize.col_geo_region_name": {"name": "col_geo_region_name", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_geo_region_name", "block_contents": "Visitor region name e.g. \u2018Florida\u2019"}, "doc.snowplow_normalize.col_ip_isp": {"name": "col_ip_isp", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ip_isp", "block_contents": "Visitor\u2019s ISP e.g. \u2018FDN Communications\u2019"}, "doc.snowplow_normalize.col_ip_organization": {"name": "col_ip_organization", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ip_organization", "block_contents": "Organization associated with the visitor\u2019s IP address \u2013 defaults to ISP name if none is found e.g. \u2018Bouygues Telecom\u2019"}, "doc.snowplow_normalize.col_ip_domain": {"name": "col_ip_domain", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ip_domain", "block_contents": "Second level domain name associated with the visitor\u2019s IP address e.g. \u2018nuvox.net\u2019"}, "doc.snowplow_normalize.col_ip_netspeed": {"name": "col_ip_netspeed", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ip_netspeed", "block_contents": "Visitor\u2019s connection type e.g. \u2018Cable/DSL\u2019"}, "doc.snowplow_normalize.col_page_url": {"name": "col_page_url", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_page_url", "block_contents": "The page URL e.g. \u2018http://www.example.com\u2019"}, "doc.snowplow_normalize.col_page_title": {"name": "col_page_title", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_page_title", "block_contents": "Web page title e.g. \u2018Snowplow Docs \u2013 Understanding the structure of Snowplow data\u2019"}, "doc.snowplow_normalize.col_page_referrer": {"name": "col_page_referrer", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_page_referrer", "block_contents": "URL of the referrer e.g. \u2018http://www.referrer.com\u2019"}, "doc.snowplow_normalize.col_page_urlscheme": {"name": "col_page_urlscheme", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_page_urlscheme", "block_contents": "Scheme aka protocol e.g. \u2018https\u2019"}, "doc.snowplow_normalize.col_page_urlhost": {"name": "col_page_urlhost", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_page_urlhost", "block_contents": "Host aka domain e.g. \u2018\u201cwww.snowplow.io\u2019"}, "doc.snowplow_normalize.col_page_urlport": {"name": "col_page_urlport", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_page_urlport", "block_contents": "Port if specified, 80 if not 80"}, "doc.snowplow_normalize.col_page_urlpath": {"name": "col_page_urlpath", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_page_urlpath", "block_contents": "Path to page e.g. \u2018/product/index.html\u2019"}, "doc.snowplow_normalize.col_page_urlquery": {"name": "col_page_urlquery", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_page_urlquery", "block_contents": "Querystring e.g. \u2018id=GTM-DLRG\u2019"}, "doc.snowplow_normalize.col_page_urlfragment": {"name": "col_page_urlfragment", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_page_urlfragment", "block_contents": "Fragment aka anchor e.g. \u20184-conclusion\u2019"}, "doc.snowplow_normalize.col_refr_urlscheme": {"name": "col_refr_urlscheme", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_refr_urlscheme", "block_contents": "Referer scheme e.g. \u2018http\u2019"}, "doc.snowplow_normalize.col_refr_urlhost": {"name": "col_refr_urlhost", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_refr_urlhost", "block_contents": "Referer host e.g. \u2018www.bing.com\u2019"}, "doc.snowplow_normalize.col_refr_urlport": {"name": "col_refr_urlport", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_refr_urlport", "block_contents": "Referer port e.g. 80"}, "doc.snowplow_normalize.col_refr_urlpath": {"name": "col_refr_urlpath", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_refr_urlpath", "block_contents": "Referer page path e.g. \u2018/images/search\u2019"}, "doc.snowplow_normalize.col_refr_urlquery": {"name": "col_refr_urlquery", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_refr_urlquery", "block_contents": "Referer URL querystring e.g. \u2018q=psychic+oracle+cards\u2019"}, "doc.snowplow_normalize.col_refr_urlfragment": {"name": "col_refr_urlfragment", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_refr_urlfragment", "block_contents": "Referer URL fragment"}, "doc.snowplow_normalize.col_refr_medium": {"name": "col_refr_medium", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_refr_medium", "block_contents": "Type of referer e.g. \u2018search\u2019, \u2018internal\u2019"}, "doc.snowplow_normalize.col_refr_source": {"name": "col_refr_source", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_refr_source", "block_contents": "Name of referer if recognised e.g. \u2018Bing images\u2019"}, "doc.snowplow_normalize.col_refr_term": {"name": "col_refr_term", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_refr_term", "block_contents": "Keywords if source is a search engine e.g. \u2018psychic oracle cards\u2019"}, "doc.snowplow_normalize.col_mkt_medium": {"name": "col_mkt_medium", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_mkt_medium", "block_contents": "Type of traffic source e.g. \u2018cpc\u2019, \u2018affiliate\u2019, \u2018organic\u2019, \u2018social\u2019"}, "doc.snowplow_normalize.col_mkt_source": {"name": "col_mkt_source", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_mkt_source", "block_contents": "The company / website where the traffic came from e.g. \u2018Google\u2019, \u2018Facebook\u2019"}, "doc.snowplow_normalize.col_mkt_term": {"name": "col_mkt_term", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_mkt_term", "block_contents": "Any keywords associated with the referrer e.g. \u2018new age tarot decks\u2019"}, "doc.snowplow_normalize.col_mkt_content": {"name": "col_mkt_content", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_mkt_content", "block_contents": "The content of the ad. (Or an ID so that it can be looked up.) e.g. 13894723"}, "doc.snowplow_normalize.col_mkt_campaign": {"name": "col_mkt_campaign", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_mkt_campaign", "block_contents": "The campaign ID e.g. \u2018diageo-123\u2019"}, "doc.snowplow_normalize.col_se_category": {"name": "col_se_category", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_se_category", "block_contents": "Category of event e.g. \u2018ecomm\u2019, \u2018video\u2019"}, "doc.snowplow_normalize.col_se_action": {"name": "col_se_action", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_se_action", "block_contents": "Action performed / event name e.g. \u2018add-to-basket\u2019, \u2018play-video\u2019"}, "doc.snowplow_normalize.col_se_label": {"name": "col_se_label", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_se_label", "block_contents": "The object of the action e.g. the ID of the video played or SKU of the product added-to-basket e.g. \u2018pbz00123\u2019"}, "doc.snowplow_normalize.col_se_property": {"name": "col_se_property", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_se_property", "block_contents": "A property associated with the object of the action e.g. \u2018HD\u2019, \u2018large\u2019"}, "doc.snowplow_normalize.col_se_value": {"name": "col_se_value", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_se_value", "block_contents": "A value associated with the event / action e.g. the value of goods added-to-basket e.g. 9.99"}, "doc.snowplow_normalize.col_tr_orderid": {"name": "col_tr_orderid", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_orderid", "block_contents": "Order ID e.g. \u2018#134\u2019"}, "doc.snowplow_normalize.col_tr_affiliation": {"name": "col_tr_affiliation", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_affiliation", "block_contents": "Transaction affiliation (e.g. store where sale took place) e.g. \u2018web\u2019"}, "doc.snowplow_normalize.col_tr_total": {"name": "col_tr_total", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_total", "block_contents": "Total transaction value e.g. 12.99"}, "doc.snowplow_normalize.col_tr_tax": {"name": "col_tr_tax", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_tax", "block_contents": "Total tax included in transaction value e.g. 3.00"}, "doc.snowplow_normalize.col_tr_shipping": {"name": "col_tr_shipping", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_shipping", "block_contents": "Delivery cost charged e.g. 0.00"}, "doc.snowplow_normalize.col_tr_city": {"name": "col_tr_city", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_city", "block_contents": "Delivery address, city e.g. \u2018London\u2019"}, "doc.snowplow_normalize.col_tr_state": {"name": "col_tr_state", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_state", "block_contents": "Delivery address, state e.g. \u2018Washington\u2019"}, "doc.snowplow_normalize.col_tr_country": {"name": "col_tr_country", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_country", "block_contents": "Delivery address, country e.g. \u2018France\u2019"}, "doc.snowplow_normalize.col_ti_orderid": {"name": "col_ti_orderid", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ti_orderid", "block_contents": "Order ID e.g. \u2018#134\u2019"}, "doc.snowplow_normalize.col_ti_sku": {"name": "col_ti_sku", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ti_sku", "block_contents": "Product SKU e.g. \u2018pbz00123\u2019"}, "doc.snowplow_normalize.col_ti_name": {"name": "col_ti_name", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ti_name", "block_contents": "Product name e.g. \u2018Cone pendulum\u2019"}, "doc.snowplow_normalize.col_ti_category": {"name": "col_ti_category", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ti_category", "block_contents": "Product category e.g. \u2018New Age\u2019"}, "doc.snowplow_normalize.col_ti_price": {"name": "col_ti_price", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ti_price", "block_contents": "Product unit price e.g. 9.99"}, "doc.snowplow_normalize.col_ti_quantity": {"name": "col_ti_quantity", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ti_quantity", "block_contents": "Number of product in transaction e.g. 2"}, "doc.snowplow_normalize.col_pp_xoffset_min": {"name": "col_pp_xoffset_min", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_pp_xoffset_min", "block_contents": "Minimum page x offset seen in the last ping period e.g. 0"}, "doc.snowplow_normalize.col_pp_xoffset_max": {"name": "col_pp_xoffset_max", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_pp_xoffset_max", "block_contents": "Maximum page x offset seen in the last ping period e.g. 100"}, "doc.snowplow_normalize.col_pp_yoffset_min": {"name": "col_pp_yoffset_min", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_pp_yoffset_min", "block_contents": "Minimum page y offset seen in the last ping period e.g. 0"}, "doc.snowplow_normalize.col_pp_yoffset_max": {"name": "col_pp_yoffset_max", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_pp_yoffset_max", "block_contents": "Maximum page y offset seen in the last ping period e.g. 200"}, "doc.snowplow_normalize.col_useragent": {"name": "col_useragent", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_useragent", "block_contents": "Raw useragent"}, "doc.snowplow_normalize.col_br_name": {"name": "col_br_name", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_name", "block_contents": "Browser name e.g. \u2018Firefox 12\u2019"}, "doc.snowplow_normalize.col_br_family": {"name": "col_br_family", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_family", "block_contents": "Browser family e.g. \u2018Firefox\u2019"}, "doc.snowplow_normalize.col_br_version": {"name": "col_br_version", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_version", "block_contents": "Browser version e.g. \u201812.0\u2019"}, "doc.snowplow_normalize.col_br_type": {"name": "col_br_type", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_type", "block_contents": "Browser type e.g. \u2018Browser\u2019"}, "doc.snowplow_normalize.col_br_renderengine": {"name": "col_br_renderengine", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_renderengine", "block_contents": "Browser rendering engine e.g. \u2018GECKO\u2019"}, "doc.snowplow_normalize.col_br_lang": {"name": "col_br_lang", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_lang", "block_contents": "Language the browser is set to e.g. \u2018en-GB\u2019"}, "doc.snowplow_normalize.col_br_features_pdf": {"name": "col_br_features_pdf", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_features_pdf", "block_contents": "Whether the browser recognizes PDFs e.g. True"}, "doc.snowplow_normalize.col_br_features_flash": {"name": "col_br_features_flash", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_features_flash", "block_contents": "Whether Flash is installed e.g. True"}, "doc.snowplow_normalize.col_br_features_java": {"name": "col_br_features_java", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_features_java", "block_contents": "Whether Java is installed e.g. True"}, "doc.snowplow_normalize.col_br_features_director": {"name": "col_br_features_director", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_features_director", "block_contents": "Whether Adobe Shockwave is installed e.g. True"}, "doc.snowplow_normalize.col_br_features_quicktime": {"name": "col_br_features_quicktime", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_features_quicktime", "block_contents": "Whether QuickTime is installed e.g. True"}, "doc.snowplow_normalize.col_br_features_realplayer": {"name": "col_br_features_realplayer", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_features_realplayer", "block_contents": "Whether RealPlayer is installed e.g. True"}, "doc.snowplow_normalize.col_br_features_windowsmedia": {"name": "col_br_features_windowsmedia", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_features_windowsmedia", "block_contents": "Whether mplayer2 is installed e.g. True"}, "doc.snowplow_normalize.col_br_features_gears": {"name": "col_br_features_gears", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_features_gears", "block_contents": "Whether Google Gears is installed e.g. True"}, "doc.snowplow_normalize.col_br_features_silverlight": {"name": "col_br_features_silverlight", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_features_silverlight", "block_contents": "Whether Microsoft Silverlight is installed e.g. True"}, "doc.snowplow_normalize.col_br_cookies": {"name": "col_br_cookies", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_cookies", "block_contents": "Whether cookies are enabled e.g. True"}, "doc.snowplow_normalize.col_br_colordepth": {"name": "col_br_colordepth", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_colordepth", "block_contents": "Bit depth of the browser color palette e.g. 24"}, "doc.snowplow_normalize.col_br_viewwidth": {"name": "col_br_viewwidth", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_viewwidth", "block_contents": "Viewport width e.g. 1000"}, "doc.snowplow_normalize.col_br_viewheight": {"name": "col_br_viewheight", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_br_viewheight", "block_contents": "Viewport height e.g. 1000"}, "doc.snowplow_normalize.col_os_name": {"name": "col_os_name", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_os_name", "block_contents": "Name of operating system e.g. \u2018Android\u2019"}, "doc.snowplow_normalize.col_os_family": {"name": "col_os_family", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_os_family", "block_contents": "Operating system family e.g. \u2018Linux\u2019"}, "doc.snowplow_normalize.col_os_manufacturer": {"name": "col_os_manufacturer", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_os_manufacturer", "block_contents": "Company responsible for OS e.g. \u2018Apple\u2019"}, "doc.snowplow_normalize.col_os_timezone": {"name": "col_os_timezone", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_os_timezone", "block_contents": "Client operating system timezone e.g. \u2018Europe/London\u2019"}, "doc.snowplow_normalize.col_dvce_type": {"name": "col_dvce_type", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_dvce_type", "block_contents": "Type of device e.g. \u2018Computer\u2019"}, "doc.snowplow_normalize.col_dvce_ismobile": {"name": "col_dvce_ismobile", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_dvce_ismobile", "block_contents": "Is the device mobile? e.g. True"}, "doc.snowplow_normalize.col_dvce_screenwidth": {"name": "col_dvce_screenwidth", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_dvce_screenwidth", "block_contents": "Screen width in pixels e.g. 1900"}, "doc.snowplow_normalize.col_dvce_screenheight": {"name": "col_dvce_screenheight", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_dvce_screenheight", "block_contents": "Screen height in pixels e.g. 1024"}, "doc.snowplow_normalize.col_doc_charset": {"name": "col_doc_charset", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_doc_charset", "block_contents": "The page\u2019s character encoding e.g. , \u2018UTF-8\u2019"}, "doc.snowplow_normalize.col_doc_width": {"name": "col_doc_width", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_doc_width", "block_contents": "The page\u2019s width in pixels e.g. 1024"}, "doc.snowplow_normalize.col_doc_height": {"name": "col_doc_height", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_doc_height", "block_contents": "The page\u2019s height in pixels e.g. 3000"}, "doc.snowplow_normalize.col_tr_currency": {"name": "col_tr_currency", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_currency", "block_contents": "Currency e.g. \u2018USD\u2019"}, "doc.snowplow_normalize.col_tr_total_base": {"name": "col_tr_total_base", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_total_base", "block_contents": "Total in base currency e.g. 12.99"}, "doc.snowplow_normalize.col_tr_tax_base": {"name": "col_tr_tax_base", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_tax_base", "block_contents": "Total tax in base currency e.g. 3.00"}, "doc.snowplow_normalize.col_tr_shipping_base": {"name": "col_tr_shipping_base", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_tr_shipping_base", "block_contents": "decimal  Delivery cost in base currency e.g. 0.00"}, "doc.snowplow_normalize.col_ti_currency": {"name": "col_ti_currency", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ti_currency", "block_contents": "Currency e.g. \u2018EUR\u2019"}, "doc.snowplow_normalize.col_ti_price_base": {"name": "col_ti_price_base", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ti_price_base", "block_contents": "decimal Price in base currency e.g. 9.99"}, "doc.snowplow_normalize.col_base_currency": {"name": "col_base_currency", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_base_currency", "block_contents": "Reporting currency e.g. \u2018GBP\u2019"}, "doc.snowplow_normalize.col_geo_timezone": {"name": "col_geo_timezone", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_geo_timezone", "block_contents": "Visitor timezone name e.g. \u2018Europe/London\u2019"}, "doc.snowplow_normalize.col_mkt_clickid": {"name": "col_mkt_clickid", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_mkt_clickid", "block_contents": "The click ID e.g. \u2018ac3d8e459\u2019"}, "doc.snowplow_normalize.col_mkt_network": {"name": "col_mkt_network", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_mkt_network", "block_contents": "The ad network to which the click ID belongs e.g. \u2018DoubleClick\u2019"}, "doc.snowplow_normalize.col_etl_tags": {"name": "col_etl_tags", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_etl_tags", "block_contents": "JSON of tags for this ETL run e.g. \u201c[\u2018prod\u2019]\u201d"}, "doc.snowplow_normalize.col_dvce_sent_tstamp": {"name": "col_dvce_sent_tstamp", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_dvce_sent_tstamp", "block_contents": "When the event was sent by the client device e.g. \u20182013-11-26 00:03:58.032\u2019"}, "doc.snowplow_normalize.col_refr_domain_userid": {"name": "col_refr_domain_userid", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_refr_domain_userid", "block_contents": "The Snowplow domain_userid of the referring website e.g. \u2018bc2e92ec6c204a14\u2019"}, "doc.snowplow_normalize.col_refr_dvce_tstamp": {"name": "col_refr_dvce_tstamp", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_refr_dvce_tstamp", "block_contents": "The time of attaching the domain_userid to the inbound link e.g. \u20182013-11-26 00:02:05\u2019"}, "doc.snowplow_normalize.col_domain_sessionid": {"name": "col_domain_sessionid", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_domain_sessionid", "block_contents": "A visit / session UUID e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019"}, "doc.snowplow_normalize.col_derived_tstamp": {"name": "col_derived_tstamp", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_derived_tstamp", "block_contents": "Timestamp making allowance for innaccurate device clock e.g. \u20182013-11-26 00:02:04\u2019"}, "doc.snowplow_normalize.col_event_vendor": {"name": "col_event_vendor", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_event_vendor", "block_contents": "Who defined the event e.g. \u2018com.acme\u2019"}, "doc.snowplow_normalize.col_event_name": {"name": "col_event_name", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_event_name", "block_contents": "Event name e.g. \u2018link_click\u2019"}, "doc.snowplow_normalize.col_event_format": {"name": "col_event_format", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_event_format", "block_contents": "Format for event e.g. \u2018jsonschema\u2019"}, "doc.snowplow_normalize.col_event_version": {"name": "col_event_version", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_event_version", "block_contents": "Version of event schema e.g. \u20181-0-2\u2019"}, "doc.snowplow_normalize.col_event_fingerprint": {"name": "col_event_fingerprint", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_event_fingerprint", "block_contents": "Hash client-set event fields e.g. AADCE520E20C2899F4CED228A79A3083"}, "doc.snowplow_normalize.col_true_tstamp": {"name": "col_true_tstamp", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_true_tstamp", "block_contents": "User-set \u201ctrue timestamp\u201d for the event e.g. \u20182013-11-26 00:02:04\u2019"}, "doc.snowplow_normalize.col_page_view_id": {"name": "col_page_view_id", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_page_view_id", "block_contents": "A UUID for each page view e.g. \u2018c6ef3124-b53a-4b13-a233-0088f79dcbcb\u2019"}, "doc.snowplow_normalize.col_category": {"name": "col_category", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_category", "block_contents": "Category based on activity if the IP/UA is a spider or robot, BROWSER otherwise"}, "doc.snowplow_normalize.col_primary_impact": {"name": "col_primary_impact", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_primary_impact", "block_contents": "Whether the spider or robot would affect page impression measurement, ad impression measurement, both or none"}, "doc.snowplow_normalize.col_reason": {"name": "col_reason", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_reason", "block_contents": "Type of failed check if the IP/UA is a spider or robot, PASSED_ALL otherwise"}, "doc.snowplow_normalize.col_spider_or_robot": {"name": "col_spider_or_robot", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_spider_or_robot", "block_contents": "True if the IP address or user agent checked against the list is a spider or robot, false otherwise"}, "doc.snowplow_normalize.col_device_family": {"name": "col_device_family", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_device_family", "block_contents": "Device type"}, "doc.snowplow_normalize.col_ua_os_family": {"name": "col_ua_os_family", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_ua_os_family", "block_contents": "Operation system name"}, "doc.snowplow_normalize.col_useragent_family": {"name": "col_useragent_family", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_useragent_family", "block_contents": "Useragent family (browser) name"}, "doc.snowplow_normalize.col_os_major": {"name": "col_os_major", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_os_major", "block_contents": "Operation system major version"}, "doc.snowplow_normalize.col_os_minor": {"name": "col_os_minor", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_os_minor", "block_contents": "Operation system minor version"}, "doc.snowplow_normalize.col_os_patch": {"name": "col_os_patch", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_os_patch", "block_contents": "Operation system patch version"}, "doc.snowplow_normalize.col_os_patch_minor": {"name": "col_os_patch_minor", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_os_patch_minor", "block_contents": "Operation system patch minor version"}, "doc.snowplow_normalize.col_os_version": {"name": "col_os_version", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_os_version", "block_contents": "Operation system full version"}, "doc.snowplow_normalize.col_useragent_major": {"name": "col_useragent_major", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_useragent_major", "block_contents": "Useragent major version"}, "doc.snowplow_normalize.col_useragent_minor": {"name": "col_useragent_minor", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_useragent_minor", "block_contents": "Useragent minor version"}, "doc.snowplow_normalize.col_useragent_patch": {"name": "col_useragent_patch", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_useragent_patch", "block_contents": "Useragent patch version"}, "doc.snowplow_normalize.col_useragent_version": {"name": "col_useragent_version", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_useragent_version", "block_contents": "Full version of the useragent"}, "doc.snowplow_normalize.col_device_class": {"name": "col_device_class", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_device_class", "block_contents": "Class of device e.g. phone"}, "doc.snowplow_normalize.col_agent_class": {"name": "col_agent_class", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_agent_class", "block_contents": "Class of agent e.g. browser"}, "doc.snowplow_normalize.col_agent_name": {"name": "col_agent_name", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_agent_name", "block_contents": "Name of agent e.g. Chrome"}, "doc.snowplow_normalize.col_agent_name_version": {"name": "col_agent_name_version", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_agent_name_version", "block_contents": "Name and version of agent e.g. Chrome 53.0.2785.124"}, "doc.snowplow_normalize.col_agent_name_version_major": {"name": "col_agent_name_version_major", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_agent_name_version_major", "block_contents": "Name and major version of agent e.g. Chrome 53"}, "doc.snowplow_normalize.col_agent_version": {"name": "col_agent_version", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_agent_version", "block_contents": "Version of agent e.g. 53.0.2785.124"}, "doc.snowplow_normalize.col_agent_version_major": {"name": "col_agent_version_major", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_agent_version_major", "block_contents": "Major version of agent e.g. 53"}, "doc.snowplow_normalize.col_device_brand": {"name": "col_device_brand", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_device_brand", "block_contents": "Brand of device e.g. Google"}, "doc.snowplow_normalize.col_device_name": {"name": "col_device_name", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_device_name", "block_contents": "Name of device e.g. Google Nexus 6"}, "doc.snowplow_normalize.col_device_version": {"name": "col_device_version", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_device_version", "block_contents": "Version of device e.g. 6.0"}, "doc.snowplow_normalize.col_layout_engine_class": {"name": "col_layout_engine_class", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_layout_engine_class", "block_contents": "Class of layout engine e.g. Browser"}, "doc.snowplow_normalize.col_layout_engine_name": {"name": "col_layout_engine_name", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_layout_engine_name", "block_contents": "Name of layout engine e.g. Blink"}, "doc.snowplow_normalize.col_layout_engine_name_version": {"name": "col_layout_engine_name_version", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_layout_engine_name_version", "block_contents": "Name and version of layout engine e.g. Blink 53.0"}, "doc.snowplow_normalize.col_layout_engine_name_version_major": {"name": "col_layout_engine_name_version_major", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_layout_engine_name_version_major", "block_contents": "Name and major version of layout engine e.g. Blink 53"}, "doc.snowplow_normalize.col_layout_engine_version": {"name": "col_layout_engine_version", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_layout_engine_version", "block_contents": "Version of layout engine e.g. 53.0"}, "doc.snowplow_normalize.col_layout_engine_version_major": {"name": "col_layout_engine_version_major", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_layout_engine_version_major", "block_contents": "Major version of layout engine e.g. 53"}, "doc.snowplow_normalize.col_operating_system_class": {"name": "col_operating_system_class", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_operating_system_class", "block_contents": "Class of the OS e.g. Mobile"}, "doc.snowplow_normalize.col_operating_system_name": {"name": "col_operating_system_name", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_operating_system_name", "block_contents": "Name of the OS e.g. Android"}, "doc.snowplow_normalize.col_operating_system_name_version": {"name": "col_operating_system_name_version", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_operating_system_name_version", "block_contents": "Name and version of the OS e.g. Android 7.0"}, "doc.snowplow_normalize.col_operating_system_version": {"name": "col_operating_system_version", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_operating_system_version", "block_contents": "Version of the OS e.g. 7.0"}, "doc.snowplow_normalize.col_model_tstamp": {"name": "col_model_tstamp", "resource_type": "doc", "package_name": "snowplow_normalize", "path": "markdown/snowplow_normalize_common_cols.md", "original_file_path": "docs/markdown/snowplow_normalize_common_cols.md", "unique_id": "doc.snowplow_normalize.col_model_tstamp", "block_contents": "The current timestamp when the model processed this row."}, "doc.dbt_segment.segment_web_user_stitching": {"name": "segment_web_user_stitching", "resource_type": "doc", "package_name": "dbt_segment", "path": "sessionization/docs.md", "original_file_path": "models/sessionization/docs.md", "unique_id": "doc.dbt_segment.segment_web_user_stitching", "block_contents": "This model performs \"user stitching\" on top of web event data. User stitching is the process of tying all events associated with a cookie to the same user_id, and solves a common problem in event analytics that users are only identified part way through their activity stream. This model returns a single user_id for every anonymous_id, and is later joined in to build a `blended_user_id` field, that acts as the primary user identifier for all sessions."}, "doc.dbt_segment.segment_web_page_views__sessionized": {"name": "segment_web_page_views__sessionized", "resource_type": "doc", "package_name": "dbt_segment", "path": "sessionization/docs.md", "original_file_path": "models/sessionization/docs.md", "unique_id": "doc.dbt_segment.segment_web_page_views__sessionized", "block_contents": "The purpose of this model is to assign a `session_id` to page views. The business logic of how this is done is that any period of inactivity of 30 minutes or more resets the session, and any subsequent page views are assigned a new `session_id`.\n\nThe implementation of this logic is rather involved, and requires multiple CTEs. Comments have been added to the source to describe the purpose of the CTEs that are more esoteric."}, "doc.dbt_segment.segment_web_sessions__initial": {"name": "segment_web_sessions__initial", "resource_type": "doc", "package_name": "dbt_segment", "path": "sessionization/docs.md", "original_file_path": "models/sessionization/docs.md", "unique_id": "doc.dbt_segment.segment_web_sessions__initial", "block_contents": "This model performs the aggregation of page views into sessions. The `session_id` having already been calculated in `segment_web_page_views__sessionized`, this model simply calls a bunch of window functions to grab the first or last value of a given field and store it at the session level."}, "doc.dbt_segment.segment_web_sessions__stitched": {"name": "segment_web_sessions__stitched", "resource_type": "doc", "package_name": "dbt_segment", "path": "sessionization/docs.md", "original_file_path": "models/sessionization/docs.md", "unique_id": "doc.dbt_segment.segment_web_sessions__stitched", "block_contents": "This model joins initial session data with user stitching to get the field `blended_user_id`, the id for a user across all devices that they can be identified on. This logic is broken out from other models because, while incremental, it will frequently need to be rebuilt from scratch: this is because the user stitching process can change the `blended_user_id` values for historical sessions.\n\nIt is recommended to typically run this model in its default configuration (incrementally) but on some regular basis to do a `dbt run --full-refresh --models segment_web_sessions__stitched+` so that this model and downstream models get rebuilt."}, "doc.dbt_segment.segment_web_sessions": {"name": "segment_web_sessions", "resource_type": "doc", "package_name": "dbt_segment", "path": "sessionization/docs.md", "original_file_path": "models/sessionization/docs.md", "unique_id": "doc.dbt_segment.segment_web_sessions", "block_contents": "The purpose of this model is to expose a single web session, derived from Segment web events. Sessions are the most common way that analysis of web visitor behavior is conducted, and although Segment doesn't natively output session data, this model uses standard logic to create sessions out of page view events.\n\nA session is meant to represent a single instance of web activity where a user is actively browsing a website. In this case, we are demarcating sessions by 30 minute windows of inactivity: if there is 30 minutes of inactivity between two page views, the second page view begins a new session. Additionally, page views across different devices will always be tied to different sessions.\n\nThe logic implemented in this particular model is responsible for incrementally calculating a user's session number; the core sessionization logic is done in upstream models."}, "doc.dbt_segment.segment_web_page_views": {"name": "segment_web_page_views", "resource_type": "doc", "package_name": "dbt_segment", "path": "base/docs.md", "original_file_path": "models/base/docs.md", "unique_id": "doc.dbt_segment.segment_web_page_views", "block_contents": "This is a base model for Segment's web page views table. It does some straightforward renaming and parsing of Segment raw data in this table.\nIf a page view id has multiple entries in the source table then deduplication is done to keep the row with the earliest `received_at` timestamp."}, "doc.snowplow_utils.macro_app_id_filter": {"name": "macro_app_id_filter", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_app_id_filter", "block_contents": "Generates a `sql` filter for the values in `app_ids` applied on the `app_id` column.\n\n#### Returns\n\n`app_id in (...)` if any `app_ids` are provided, otherwise `true`.\n\n#### Usage\n\n```sql\napp_id_filter(['web', 'mobile', 'news'])\n\n-- returns\napp_id in ('web', 'mobile', 'news')\n```"}, "doc.snowplow_utils.macro_get_columns_in_relation_by_column_prefix": {"name": "macro_get_columns_in_relation_by_column_prefix", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_get_columns_in_relation_by_column_prefix", "block_contents": "This macro returns an array of column objects within a relation that start with the given column prefix. This is useful when you have multiple versions of a column within a table and want to dynamically identify all versions.\n\n#### Returns\n\nAn array of (column objects)[https://docs.getdbt.com/reference/dbt-classes#column]. The name of each column can be accessed with the name property.\n\n#### Usage\n\n```sql\nget_columns_in_relation_by_column_prefix(ref('snowplow_web_base_events_this_run'), 'domain')\n\n-- returns\n['domain_sessionid', 'domain_userid', 'domain_sessionidx',...]\n\n{% set matched_columns = snowplow_utils.get_columns_in_relation_by_column_prefix(\n                    relation=ref('snowplow_web_base_events_this_run'),\n                    column_prefix='custom_context_1_0_'\n                    ) %}\n\n{% for column in matched_columns %}\n{{ column.name }}\n{% endfor %}\n\n# Renders to something like:\n'custom_context_1_0_1'\n'custom_context_1_0_2'\n'custom_context_1_0_3'\n\n```"}, "doc.snowplow_utils.macro_get_schemas_by_pattern": {"name": "macro_get_schemas_by_pattern", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_get_schemas_by_pattern", "block_contents": "Given a pattern, finds and returns all schemas that match that pattern. Note that for databricks any single character matches (`_`) will not be properly translated due to databricks using a regex expression instead of a SQL `like` clause.\n\n      #### Returns\n\n      A list of schemas that match the pattern provided."}, "doc.snowplow_utils.macro_get_value_by_target_type": {"name": "macro_get_value_by_target_type", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_get_value_by_target_type", "block_contents": "Returns the value provided based on the `target.type`. This is useful when you need a different value based on which warehouse is being used e.g. cluster fields or partition keys.\n\n#### Returns\n\nThe appropriate value for the target warehouse type, or an error if not an expected target type."}, "doc.snowplow_utils.macro_get_value_by_target": {"name": "macro_get_value_by_target", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_get_value_by_target", "block_contents": "This macro is designed to dynamically return values based on the target (`target.name`) you are running against. Your target names are defined in your [profiles.yml](https://docs.getdbt.com/reference/profiles.yml) file. This can be useful for dynamically changing variables within your project, depending on whether you are running in dev or prod.\n\n#### Returns\n\nThe value relevant to the target environment\n\n#### Usage\n\n```yml\n\n# dbt_project.yml\n...\nvars:\nsnowplow_web:\n    snowplow__backfill_limit_days: \"{{ snowplow_utils.get_value_by_target(dev_value=1, default_value=30, dev_target_name='dev') }}\"\n\n```"}, "doc.snowplow_utils.macro_is_run_with_new_events": {"name": "macro_is_run_with_new_events", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_is_run_with_new_events", "block_contents": "This macro is designed for use with Snowplow data modelling packages like `snowplow-web`. It can be used in any incremental models, to effectively block the incremental model from being updated with old data which it has already consumed. This saves cost as well as preventing historical data from being overwritten with partially complete data (due to a batch back-fill for instance).\n\nThe macro utilizes the `snowplow_[platform]_incremental_manifest` table to determine whether the model from which the macro is called, i.e. `{{ this }}`, has already consumed the data in the given run. If it has, it returns `false`. If the data in the run contains new data, `true` is returned.\n\nFor the sessions lifecycle identifier it does not use the manifest as this table is not included in it.\n\n#### Returns\n\n`true` if the run contains new events previously not consumed by `this`, `false` otherwise.\n\n#### Usage\n\n```sql\n\n{{\nconfig(\n    materialized='incremental',\n    unique_key='screen_view_id',\n    upsert_date_key='start_tstamp'\n)\n}}\n\nselect\n...\n\nfrom {{ ref('snowplow_mobile_base_events_this_run' ) }}\nwhere {{ snowplow_utils.is_run_with_new_events('snowplow_mobile') }} --returns false if run doesn't contain new events.\n\n```"}, "doc.snowplow_utils.macro_log_message": {"name": "macro_log_message", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_log_message", "block_contents": "A wrapper macro for the `dbt_utils.pretty_log_format` using the `snowplow__has_log_enabled` to determine if the log is also printed to the stdout."}, "doc.snowplow_utils.macro_post_ci_cleanup": {"name": "macro_post_ci_cleanup", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_post_ci_cleanup", "block_contents": "This macro deletes all schemas that start with the specified `schema_pattern`, mostly for use before/after CI testing to ensure a clean start and removal of data after CI tests."}, "doc.snowplow_utils.macro_print_list": {"name": "macro_print_list", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_print_list", "block_contents": "Prints an array as a `seperator` separated quoted list.\n\n#### Returns\n\nSeparated output of items in the list, quoted."}, "doc.snowplow_utils.macro_return_limits_from_model": {"name": "macro_return_limits_from_model", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_return_limits_from_model", "block_contents": "Calculates and returns the minimum (lower) and maximum (upper) values of specified columns within the specified table. Useful to find ranges of a column within a table.\n\n#### Returns\n\nA list of two objects, the lower and upper values from the columns in the model"}, "doc.snowplow_utils.macro_set_query_tag": {"name": "macro_set_query_tag", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_set_query_tag", "block_contents": "This macro takes a provided statement as argument and generates the SQL command to set this statement as the query_tag for Snowflake databases, and does nothing otherwise. It can be used to safely set the query_tag regardless of database type.\n\n#### Returns\n\nAn alter session command set to the `query_tag` to the `statement` for Snowflake, otherwise nothing\n\n#### Usage\n\n```sql\n\n{{ snowplow_utils.set_query_tag('snowplow_query_tag') }}\n\n```"}, "doc.snowplow_utils.macro_n_timedeltas_ago": {"name": "macro_n_timedeltas_ago", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_n_timedeltas_ago", "block_contents": "This macro takes the current timestamp and subtracts `n` units, as defined by the `timedelta_attribute`, from it. This is achieved using the Python datetime module, rather than querying your database. By combining this with the `get_value_by_target` macro, you can dynamically set dates depending on your environment.\n\n#### Returns\n\nCurrent timestamp minus `n` units.\n\n#### Usage\n\n```sql\n\n{{ snowplow_utils.n_timedeltas_ago(1, 'weeks') }}\n\n```"}, "doc.snowplow_utils.macro_get_string_agg": {"name": "macro_get_string_agg", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_get_string_agg", "block_contents": "This macro takes care of harmonising cross-db `list_agg`, `string_agg` type functions. These are aggregate functions (i.e. to be used with a `group by`) that take values from grouped rows and concatenates them into a single string. This macro supports ordering values by an arbitrary column and ensuring unique values (i.e. applying distinct).\n\nNote that databricks does not have list/string_agg function so a more complex expression is used.\n\n#### Returns\n\nThe data warehouse appropriate sql to perform a list/string_agg. \n\n#### Usage\n\n```sql\nselect\n...\n{{ snowplow_utils.get_string_agg('base_column', 'column_prefix', ';', 'order_by_col', sort_numeric=true, order_by_column_prefix='order_by_column_prefix', is_distict=True, order_desc=True)  }},\n...\nfrom ...\ngroup by ...\n\n```"}, "doc.snowplow_utils.macro_get_split_to_array": {"name": "macro_get_split_to_array", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_get_split_to_array", "block_contents": "This macro takes care of harmonising cross-db split to array type functions. The macro supports a custom delimiter if your string is not delimited by a comma with no space (default).\n\n#### Returns\n\nThe data warehouse appropriate sql to perform a split to array. \n\n#### Usage\n\n```sql\nselect\n...\n{{ snowplow_utils.get_split_to_array('my_string_column', 'a', ', ') }}\n...\nfrom ... a\n\n```"}, "doc.snowplow_utils.macro_get_array_to_string": {"name": "macro_get_array_to_string", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_get_array_to_string", "block_contents": "This macro takes care of harmonising cross-db array to string type functions. The macro supports a custom delimiter if you don't want to use a comma with no space (default).\n\n#### Returns\n\nThe data warehouse appropriate sql to convert an array to a string. \n\n#### Usage\n\n```sql\nselect\n...\n{{ snowplow_utils.get_array_to_string('my_array_column', 'a', ', ') }}\n...\nfrom ... a\n\n```"}, "doc.snowplow_utils.macro_get_sde_or_context": {"name": "macro_get_sde_or_context", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_get_sde_or_context", "block_contents": "This macro exists for Redshift and Postgres users to more easily select their self-describing event and context tables and apply de-duplication before joining onto their (already de-duplicated) events table. The `root_id` and `root_tstamp` columns are by default returned as `schema_name_id` and `schema_name_tstamp` respectively, where `schema_name` is the value in the `schema_name` column of the table. In the case where multiple entities may be sent in the context (e.g. products in a search results), you should set the `single_entity` argument to `false` and use an additional criteria in your join (see [the snowplow docs](https://docs.snowplow.io/docs/modeling-your-data/modeling-your-data-with-dbt/dbt-advanced-usage/dbt-duplicates/) for further details).\n\nNote that is the responsibility of the user to ensure they have no duplicate names when using this macro multiple times or when a schema column name matches on already in the events table. In this case the `prefix` argument should be used and aliasing applied to the output.\n\n#### Returns\n\nCTE sql for deduplicating records from the schema table, without the schema details columns. The final CTE is the name of the original table.\n\n#### Usage\n\nWith at most one entity per context:\n```sql\nwith {{ snowplow_utils.get_sde_or_context('atomic', 'nl_basjes_yauaa_context_1', \"'2023-01-01'\", \"'2023-02-01'\")}}\n\nselect\n...\nfrom my_events_table a\nleft join nl_basjes_yauaa_context_1 b on \n    a.event_id = b.yauaa_context__id \n    and a.collector_tstamp = b.yauaa_context__tstamp\n```\nWith the possibility of multiple entities per context, your events table must already be de-duped but still have a field with the number of duplicates:\n```sql\nwith {{ snowplow_utils.get_sde_or_context('atomic', 'nl_basjes_yauaa_context_1', \"'2023-01-01'\", \"'2023-02-01'\", single_entity = false)}}\n\nselect\n...,\ncount(*) over (partition by a.event_id) as duplicate_count\nfrom my_events_table a\nleft join nl_basjes_yauaa_context_1 b on \n    a.event_id = b.yauaa_context__id \n    and a.collector_tstamp = b.yauaa_context__tstamp\n    and mod(b.yauaa_context__index, a.duplicate_count) = 0\n```"}, "doc.snowplow_utils.macro_get_field": {"name": "macro_get_field", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_get_field", "block_contents": "This macro exists to make it easier to extract a field from our `unstruct_` and `contexts_` type columns for users in Snowflake, Databricks, and BigQuery (using a wildcard version number is only possible for BigQuery e.g. `column_name = 'contexts_nl_basjes_yauaa_context_1_*'`). The macro can handle type casting and selecting from arrays.\n\n#### Returns\n\nSQL snippet to select the field specified from the column\n\n#### Usage\n\nExtracting a single field\n```sql\n\nselect\n{{ snowplow_utils.get_field(column_name = 'contexts_nl_basjes_yauaa_context_1', \n                            field_name = 'agent_class', \n                            table_alias = 'a',\n                            type = 'string',\n                            array_index = 0)}} as yauaa_agent_class\nfrom \n    my_events_table a\n\n```\n\nExtracting multiple fields\n```sql\n\nselect\n{% for field in [('field1', 'string'), ('field2', 'numeric'), ...] %}\n  {{ snowplow_utils.get_field(column_name = 'contexts_nl_basjes_yauaa_context_1', \n                            field_name = field[0], \n                            table_alias = 'a',\n                            type = field[1],\n                            array_index = 0)}} as {{ field[0] }}\n{% endfor %}\n\nfrom \n    my_events_table a\n\n```"}, "doc.snowplow_utils.macro_parse_agg_dict": {"name": "macro_parse_agg_dict", "resource_type": "doc", "package_name": "snowplow_utils", "path": "markdown/snowplow_utils_macro_docs.md", "original_file_path": "docs/markdown/snowplow_utils_macro_docs.md", "unique_id": "doc.snowplow_utils.macro_parse_agg_dict", "block_contents": "This macro allows you to provide aggregations in a consistent and restricted way to avoid having to write the sql yourself. This is mostly for use within other packages to allow aggregations but not allow the user to add arbitrary SQL.\n\n#### Returns\n\nSQL snippet for the specified aggregation, aliased.\n\n#### Usage\n\nExtracting a single field\n```sql\n\nselect\n{{ snowplow_utils.parse_agg_dict({'type': 'countd', 'field': 'event_name', 'alias': 'distinct_event_types'})}}\nfrom \n    my_events_table a\n\n```"}}, "exposures": {}, "metrics": {"metric.dbt_octafx.events_cnt": {"name": "events_cnt", "resource_type": "metric", "package_name": "dbt_octafx", "path": "metrics/int_bloomreach_events_semantic.yml", "original_file_path": "models/metrics/int_bloomreach_events_semantic.yml", "unique_id": "metric.dbt_octafx.events_cnt", "fqn": ["dbt_octafx", "metrics", "events_cnt"], "description": "", "label": "total count of bloomreach events", "type": "simple", "type_params": {"measure": {"name": "events_cnt", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}, "input_measures": [{"name": "events_cnt", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [], "conversion_type_params": null}, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["semantic_model.dbt_octafx.bloomreach_events"]}, "refs": [], "metrics": [], "created_at": 1714072383.893943, "group": null}, "metric.dbt_octafx.pushes_cnt": {"name": "pushes_cnt", "resource_type": "metric", "package_name": "dbt_octafx", "path": "metrics/int_bloomreach_events_semantic.yml", "original_file_path": "models/metrics/int_bloomreach_events_semantic.yml", "unique_id": "metric.dbt_octafx.pushes_cnt", "fqn": ["dbt_octafx", "metrics", "pushes_cnt"], "description": "", "label": "total count of push events", "type": "simple", "type_params": {"measure": {"name": "events_cnt", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}, "input_measures": [{"name": "events_cnt", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [], "conversion_type_params": null}, "filter": {"where_filters": [{"where_sql_template": "{{ Dimension('user_id__action_type') }}  = 'mobile notification'\nAND {{ Dimension('user_id__status') }} in ('clicked', 'delivered', 'failed')"}]}, "metadata": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["semantic_model.dbt_octafx.bloomreach_events"]}, "refs": [], "metrics": [], "created_at": 1714072383.894081, "group": null}, "metric.dbt_octafx.events_count": {"name": "events_count", "resource_type": "metric", "package_name": "dbt_octafx", "path": "metrics/uninstall_events_semantic.yml", "original_file_path": "models/metrics/uninstall_events_semantic.yml", "unique_id": "metric.dbt_octafx.events_count", "fqn": ["dbt_octafx", "metrics", "events_count"], "description": "", "label": "total count of uninstall events", "type": "simple", "type_params": {"measure": {"name": "events_count", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}, "input_measures": [{"name": "events_count", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [], "conversion_type_params": null}, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["semantic_model.dbt_octafx.uninstall_events"]}, "refs": [], "metrics": [], "created_at": 1714072383.895063, "group": null}, "metric.dbt_octafx.revenue_usd_sum": {"name": "revenue_usd_sum", "resource_type": "metric", "package_name": "dbt_octafx", "path": "metrics/uninstall_events_semantic.yml", "original_file_path": "models/metrics/uninstall_events_semantic.yml", "unique_id": "metric.dbt_octafx.revenue_usd_sum", "fqn": ["dbt_octafx", "metrics", "revenue_usd_sum"], "description": "", "label": "total revenue in USD", "type": "simple", "type_params": {"measure": {"name": "event_revenue_usd", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}, "input_measures": [{"name": "event_revenue_usd", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [], "conversion_type_params": null}, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["semantic_model.dbt_octafx.uninstall_events"]}, "refs": [], "metrics": [], "created_at": 1714072383.895181, "group": null}, "metric.dbt_octafx.deals_cnt": {"name": "deals_cnt", "resource_type": "metric", "package_name": "dbt_octafx", "path": "metrics/user_deals_semantic.yml", "original_file_path": "models/metrics/user_deals_semantic.yml", "unique_id": "metric.dbt_octafx.deals_cnt", "fqn": ["dbt_octafx", "metrics", "deals_cnt"], "description": "", "label": "deals cnt aggregated", "type": "simple", "type_params": {"measure": {"name": "deals_cnt", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}, "input_measures": [{"name": "deals_cnt", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [], "conversion_type_params": null}, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["semantic_model.dbt_octafx.trading_activity"]}, "refs": [], "metrics": [], "created_at": 1714072383.8959959, "group": null}, "metric.dbt_octafx.vol_sum": {"name": "vol_sum", "resource_type": "metric", "package_name": "dbt_octafx", "path": "metrics/user_deals_semantic.yml", "original_file_path": "models/metrics/user_deals_semantic.yml", "unique_id": "metric.dbt_octafx.vol_sum", "fqn": ["dbt_octafx", "metrics", "vol_sum"], "description": "", "label": "sum of volume", "type": "simple", "type_params": {"measure": {"name": "symbol_vol", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}, "input_measures": [{"name": "symbol_vol", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [], "conversion_type_params": null}, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["semantic_model.dbt_octafx.trading_activity"]}, "refs": [], "metrics": [], "created_at": 1714072383.896113, "group": null}, "metric.dq_tools.data_quality_score": {"name": "data_quality_score", "resource_type": "metric", "package_name": "dq_tools", "path": "04_metric/metric__data_quality_score.yml", "original_file_path": "models/04_metric/metric__data_quality_score.yml", "unique_id": "metric.dq_tools.data_quality_score", "fqn": ["dq_tools", "04_metric", "data_quality_score"], "description": "Data Quality Score based on the Testing Result which is calculaed by looking at Row Passed/Row Processed.", "label": "Data Quality Score", "type": "simple", "type_params": {"measure": {"name": "data_quality_score", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}, "input_measures": [{"name": "data_quality_score", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [], "conversion_type_params": null}, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["semantic_model.dq_tools.data_quality_score"]}, "refs": [], "metrics": [], "created_at": 1714072384.2562618, "group": null}, "metric.dq_tools.test_coverage": {"name": "test_coverage", "resource_type": "metric", "package_name": "dq_tools", "path": "04_metric/metric__test_coverage.yml", "original_file_path": "models/04_metric/metric__test_coverage.yml", "unique_id": "metric.dq_tools.test_coverage", "fqn": ["dq_tools", "04_metric", "test_coverage"], "description": "Percentage of test coverage by each dbt invocation", "label": "Test Coverage", "type": "simple", "type_params": {"measure": {"name": "coverage_pct", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}, "input_measures": [{"name": "coverage_pct", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [], "conversion_type_params": null}, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["semantic_model.dq_tools.test_coverage"]}, "refs": [], "metrics": [], "created_at": 1714072384.2564669, "group": null}, "metric.dq_tools.test_to_column_ratio": {"name": "test_to_column_ratio", "resource_type": "metric", "package_name": "dq_tools", "path": "04_metric/metric__test_to_column_ratio.yml", "original_file_path": "models/04_metric/metric__test_to_column_ratio.yml", "unique_id": "metric.dq_tools.test_to_column_ratio", "fqn": ["dq_tools", "04_metric", "test_to_column_ratio"], "description": "Ratio between the number of tests vs the number of columns", "label": "Test to Column Ratio", "type": "simple", "type_params": {"measure": {"name": "test_to_column_ratio", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}, "input_measures": [{"name": "test_to_column_ratio", "filter": null, "alias": null, "join_to_timespine": false, "fill_nulls_with": null}], "numerator": null, "denominator": null, "expr": null, "window": null, "grain_to_date": null, "metrics": [], "conversion_type_params": null}, "filter": null, "metadata": null, "meta": {}, "tags": [], "config": {"enabled": true, "group": null}, "unrendered_config": {}, "sources": [], "depends_on": {"macros": [], "nodes": ["semantic_model.dq_tools.test_coverage"]}, "refs": [], "metrics": [], "created_at": 1714072384.256649, "group": null}}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_octafx.dummy_id": ["model.dbt_octafx.users_cids_all"], "model.dbt_octafx.timedelta_per_user": ["model.dbt_octafx.int_af_id", "model.dbt_octafx.int_bloomreach_events_enhanced"], "model.dbt_octafx.avg_timedelta_per_user": ["model.dbt_octafx.int_af_id", "model.dbt_octafx.int_bloomreach_events_enhanced"], "model.dbt_octafx.timedelta_helper": ["model.dbt_octafx.int_af_id", "model.dbt_octafx.int_bloomreach_events_enhanced"], "model.dbt_octafx.corrupt_user_id": [], "model.dbt_octafx.stg_pushes": ["model.dbt_octafx.stg_bloomreach_events"], "model.dbt_octafx.stg_bloomreach_events": ["source.dbt_octafx.bloomreach.campaign"], "model.dbt_octafx.stg_users": ["source.dbt_octafx.wh_raw.users"], "model.dbt_octafx.stg_af_events": ["source.dbt_octafx.wh_raw.mobile_appsflyer"], "model.dbt_octafx.int_users_af": ["model.dbt_octafx.int_af_id", "model.dbt_octafx.stg_users"], "model.dbt_octafx.int_bloomreach_events_enhanced": ["model.dbt_octafx.stg_bloomreach_events", "model.dbt_octafx.stg_users", "source.dbt_octafx.bloomreach.customers_properties"], "model.dbt_octafx.int_events_enum": ["model.dbt_octafx.int_bloomreach_events_enhanced", "model.dbt_octafx.int_notreg_user_id"], "model.dbt_octafx.countries": ["source.dbt_octafx.wh_raw.countries", "source.dbt_octafx.wh_raw.countries_tiers"], "model.dbt_octafx.int_notreg_pushes": ["model.dbt_octafx.stg_pushes"], "model.dbt_octafx.int_pushes_enum": ["model.dbt_octafx.int_bloomreach_events_enhanced", "model.dbt_octafx.int_notreg_user_id"], "model.dbt_octafx.int_notreg_user_id": ["model.dbt_octafx.int_notreg_pushes"], "model.dbt_octafx.int_af_id": ["model.dbt_octafx.int_bloomreach_events_enhanced", "source.dbt_octafx.wh_raw.mobile_appsflyer", "source.dbt_octafx.wh_raw.users_cids_all"], "model.dbt_octafx.user_deals": ["model.dbt_octafx.ab_users", "source.dbt_octafx.wh_raw.trading_real_raw"], "model.dbt_octafx.ab_stats_grouped": ["model.dbt_octafx.ab_stats"], "model.dbt_octafx.ab_users": ["source.dbt_octafx.bloomreach.campaign"], "model.dbt_octafx.ab_stats": ["model.dbt_octafx.user_deals"], "model.dbt_octafx.appsflyer_uninstall_events_report": ["source.dbt_octafx.wh_raw.appsflyer_uninstall_events_report"], "model.dbt_octafx.tokens": ["source.dbt_octafx.bloomreach.customers_properties"], "model.dbt_octafx.users_cids_all": ["source.dbt_octafx.wh_raw.users_cids_all"], "model.dbt_octafx.funnel_dbt": ["model.dbt_octafx.event_stream"], "model.dbt_octafx.funnel_deals": ["source.dbt_octafx.wh_raw.trading_real_raw"], "model.dbt_octafx.funnel_bloomreach_events": ["source.dbt_octafx.bloomreach.campaign"], "seed.dbt_octafx.XNGUSD_random": [], "seed.dbt_octafx.ETHUSD_random": [], "operation.dbt_octafx.dbt_octafx-on-run-end-0": ["model.dq_tools.dq_issue_log"], "model.amplitude_source.stg_amplitude__event": ["model.amplitude_source.stg_amplitude__event_tmp"], "model.amplitude_source.stg_amplitude__event_type": ["model.amplitude_source.stg_amplitude__event_type_tmp"], "model.amplitude_source.stg_amplitude__event_tmp": ["source.amplitude_source.amplitude.event"], "model.amplitude_source.stg_amplitude__event_type_tmp": ["source.amplitude_source.amplitude.event_type"], "model.snowplow_normalize.snowplow_normalize_incremental_manifest": [], "model.snowplow_normalize.snowplow_normalize_base_events_this_run": ["model.snowplow_normalize.snowplow_normalize_base_new_event_limits", "source.snowplow_normalize.atomic.events"], "model.snowplow_normalize.snowplow_normalize_base_new_event_limits": ["model.snowplow_normalize.snowplow_normalize_incremental_manifest"], "operation.snowplow_normalize.snowplow_normalize-on-run-start-0": ["model.snowplow_normalize.snowplow_normalize_incremental_manifest"], "operation.snowplow_normalize.snowplow_normalize-on-run-end-0": ["model.snowplow_normalize.snowplow_normalize_base_events_this_run", "model.snowplow_normalize.snowplow_normalize_incremental_manifest"], "operation.snowplow_normalize.snowplow_normalize-on-run-end-1": [], "model.amplitude.amplitude__user_enhanced": ["model.amplitude.amplitude__event_enhanced", "model.amplitude.amplitude__sessions"], "model.amplitude.amplitude__event_enhanced": ["model.amplitude.amplitude__sessions", "model.amplitude_source.stg_amplitude__event", "model.amplitude_source.stg_amplitude__event_type"], "model.amplitude.amplitude__daily_performance": ["model.amplitude.amplitude__event_enhanced", "model.amplitude.int_amplitude__date_spine"], "model.amplitude.amplitude__sessions": ["model.amplitude_source.stg_amplitude__event"], "model.amplitude.int_amplitude__date_spine": ["model.amplitude.amplitude__event_enhanced"], "model.dq_tools.dq_issue_log": [], "model.dq_tools.metricflow_time_spine": [], "model.dq_tools.bi_column_analysis": ["model.dq_tools.dq_issue_log"], "model.dq_tools.bi_dq_metrics": ["model.dq_tools.bi_column_analysis"], "model.dq_tools.test_coverage": ["model.dq_tools.dq_issue_log"], "model.dbt_segment.segment_web_user_stitching": ["model.dbt_segment.segment_web_page_views"], "model.dbt_segment.segment_web_sessions": ["model.dbt_segment.segment_web_sessions__stitched"], "model.dbt_segment.segment_web_sessions__stitched": ["model.dbt_segment.segment_web_sessions__initial", "model.dbt_segment.segment_web_user_stitching"], "model.dbt_segment.segment_web_sessions__initial": ["model.dbt_segment.segment_web_page_views__sessionized", "seed.dbt_segment.referrer_mapping"], "model.dbt_segment.segment_web_page_views__sessionized": ["model.dbt_segment.segment_web_page_views"], "model.dbt_segment.segment_web_page_views": [], "seed.dbt_segment.referrer_mapping": [], "model.dbt_project_evaluator.stg_columns": ["model.dbt_project_evaluator.base_node_columns", "model.dbt_project_evaluator.base_source_columns"], "model.dbt_project_evaluator.stg_nodes": [], "model.dbt_project_evaluator.stg_exposure_relationships": ["model.dbt_project_evaluator.base_exposure_relationships"], "model.dbt_project_evaluator.stg_node_relationships": ["model.dbt_project_evaluator.base_node_relationships"], "model.dbt_project_evaluator.stg_sources": [], "model.dbt_project_evaluator.stg_exposures": [], "model.dbt_project_evaluator.stg_metric_relationships": ["model.dbt_project_evaluator.base_metric_relationships"], "model.dbt_project_evaluator.stg_metrics": [], "model.dbt_project_evaluator.base_node_relationships": [], "model.dbt_project_evaluator.base_source_columns": [], "model.dbt_project_evaluator.base_node_columns": [], "model.dbt_project_evaluator.base_exposure_relationships": [], "model.dbt_project_evaluator.base_metric_relationships": [], "model.dbt_project_evaluator.stg_naming_convention_folders": [], "model.dbt_project_evaluator.stg_naming_convention_prefixes": [], "model.dbt_project_evaluator.fct_undocumented_models": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_documentation_coverage": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.fct_undocumented_sources": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_undocumented_source_tables": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.int_direct_relationships": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_exposure_relationships", "model.dbt_project_evaluator.stg_metric_relationships", "model.dbt_project_evaluator.stg_node_relationships"], "model.dbt_project_evaluator.int_all_dag_relationships": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.int_all_graph_resources": ["model.dbt_project_evaluator.stg_exposures", "model.dbt_project_evaluator.stg_metrics", "model.dbt_project_evaluator.stg_naming_convention_folders", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "model.dbt_project_evaluator.stg_nodes", "model.dbt_project_evaluator.stg_sources"], "model.dbt_project_evaluator.fct_multiple_sources_joined": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_root_models": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_fanout": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_unused_sources": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_duplicate_sources": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.fct_source_fanout": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_direct_join_to_source": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_staging_dependent_on_staging": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_too_many_joins": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_hard_coded_references": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_missing_primary_key_tests": ["model.dbt_project_evaluator.int_model_test_summary", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_test_coverage": ["model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.int_model_test_summary": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.fct_undocumented_public_models": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_public_models_without_contract": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_exposure_parents_materializations": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_chained_views_dependencies": ["model.dbt_project_evaluator.int_all_dag_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_source_directories": ["model.dbt_project_evaluator.int_all_graph_resources", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_test_directories": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.int_direct_relationships", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_naming_conventions": ["model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_prefixes", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "model.dbt_project_evaluator.fct_model_directories": ["model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_all_graph_resources", "model.dbt_project_evaluator.stg_naming_convention_folders", "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions"], "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": [], "test.amplitude_source.unique_stg_amplitude__event_unique_event_id.b4262a0e5e": ["model.amplitude_source.stg_amplitude__event"], "test.amplitude_source.not_null_stg_amplitude__event_unique_event_id.d32937d071": ["model.amplitude_source.stg_amplitude__event"], "test.amplitude_source.unique_stg_amplitude__event_type_unique_event_type_id.fcbfdcc721": ["model.amplitude_source.stg_amplitude__event_type"], "test.amplitude_source.not_null_stg_amplitude__event_type_unique_event_type_id.9921959436": ["model.amplitude_source.stg_amplitude__event_type"], "test.snowplow_normalize.unique_snowplow_normalize_incremental_manifest_model.7efd8b15ad": ["model.snowplow_normalize.snowplow_normalize_incremental_manifest"], "test.snowplow_normalize.not_null_snowplow_normalize_incremental_manifest_model.3385cfeed0": ["model.snowplow_normalize.snowplow_normalize_incremental_manifest"], "test.snowplow_normalize.unique_snowplow_normalize_base_events_this_run_event_id.01cd1b4f0f": ["model.snowplow_normalize.snowplow_normalize_base_events_this_run"], "test.snowplow_normalize.not_null_snowplow_normalize_base_events_this_run_event_id.405ab6c0b2": ["model.snowplow_normalize.snowplow_normalize_base_events_this_run"], "test.amplitude.unique_amplitude__event_enhanced_unique_event_id.03dacb012a": ["model.amplitude.amplitude__event_enhanced"], "test.amplitude.not_null_amplitude__event_enhanced_unique_event_id.53de42037b": ["model.amplitude.amplitude__event_enhanced"], "test.amplitude.unique_amplitude__sessions_unique_session_id.a9b2f3faec": ["model.amplitude.amplitude__sessions"], "test.amplitude.not_null_amplitude__sessions_unique_session_id.42d35ec70c": ["model.amplitude.amplitude__sessions"], "test.amplitude.unique_amplitude__user_enhanced_amplitude_user_id.56f969f951": ["model.amplitude.amplitude__user_enhanced"], "test.amplitude.not_null_amplitude__user_enhanced_amplitude_user_id.bb955eeae0": ["model.amplitude.amplitude__user_enhanced"], "test.amplitude.dbt_utils_unique_combination_of_columns_amplitude__daily_performance_event_day__event_type.163ae17b19": ["model.amplitude.amplitude__daily_performance"], "test.dq_tools.not_null_bi_dq_metrics_run_time.5eadc62c21": ["model.dq_tools.bi_dq_metrics"], "test.dq_tools.not_null_bi_dq_metrics_rule_name.3113b4f46c": ["model.dq_tools.bi_dq_metrics"], "test.dq_tools.not_null_bi_dq_metrics_data_concept.bf85ad9354": ["model.dq_tools.bi_dq_metrics"], "test.dq_tools.not_null_bi_dq_metrics_indicator_category.72456fdbac": ["model.dq_tools.bi_dq_metrics"], "test.dq_tools.accepted_values_bi_dq_metrics_indicator_category__Simple_Statistics.cbae39849c": ["model.dq_tools.bi_dq_metrics"], "test.dq_tools.not_null_bi_dq_metrics_dq_dimension.c8dbacdcbb": ["model.dq_tools.bi_dq_metrics"], "test.dq_tools.accepted_values_bi_dq_metrics_dq_dimension__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other.b32bee5307": ["model.dq_tools.bi_dq_metrics"], "test.dq_tools.not_null_bi_dq_metrics_rows_processed.e667fc8211": ["model.dq_tools.bi_dq_metrics"], "test.dq_tools.dq_tools_expression_is_true_db_bi_dq_metrics_rows_processed__rows_failed_0.b9d15f8fa8": ["model.dq_tools.bi_dq_metrics"], "test.dq_tools.not_null_bi_dq_metrics_rows_failed.b5eb625247": ["model.dq_tools.bi_dq_metrics"], "test.dq_tools.dq_tools_expression_is_true_db_bi_dq_metrics_rows_failed__rows_failed_0.f8c11a12fb": ["model.dq_tools.bi_dq_metrics"], "test.dq_tools.not_null_bi_column_analysis_run_time.f70275d152": ["model.dq_tools.bi_column_analysis"], "test.dq_tools.not_null_bi_column_analysis_analysis_name.eeee671b07": ["model.dq_tools.bi_column_analysis"], "test.dq_tools.not_null_bi_column_analysis_table_name.a46dd22350": ["model.dq_tools.bi_column_analysis"], "test.dq_tools.not_null_bi_column_analysis_kpi_category.3358d26745": ["model.dq_tools.bi_column_analysis"], "test.dq_tools.accepted_values_bi_column_analysis_kpi_category__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other.66b8cded6e": ["model.dq_tools.bi_column_analysis"], "test.dq_tools.not_null_bi_column_analysis_indicator_category.7cabbd7ad4": ["model.dq_tools.bi_column_analysis"], "test.dq_tools.accepted_values_bi_column_analysis_indicator_category__Simple_Statistics.ce70296aef": ["model.dq_tools.bi_column_analysis"], "test.dq_tools.not_null_bi_column_analysis_rows_processed.2d9616c8d6": ["model.dq_tools.bi_column_analysis"], "test.dq_tools.not_null_bi_column_analysis_indicator_value.bed4c8a078": ["model.dq_tools.bi_column_analysis"], "test.dq_tools.not_null_test_coverage_invocation_id.b3ebf697f8": ["model.dq_tools.test_coverage"], "test.dq_tools.unique_test_coverage_invocation_id.15de3c1f63": ["model.dq_tools.test_coverage"], "test.dq_tools.not_null_test_coverage_check_timestamp.fd18e654f7": ["model.dq_tools.test_coverage"], "test.dq_tools.not_null_test_coverage_all_tested_columns.f3a497bc54": ["model.dq_tools.test_coverage"], "test.dq_tools.not_null_test_coverage_all_columns.3262b5e1be": ["model.dq_tools.test_coverage"], "test.dq_tools.not_null_test_coverage_all_tested_tables.9f7a4d73cd": ["model.dq_tools.test_coverage"], "test.dq_tools.not_null_test_coverage_all_tables.7c396d66bf": ["model.dq_tools.test_coverage"], "test.dq_tools.not_null_test_coverage_test_count.0190aa6ebb": ["model.dq_tools.test_coverage"], "test.dq_tools.not_null_test_coverage_column_record_coverage_pct.95d3dfd0c6": ["model.dq_tools.test_coverage"], "test.dq_tools.not_null_test_coverage_column_coverage_pct.e1e1727a93": ["model.dq_tools.test_coverage"], "test.dq_tools.not_null_test_coverage_model_coverage_pct.8ff3220b7f": ["model.dq_tools.test_coverage"], "test.dq_tools.not_null_test_coverage_coverage_pct.f67b37d1ae": ["model.dq_tools.test_coverage"], "test.dq_tools.not_null_test_coverage_test_to_column_ratio.0b5efdf74c": ["model.dq_tools.test_coverage"], "test.dbt_segment.not_null_referrer_mapping_medium.df377e3d47": ["seed.dbt_segment.referrer_mapping"], "test.dbt_segment.not_null_referrer_mapping_source.b73b2b8cd8": ["seed.dbt_segment.referrer_mapping"], "test.dbt_segment.unique_referrer_mapping_host.bcb81bd488": ["seed.dbt_segment.referrer_mapping"], "test.dbt_segment.not_null_referrer_mapping_host.f7aca82420": ["seed.dbt_segment.referrer_mapping"], "test.dbt_segment.unique_segment_web_user_stitching_anonymous_id.137b837397": ["model.dbt_segment.segment_web_user_stitching"], "test.dbt_segment.not_null_segment_web_user_stitching_anonymous_id.f1454c2a9e": ["model.dbt_segment.segment_web_user_stitching"], "test.dbt_segment.unique_segment_web_page_views__sessionized_page_view_id.24778fab16": ["model.dbt_segment.segment_web_page_views__sessionized"], "test.dbt_segment.not_null_segment_web_page_views__sessionized_page_view_id.895b268143": ["model.dbt_segment.segment_web_page_views__sessionized"], "test.dbt_segment.unique_segment_web_sessions__initial_session_id.3fe796b6ce": ["model.dbt_segment.segment_web_sessions__initial"], "test.dbt_segment.not_null_segment_web_sessions__initial_session_id.59665696e9": ["model.dbt_segment.segment_web_sessions__initial"], "test.dbt_segment.unique_segment_web_sessions__stitched_session_id.150335b1aa": ["model.dbt_segment.segment_web_sessions__stitched"], "test.dbt_segment.not_null_segment_web_sessions__stitched_session_id.9811d69bf1": ["model.dbt_segment.segment_web_sessions__stitched"], "test.dbt_segment.unique_segment_web_sessions_session_id.47d1980cea": ["model.dbt_segment.segment_web_sessions"], "test.dbt_segment.not_null_segment_web_sessions_session_id.3bd43b722f": ["model.dbt_segment.segment_web_sessions"], "test.dbt_segment.unique_segment_web_page_views_page_view_id.f2b47209c8": ["model.dbt_segment.segment_web_page_views"], "test.dbt_segment.not_null_segment_web_page_views_page_view_id.e39f5df0da": ["model.dbt_segment.segment_web_page_views"], "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": ["model.dbt_project_evaluator.fct_documentation_coverage"], "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": ["model.dbt_project_evaluator.fct_undocumented_models"], "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": ["model.dbt_project_evaluator.fct_undocumented_source_tables"], "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": ["model.dbt_project_evaluator.fct_undocumented_sources"], "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": ["model.dbt_project_evaluator.fct_direct_join_to_source"], "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": ["model.dbt_project_evaluator.fct_duplicate_sources"], "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": ["model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source"], "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": ["model.dbt_project_evaluator.fct_model_fanout"], "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": ["model.dbt_project_evaluator.fct_multiple_sources_joined"], "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": ["model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts"], "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": ["model.dbt_project_evaluator.fct_root_models"], "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": ["model.dbt_project_evaluator.fct_source_fanout"], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": ["model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate"], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": ["model.dbt_project_evaluator.fct_staging_dependent_on_staging"], "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": ["model.dbt_project_evaluator.fct_unused_sources"], "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": ["model.dbt_project_evaluator.fct_exposure_parents_materializations"], "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": ["model.dbt_project_evaluator.fct_hard_coded_references"], "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": ["model.dbt_project_evaluator.fct_too_many_joins"], "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": ["model.dbt_project_evaluator.fct_test_coverage"], "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": ["model.dbt_project_evaluator.fct_missing_primary_key_tests"], "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": ["model.dbt_project_evaluator.fct_public_models_without_contract"], "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": ["model.dbt_project_evaluator.fct_undocumented_public_models"], "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": ["model.dbt_project_evaluator.fct_exposures_dependent_on_private_models"], "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": ["model.dbt_project_evaluator.fct_chained_views_dependencies"], "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": ["model.dbt_project_evaluator.fct_model_directories"], "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": ["model.dbt_project_evaluator.fct_model_naming_conventions"], "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": ["model.dbt_project_evaluator.fct_source_directories"], "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": ["model.dbt_project_evaluator.fct_test_directories"], "model.dbt_octafx.event_stream": ["model.dbt_octafx.int_pushes"], "model.dbt_octafx.int_pushes": ["model.dbt_octafx.int_bloomreach_events_enhanced", "source.dbt_octafx.bloomreach.customers_properties", "source.dbt_octafx.wh_raw.countries", "source.dbt_octafx.wh_raw.mobile_appsflyer", "source.dbt_octafx.wh_raw.users"], "model.dbt_octafx.uninstalls": ["model.dbt_octafx.appsflyer_uninstall_events_report", "model.dbt_octafx.users_cids_all"], "source.dbt_octafx.wh_raw.trading_real_raw": [], "source.dbt_octafx.wh_raw.users": [], "source.dbt_octafx.wh_raw.mobile_appsflyer": [], "source.dbt_octafx.wh_raw.appsflyer_uninstall_events_report": [], "source.dbt_octafx.wh_raw.users_cids_all": [], "source.dbt_octafx.wh_raw.countries": [], "source.dbt_octafx.wh_raw.countries_tiers": [], "source.dbt_octafx.supplement.eth_recom": [], "source.dbt_octafx.supplement.random_users": [], "source.dbt_octafx.supplement.eligible_users": [], "source.dbt_octafx.bloomreach.campaign": [], "source.dbt_octafx.bloomreach.banner": [], "source.dbt_octafx.bloomreach.customers_properties": [], "source.amplitude_source.amplitude.event": [], "source.amplitude_source.amplitude.event_type": [], "source.snowplow_normalize.atomic.events": [], "metric.dbt_octafx.events_cnt": ["semantic_model.dbt_octafx.bloomreach_events"], "metric.dbt_octafx.pushes_cnt": ["semantic_model.dbt_octafx.bloomreach_events"], "metric.dbt_octafx.events_count": ["semantic_model.dbt_octafx.uninstall_events"], "metric.dbt_octafx.revenue_usd_sum": ["semantic_model.dbt_octafx.uninstall_events"], "metric.dbt_octafx.deals_cnt": ["semantic_model.dbt_octafx.trading_activity"], "metric.dbt_octafx.vol_sum": ["semantic_model.dbt_octafx.trading_activity"], "metric.dq_tools.data_quality_score": ["semantic_model.dq_tools.data_quality_score"], "metric.dq_tools.test_coverage": ["semantic_model.dq_tools.test_coverage"], "metric.dq_tools.test_to_column_ratio": ["semantic_model.dq_tools.test_coverage"], "semantic_model.dbt_octafx.bloomreach_events": ["model.dbt_octafx.int_bloomreach_events_enhanced"], "semantic_model.dbt_octafx.uninstall_events": ["model.dbt_octafx.appsflyer_uninstall_events_report"], "semantic_model.dbt_octafx.trading_activity": ["model.dbt_octafx.user_deals"], "semantic_model.dq_tools.data_quality_score": ["model.dq_tools.bi_dq_metrics"], "semantic_model.dq_tools.test_coverage": ["model.dq_tools.test_coverage"]}, "child_map": {"model.dbt_octafx.dummy_id": [], "model.dbt_octafx.timedelta_per_user": [], "model.dbt_octafx.avg_timedelta_per_user": [], "model.dbt_octafx.timedelta_helper": [], "model.dbt_octafx.corrupt_user_id": [], "model.dbt_octafx.stg_pushes": ["model.dbt_octafx.int_notreg_pushes"], "model.dbt_octafx.stg_bloomreach_events": ["model.dbt_octafx.int_bloomreach_events_enhanced", "model.dbt_octafx.stg_pushes"], "model.dbt_octafx.stg_users": ["model.dbt_octafx.int_bloomreach_events_enhanced", "model.dbt_octafx.int_users_af"], "model.dbt_octafx.stg_af_events": [], "model.dbt_octafx.int_users_af": [], "model.dbt_octafx.int_bloomreach_events_enhanced": ["model.dbt_octafx.avg_timedelta_per_user", "model.dbt_octafx.int_af_id", "model.dbt_octafx.int_events_enum", "model.dbt_octafx.int_pushes", "model.dbt_octafx.int_pushes_enum", "model.dbt_octafx.timedelta_helper", "model.dbt_octafx.timedelta_per_user", "semantic_model.dbt_octafx.bloomreach_events"], "model.dbt_octafx.int_events_enum": [], "model.dbt_octafx.countries": [], "model.dbt_octafx.int_notreg_pushes": ["model.dbt_octafx.int_notreg_user_id"], "model.dbt_octafx.int_pushes_enum": [], "model.dbt_octafx.int_notreg_user_id": ["model.dbt_octafx.int_events_enum", "model.dbt_octafx.int_pushes_enum"], "model.dbt_octafx.int_af_id": ["model.dbt_octafx.avg_timedelta_per_user", "model.dbt_octafx.int_users_af", "model.dbt_octafx.timedelta_helper", "model.dbt_octafx.timedelta_per_user"], "model.dbt_octafx.user_deals": ["model.dbt_octafx.ab_stats", "semantic_model.dbt_octafx.trading_activity"], "model.dbt_octafx.ab_stats_grouped": [], "model.dbt_octafx.ab_users": ["model.dbt_octafx.user_deals"], "model.dbt_octafx.ab_stats": ["model.dbt_octafx.ab_stats_grouped"], "model.dbt_octafx.appsflyer_uninstall_events_report": ["model.dbt_octafx.uninstalls", "semantic_model.dbt_octafx.uninstall_events"], "model.dbt_octafx.tokens": [], "model.dbt_octafx.users_cids_all": ["model.dbt_octafx.dummy_id", "model.dbt_octafx.uninstalls"], "model.dbt_octafx.funnel_dbt": [], "model.dbt_octafx.funnel_deals": [], "model.dbt_octafx.funnel_bloomreach_events": [], "seed.dbt_octafx.XNGUSD_random": [], "seed.dbt_octafx.ETHUSD_random": [], "operation.dbt_octafx.dbt_octafx-on-run-end-0": [], "model.amplitude_source.stg_amplitude__event": ["model.amplitude.amplitude__event_enhanced", "model.amplitude.amplitude__sessions", "test.amplitude_source.not_null_stg_amplitude__event_unique_event_id.d32937d071", "test.amplitude_source.unique_stg_amplitude__event_unique_event_id.b4262a0e5e"], "model.amplitude_source.stg_amplitude__event_type": ["model.amplitude.amplitude__event_enhanced", "test.amplitude_source.not_null_stg_amplitude__event_type_unique_event_type_id.9921959436", "test.amplitude_source.unique_stg_amplitude__event_type_unique_event_type_id.fcbfdcc721"], "model.amplitude_source.stg_amplitude__event_tmp": ["model.amplitude_source.stg_amplitude__event"], "model.amplitude_source.stg_amplitude__event_type_tmp": ["model.amplitude_source.stg_amplitude__event_type"], "model.snowplow_normalize.snowplow_normalize_incremental_manifest": ["model.snowplow_normalize.snowplow_normalize_base_new_event_limits", "operation.snowplow_normalize.snowplow_normalize-on-run-end-0", "operation.snowplow_normalize.snowplow_normalize-on-run-start-0", "test.snowplow_normalize.not_null_snowplow_normalize_incremental_manifest_model.3385cfeed0", "test.snowplow_normalize.unique_snowplow_normalize_incremental_manifest_model.7efd8b15ad"], "model.snowplow_normalize.snowplow_normalize_base_events_this_run": ["operation.snowplow_normalize.snowplow_normalize-on-run-end-0", "test.snowplow_normalize.not_null_snowplow_normalize_base_events_this_run_event_id.405ab6c0b2", "test.snowplow_normalize.unique_snowplow_normalize_base_events_this_run_event_id.01cd1b4f0f"], "model.snowplow_normalize.snowplow_normalize_base_new_event_limits": ["model.snowplow_normalize.snowplow_normalize_base_events_this_run"], "operation.snowplow_normalize.snowplow_normalize-on-run-start-0": [], "operation.snowplow_normalize.snowplow_normalize-on-run-end-0": [], "operation.snowplow_normalize.snowplow_normalize-on-run-end-1": [], "model.amplitude.amplitude__user_enhanced": ["test.amplitude.not_null_amplitude__user_enhanced_amplitude_user_id.bb955eeae0", "test.amplitude.unique_amplitude__user_enhanced_amplitude_user_id.56f969f951"], "model.amplitude.amplitude__event_enhanced": ["model.amplitude.amplitude__daily_performance", "model.amplitude.amplitude__user_enhanced", "model.amplitude.int_amplitude__date_spine", "test.amplitude.not_null_amplitude__event_enhanced_unique_event_id.53de42037b", "test.amplitude.unique_amplitude__event_enhanced_unique_event_id.03dacb012a"], "model.amplitude.amplitude__daily_performance": ["test.amplitude.dbt_utils_unique_combination_of_columns_amplitude__daily_performance_event_day__event_type.163ae17b19"], "model.amplitude.amplitude__sessions": ["model.amplitude.amplitude__event_enhanced", "model.amplitude.amplitude__user_enhanced", "test.amplitude.not_null_amplitude__sessions_unique_session_id.42d35ec70c", "test.amplitude.unique_amplitude__sessions_unique_session_id.a9b2f3faec"], "model.amplitude.int_amplitude__date_spine": ["model.amplitude.amplitude__daily_performance"], "model.dq_tools.dq_issue_log": ["model.dq_tools.bi_column_analysis", "model.dq_tools.test_coverage", "operation.dbt_octafx.dbt_octafx-on-run-end-0"], "model.dq_tools.metricflow_time_spine": [], "model.dq_tools.bi_column_analysis": ["model.dq_tools.bi_dq_metrics", "test.dq_tools.accepted_values_bi_column_analysis_indicator_category__Simple_Statistics.ce70296aef", "test.dq_tools.accepted_values_bi_column_analysis_kpi_category__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other.66b8cded6e", "test.dq_tools.not_null_bi_column_analysis_analysis_name.eeee671b07", "test.dq_tools.not_null_bi_column_analysis_indicator_category.7cabbd7ad4", "test.dq_tools.not_null_bi_column_analysis_indicator_value.bed4c8a078", "test.dq_tools.not_null_bi_column_analysis_kpi_category.3358d26745", "test.dq_tools.not_null_bi_column_analysis_rows_processed.2d9616c8d6", "test.dq_tools.not_null_bi_column_analysis_run_time.f70275d152", "test.dq_tools.not_null_bi_column_analysis_table_name.a46dd22350"], "model.dq_tools.bi_dq_metrics": ["semantic_model.dq_tools.data_quality_score", "test.dq_tools.accepted_values_bi_dq_metrics_dq_dimension__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other.b32bee5307", "test.dq_tools.accepted_values_bi_dq_metrics_indicator_category__Simple_Statistics.cbae39849c", "test.dq_tools.dq_tools_expression_is_true_db_bi_dq_metrics_rows_failed__rows_failed_0.f8c11a12fb", "test.dq_tools.dq_tools_expression_is_true_db_bi_dq_metrics_rows_processed__rows_failed_0.b9d15f8fa8", "test.dq_tools.not_null_bi_dq_metrics_data_concept.bf85ad9354", "test.dq_tools.not_null_bi_dq_metrics_dq_dimension.c8dbacdcbb", "test.dq_tools.not_null_bi_dq_metrics_indicator_category.72456fdbac", "test.dq_tools.not_null_bi_dq_metrics_rows_failed.b5eb625247", "test.dq_tools.not_null_bi_dq_metrics_rows_processed.e667fc8211", "test.dq_tools.not_null_bi_dq_metrics_rule_name.3113b4f46c", "test.dq_tools.not_null_bi_dq_metrics_run_time.5eadc62c21"], "model.dq_tools.test_coverage": ["semantic_model.dq_tools.test_coverage", "test.dq_tools.not_null_test_coverage_all_columns.3262b5e1be", "test.dq_tools.not_null_test_coverage_all_tables.7c396d66bf", "test.dq_tools.not_null_test_coverage_all_tested_columns.f3a497bc54", "test.dq_tools.not_null_test_coverage_all_tested_tables.9f7a4d73cd", "test.dq_tools.not_null_test_coverage_check_timestamp.fd18e654f7", "test.dq_tools.not_null_test_coverage_column_coverage_pct.e1e1727a93", "test.dq_tools.not_null_test_coverage_column_record_coverage_pct.95d3dfd0c6", "test.dq_tools.not_null_test_coverage_coverage_pct.f67b37d1ae", "test.dq_tools.not_null_test_coverage_invocation_id.b3ebf697f8", "test.dq_tools.not_null_test_coverage_model_coverage_pct.8ff3220b7f", "test.dq_tools.not_null_test_coverage_test_count.0190aa6ebb", "test.dq_tools.not_null_test_coverage_test_to_column_ratio.0b5efdf74c", "test.dq_tools.unique_test_coverage_invocation_id.15de3c1f63"], "model.dbt_segment.segment_web_user_stitching": ["model.dbt_segment.segment_web_sessions__stitched", "test.dbt_segment.not_null_segment_web_user_stitching_anonymous_id.f1454c2a9e", "test.dbt_segment.unique_segment_web_user_stitching_anonymous_id.137b837397"], "model.dbt_segment.segment_web_sessions": ["test.dbt_segment.not_null_segment_web_sessions_session_id.3bd43b722f", "test.dbt_segment.unique_segment_web_sessions_session_id.47d1980cea"], "model.dbt_segment.segment_web_sessions__stitched": ["model.dbt_segment.segment_web_sessions", "test.dbt_segment.not_null_segment_web_sessions__stitched_session_id.9811d69bf1", "test.dbt_segment.unique_segment_web_sessions__stitched_session_id.150335b1aa"], "model.dbt_segment.segment_web_sessions__initial": ["model.dbt_segment.segment_web_sessions__stitched", "test.dbt_segment.not_null_segment_web_sessions__initial_session_id.59665696e9", "test.dbt_segment.unique_segment_web_sessions__initial_session_id.3fe796b6ce"], "model.dbt_segment.segment_web_page_views__sessionized": ["model.dbt_segment.segment_web_sessions__initial", "test.dbt_segment.not_null_segment_web_page_views__sessionized_page_view_id.895b268143", "test.dbt_segment.unique_segment_web_page_views__sessionized_page_view_id.24778fab16"], "model.dbt_segment.segment_web_page_views": ["model.dbt_segment.segment_web_page_views__sessionized", "model.dbt_segment.segment_web_user_stitching", "test.dbt_segment.not_null_segment_web_page_views_page_view_id.e39f5df0da", "test.dbt_segment.unique_segment_web_page_views_page_view_id.f2b47209c8"], "seed.dbt_segment.referrer_mapping": ["model.dbt_segment.segment_web_sessions__initial", "test.dbt_segment.not_null_referrer_mapping_host.f7aca82420", "test.dbt_segment.not_null_referrer_mapping_medium.df377e3d47", "test.dbt_segment.not_null_referrer_mapping_source.b73b2b8cd8", "test.dbt_segment.unique_referrer_mapping_host.bcb81bd488"], "model.dbt_project_evaluator.stg_columns": [], "model.dbt_project_evaluator.stg_nodes": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_exposure_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_node_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_sources": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_exposures": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_metric_relationships": ["model.dbt_project_evaluator.int_direct_relationships"], "model.dbt_project_evaluator.stg_metrics": ["model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.base_node_relationships": ["model.dbt_project_evaluator.stg_node_relationships"], "model.dbt_project_evaluator.base_source_columns": ["model.dbt_project_evaluator.stg_columns"], "model.dbt_project_evaluator.base_node_columns": ["model.dbt_project_evaluator.stg_columns"], "model.dbt_project_evaluator.base_exposure_relationships": ["model.dbt_project_evaluator.stg_exposure_relationships"], "model.dbt_project_evaluator.base_metric_relationships": ["model.dbt_project_evaluator.stg_metric_relationships"], "model.dbt_project_evaluator.stg_naming_convention_folders": ["model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.stg_naming_convention_prefixes": ["model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.int_all_graph_resources"], "model.dbt_project_evaluator.fct_undocumented_models": ["test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c"], "model.dbt_project_evaluator.fct_documentation_coverage": ["test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7"], "model.dbt_project_evaluator.fct_undocumented_sources": ["test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235"], "model.dbt_project_evaluator.fct_undocumented_source_tables": ["test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166"], "model.dbt_project_evaluator.int_direct_relationships": ["model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.int_all_dag_relationships": ["model.dbt_project_evaluator.fct_chained_views_dependencies", "model.dbt_project_evaluator.fct_direct_join_to_source", "model.dbt_project_evaluator.fct_exposure_parents_materializations", "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_fanout", "model.dbt_project_evaluator.fct_multiple_sources_joined", "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "model.dbt_project_evaluator.fct_root_models", "model.dbt_project_evaluator.fct_source_fanout", "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "model.dbt_project_evaluator.fct_too_many_joins", "model.dbt_project_evaluator.fct_unused_sources"], "model.dbt_project_evaluator.int_all_graph_resources": ["model.dbt_project_evaluator.fct_documentation_coverage", "model.dbt_project_evaluator.fct_duplicate_sources", "model.dbt_project_evaluator.fct_hard_coded_references", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.fct_public_models_without_contract", "model.dbt_project_evaluator.fct_source_directories", "model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.fct_undocumented_models", "model.dbt_project_evaluator.fct_undocumented_public_models", "model.dbt_project_evaluator.fct_undocumented_source_tables", "model.dbt_project_evaluator.fct_undocumented_sources", "model.dbt_project_evaluator.int_all_dag_relationships", "model.dbt_project_evaluator.int_direct_relationships", "model.dbt_project_evaluator.int_model_test_summary"], "model.dbt_project_evaluator.fct_multiple_sources_joined": ["test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817"], "model.dbt_project_evaluator.fct_root_models": ["test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1"], "model.dbt_project_evaluator.fct_model_fanout": ["test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95"], "model.dbt_project_evaluator.fct_unused_sources": ["test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8"], "model.dbt_project_evaluator.fct_duplicate_sources": ["test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31"], "model.dbt_project_evaluator.fct_source_fanout": ["test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722"], "model.dbt_project_evaluator.fct_direct_join_to_source": ["test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028"], "model.dbt_project_evaluator.fct_staging_dependent_on_staging": ["test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca"], "model.dbt_project_evaluator.fct_too_many_joins": ["test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535"], "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate": ["test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f"], "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source": ["test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f"], "model.dbt_project_evaluator.fct_hard_coded_references": ["test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113"], "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts": ["test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d"], "model.dbt_project_evaluator.fct_missing_primary_key_tests": ["test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0"], "model.dbt_project_evaluator.fct_test_coverage": ["test.dbt_project_evaluator.valid_test_coverage.df03f31e09"], "model.dbt_project_evaluator.int_model_test_summary": ["model.dbt_project_evaluator.fct_missing_primary_key_tests", "model.dbt_project_evaluator.fct_test_coverage"], "model.dbt_project_evaluator.fct_undocumented_public_models": ["test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938"], "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models": ["test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e"], "model.dbt_project_evaluator.fct_public_models_without_contract": ["test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0"], "model.dbt_project_evaluator.fct_exposure_parents_materializations": ["test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422"], "model.dbt_project_evaluator.fct_chained_views_dependencies": ["test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33"], "model.dbt_project_evaluator.fct_source_directories": ["test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c"], "model.dbt_project_evaluator.fct_test_directories": ["test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433"], "model.dbt_project_evaluator.fct_model_naming_conventions": ["test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2"], "model.dbt_project_evaluator.fct_model_directories": ["test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db"], "seed.dbt_project_evaluator.dbt_project_evaluator_exceptions": ["model.dbt_project_evaluator.fct_chained_views_dependencies", "model.dbt_project_evaluator.fct_direct_join_to_source", "model.dbt_project_evaluator.fct_exposure_parents_materializations", "model.dbt_project_evaluator.fct_exposures_dependent_on_private_models", "model.dbt_project_evaluator.fct_hard_coded_references", "model.dbt_project_evaluator.fct_marts_or_intermediate_dependent_on_source", "model.dbt_project_evaluator.fct_missing_primary_key_tests", "model.dbt_project_evaluator.fct_model_directories", "model.dbt_project_evaluator.fct_model_fanout", "model.dbt_project_evaluator.fct_model_naming_conventions", "model.dbt_project_evaluator.fct_multiple_sources_joined", "model.dbt_project_evaluator.fct_public_models_without_contract", "model.dbt_project_evaluator.fct_rejoining_of_upstream_concepts", "model.dbt_project_evaluator.fct_root_models", "model.dbt_project_evaluator.fct_source_directories", "model.dbt_project_evaluator.fct_source_fanout", "model.dbt_project_evaluator.fct_staging_dependent_on_marts_or_intermediate", "model.dbt_project_evaluator.fct_staging_dependent_on_staging", "model.dbt_project_evaluator.fct_test_directories", "model.dbt_project_evaluator.fct_too_many_joins", "model.dbt_project_evaluator.fct_undocumented_models", "model.dbt_project_evaluator.fct_undocumented_public_models", "model.dbt_project_evaluator.fct_undocumented_source_tables", "model.dbt_project_evaluator.fct_undocumented_sources", "model.dbt_project_evaluator.fct_unused_sources"], "test.amplitude_source.unique_stg_amplitude__event_unique_event_id.b4262a0e5e": [], "test.amplitude_source.not_null_stg_amplitude__event_unique_event_id.d32937d071": [], "test.amplitude_source.unique_stg_amplitude__event_type_unique_event_type_id.fcbfdcc721": [], "test.amplitude_source.not_null_stg_amplitude__event_type_unique_event_type_id.9921959436": [], "test.snowplow_normalize.unique_snowplow_normalize_incremental_manifest_model.7efd8b15ad": [], "test.snowplow_normalize.not_null_snowplow_normalize_incremental_manifest_model.3385cfeed0": [], "test.snowplow_normalize.unique_snowplow_normalize_base_events_this_run_event_id.01cd1b4f0f": [], "test.snowplow_normalize.not_null_snowplow_normalize_base_events_this_run_event_id.405ab6c0b2": [], "test.amplitude.unique_amplitude__event_enhanced_unique_event_id.03dacb012a": [], "test.amplitude.not_null_amplitude__event_enhanced_unique_event_id.53de42037b": [], "test.amplitude.unique_amplitude__sessions_unique_session_id.a9b2f3faec": [], "test.amplitude.not_null_amplitude__sessions_unique_session_id.42d35ec70c": [], "test.amplitude.unique_amplitude__user_enhanced_amplitude_user_id.56f969f951": [], "test.amplitude.not_null_amplitude__user_enhanced_amplitude_user_id.bb955eeae0": [], "test.amplitude.dbt_utils_unique_combination_of_columns_amplitude__daily_performance_event_day__event_type.163ae17b19": [], "test.dq_tools.not_null_bi_dq_metrics_run_time.5eadc62c21": [], "test.dq_tools.not_null_bi_dq_metrics_rule_name.3113b4f46c": [], "test.dq_tools.not_null_bi_dq_metrics_data_concept.bf85ad9354": [], "test.dq_tools.not_null_bi_dq_metrics_indicator_category.72456fdbac": [], "test.dq_tools.accepted_values_bi_dq_metrics_indicator_category__Simple_Statistics.cbae39849c": [], "test.dq_tools.not_null_bi_dq_metrics_dq_dimension.c8dbacdcbb": [], "test.dq_tools.accepted_values_bi_dq_metrics_dq_dimension__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other.b32bee5307": [], "test.dq_tools.not_null_bi_dq_metrics_rows_processed.e667fc8211": [], "test.dq_tools.dq_tools_expression_is_true_db_bi_dq_metrics_rows_processed__rows_failed_0.b9d15f8fa8": [], "test.dq_tools.not_null_bi_dq_metrics_rows_failed.b5eb625247": [], "test.dq_tools.dq_tools_expression_is_true_db_bi_dq_metrics_rows_failed__rows_failed_0.f8c11a12fb": [], "test.dq_tools.not_null_bi_column_analysis_run_time.f70275d152": [], "test.dq_tools.not_null_bi_column_analysis_analysis_name.eeee671b07": [], "test.dq_tools.not_null_bi_column_analysis_table_name.a46dd22350": [], "test.dq_tools.not_null_bi_column_analysis_kpi_category.3358d26745": [], "test.dq_tools.accepted_values_bi_column_analysis_kpi_category__Validity__Timeliness__Accuracy__Uniqueness__Completeness__Consistency__Other.66b8cded6e": [], "test.dq_tools.not_null_bi_column_analysis_indicator_category.7cabbd7ad4": [], "test.dq_tools.accepted_values_bi_column_analysis_indicator_category__Simple_Statistics.ce70296aef": [], "test.dq_tools.not_null_bi_column_analysis_rows_processed.2d9616c8d6": [], "test.dq_tools.not_null_bi_column_analysis_indicator_value.bed4c8a078": [], "test.dq_tools.not_null_test_coverage_invocation_id.b3ebf697f8": [], "test.dq_tools.unique_test_coverage_invocation_id.15de3c1f63": [], "test.dq_tools.not_null_test_coverage_check_timestamp.fd18e654f7": [], "test.dq_tools.not_null_test_coverage_all_tested_columns.f3a497bc54": [], "test.dq_tools.not_null_test_coverage_all_columns.3262b5e1be": [], "test.dq_tools.not_null_test_coverage_all_tested_tables.9f7a4d73cd": [], "test.dq_tools.not_null_test_coverage_all_tables.7c396d66bf": [], "test.dq_tools.not_null_test_coverage_test_count.0190aa6ebb": [], "test.dq_tools.not_null_test_coverage_column_record_coverage_pct.95d3dfd0c6": [], "test.dq_tools.not_null_test_coverage_column_coverage_pct.e1e1727a93": [], "test.dq_tools.not_null_test_coverage_model_coverage_pct.8ff3220b7f": [], "test.dq_tools.not_null_test_coverage_coverage_pct.f67b37d1ae": [], "test.dq_tools.not_null_test_coverage_test_to_column_ratio.0b5efdf74c": [], "test.dbt_segment.not_null_referrer_mapping_medium.df377e3d47": [], "test.dbt_segment.not_null_referrer_mapping_source.b73b2b8cd8": [], "test.dbt_segment.unique_referrer_mapping_host.bcb81bd488": [], "test.dbt_segment.not_null_referrer_mapping_host.f7aca82420": [], "test.dbt_segment.unique_segment_web_user_stitching_anonymous_id.137b837397": [], "test.dbt_segment.not_null_segment_web_user_stitching_anonymous_id.f1454c2a9e": [], "test.dbt_segment.unique_segment_web_page_views__sessionized_page_view_id.24778fab16": [], "test.dbt_segment.not_null_segment_web_page_views__sessionized_page_view_id.895b268143": [], "test.dbt_segment.unique_segment_web_sessions__initial_session_id.3fe796b6ce": [], "test.dbt_segment.not_null_segment_web_sessions__initial_session_id.59665696e9": [], "test.dbt_segment.unique_segment_web_sessions__stitched_session_id.150335b1aa": [], "test.dbt_segment.not_null_segment_web_sessions__stitched_session_id.9811d69bf1": [], "test.dbt_segment.unique_segment_web_sessions_session_id.47d1980cea": [], "test.dbt_segment.not_null_segment_web_sessions_session_id.3bd43b722f": [], "test.dbt_segment.unique_segment_web_page_views_page_view_id.f2b47209c8": [], "test.dbt_segment.not_null_segment_web_page_views_page_view_id.e39f5df0da": [], "test.dbt_project_evaluator.valid_documentation_coverage.67ef7314a7": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_models_.7c2f43109c": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_source_tables_.1c89ecc166": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_sources_.0409327235": [], "test.dbt_project_evaluator.is_empty_fct_direct_join_to_source_.2ec67ec028": [], "test.dbt_project_evaluator.is_empty_fct_duplicate_sources_.642214de31": [], "test.dbt_project_evaluator.is_empty_fct_marts_or_intermediate_dependent_on_source_.c0abd5f00f": [], "test.dbt_project_evaluator.is_empty_fct_model_fanout_.a3ef403a95": [], "test.dbt_project_evaluator.is_empty_fct_multiple_sources_joined_.494f431817": [], "test.dbt_project_evaluator.is_empty_fct_rejoining_of_upstream_concepts_.c6b3625c7d": [], "test.dbt_project_evaluator.is_empty_fct_root_models_.ccb5a490f1": [], "test.dbt_project_evaluator.is_empty_fct_source_fanout_.45762bb722": [], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_marts_or_intermediate_.3aa45af51f": [], "test.dbt_project_evaluator.is_empty_fct_staging_dependent_on_staging_.bea47be3ca": [], "test.dbt_project_evaluator.is_empty_fct_unused_sources_.41456b9da8": [], "test.dbt_project_evaluator.is_empty_fct_exposure_parents_materializations_.5a21592422": [], "test.dbt_project_evaluator.is_empty_fct_hard_coded_references_.9f62f70113": [], "test.dbt_project_evaluator.is_empty_fct_too_many_joins_.0cb37fa535": [], "test.dbt_project_evaluator.valid_test_coverage.df03f31e09": [], "test.dbt_project_evaluator.is_empty_fct_missing_primary_key_tests_.4d10d48da0": [], "test.dbt_project_evaluator.is_empty_fct_public_models_without_contract_.bcf47f1cb0": [], "test.dbt_project_evaluator.is_empty_fct_undocumented_public_models_.56938f1938": [], "test.dbt_project_evaluator.is_empty_fct_exposures_dependent_on_private_models_.f12ef3521e": [], "test.dbt_project_evaluator.is_empty_fct_chained_views_dependencies_.d5cb95fb33": [], "test.dbt_project_evaluator.is_empty_fct_model_directories_.50098500db": [], "test.dbt_project_evaluator.is_empty_fct_model_naming_conventions_.a79bc0fbe2": [], "test.dbt_project_evaluator.is_empty_fct_source_directories_.3ec42bc19c": [], "test.dbt_project_evaluator.is_empty_fct_test_directories_.1c1db93433": [], "model.dbt_octafx.event_stream": ["model.dbt_octafx.funnel_dbt"], "model.dbt_octafx.int_pushes": ["model.dbt_octafx.event_stream"], "model.dbt_octafx.uninstalls": [], "source.dbt_octafx.wh_raw.trading_real_raw": ["model.dbt_octafx.funnel_deals", "model.dbt_octafx.user_deals"], "source.dbt_octafx.wh_raw.users": ["model.dbt_octafx.int_pushes", "model.dbt_octafx.stg_users"], "source.dbt_octafx.wh_raw.mobile_appsflyer": ["model.dbt_octafx.int_af_id", "model.dbt_octafx.int_pushes", "model.dbt_octafx.stg_af_events"], "source.dbt_octafx.wh_raw.appsflyer_uninstall_events_report": ["model.dbt_octafx.appsflyer_uninstall_events_report"], "source.dbt_octafx.wh_raw.users_cids_all": ["model.dbt_octafx.int_af_id", "model.dbt_octafx.users_cids_all"], "source.dbt_octafx.wh_raw.countries": ["model.dbt_octafx.countries", "model.dbt_octafx.int_pushes"], "source.dbt_octafx.wh_raw.countries_tiers": ["model.dbt_octafx.countries"], "source.dbt_octafx.supplement.eth_recom": [], "source.dbt_octafx.supplement.random_users": [], "source.dbt_octafx.supplement.eligible_users": [], "source.dbt_octafx.bloomreach.campaign": ["model.dbt_octafx.ab_users", "model.dbt_octafx.funnel_bloomreach_events", "model.dbt_octafx.stg_bloomreach_events"], "source.dbt_octafx.bloomreach.banner": [], "source.dbt_octafx.bloomreach.customers_properties": ["model.dbt_octafx.int_bloomreach_events_enhanced", "model.dbt_octafx.int_pushes", "model.dbt_octafx.tokens"], "source.amplitude_source.amplitude.event": ["model.amplitude_source.stg_amplitude__event_tmp"], "source.amplitude_source.amplitude.event_type": ["model.amplitude_source.stg_amplitude__event_type_tmp"], "source.snowplow_normalize.atomic.events": ["model.snowplow_normalize.snowplow_normalize_base_events_this_run"], "metric.dbt_octafx.events_cnt": [], "metric.dbt_octafx.pushes_cnt": [], "metric.dbt_octafx.events_count": [], "metric.dbt_octafx.revenue_usd_sum": [], "metric.dbt_octafx.deals_cnt": [], "metric.dbt_octafx.vol_sum": [], "metric.dq_tools.data_quality_score": [], "metric.dq_tools.test_coverage": [], "metric.dq_tools.test_to_column_ratio": [], "semantic_model.dbt_octafx.bloomreach_events": ["metric.dbt_octafx.events_cnt", "metric.dbt_octafx.pushes_cnt"], "semantic_model.dbt_octafx.uninstall_events": ["metric.dbt_octafx.events_count", "metric.dbt_octafx.revenue_usd_sum"], "semantic_model.dbt_octafx.trading_activity": ["metric.dbt_octafx.deals_cnt", "metric.dbt_octafx.vol_sum"], "semantic_model.dq_tools.data_quality_score": ["metric.dq_tools.data_quality_score"], "semantic_model.dq_tools.test_coverage": ["metric.dq_tools.test_coverage", "metric.dq_tools.test_to_column_ratio"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {"semantic_model.dbt_octafx.bloomreach_events": {"name": "bloomreach_events", "resource_type": "semantic_model", "package_name": "dbt_octafx", "path": "metrics/int_bloomreach_events_semantic.yml", "original_file_path": "models/metrics/int_bloomreach_events_semantic.yml", "unique_id": "semantic_model.dbt_octafx.bloomreach_events", "fqn": ["dbt_octafx", "metrics", "bloomreach_events"], "model": "ref('int_bloomreach_events_enhanced')", "node_relation": {"alias": "int_bloomreach_events_enhanced", "schema_name": "dev_gsokolov", "database": "analytics-147612", "relation_name": "`analytics-147612`.`dev_gsokolov`.`int_bloomreach_events_enhanced`"}, "description": "A semantic model representing bloomreach events data", "label": null, "defaults": {"agg_time_dimension": "timestamp"}, "entities": [{"name": "user_id", "type": "primary", "description": null, "label": null, "role": null, "expr": null}], "measures": [{"name": "events_cnt", "agg": "count", "description": null, "label": null, "create_metric": false, "expr": "1", "agg_params": null, "non_additive_dimension": null, "agg_time_dimension": null}], "dimensions": [{"name": "timestamp", "type": "time", "description": null, "label": null, "is_partition": false, "type_params": {"time_granularity": "day", "validity_params": null}, "expr": null, "metadata": null}, {"name": "action_type", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}, {"name": "status", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}, {"name": "error", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}], "metadata": null, "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.int_bloomreach_events_enhanced"]}, "refs": [{"name": "int_bloomreach_events_enhanced", "package": null, "version": null}], "created_at": 1714072383.894441, "config": {"enabled": true, "group": null, "meta": {}}, "unrendered_config": {}, "primary_entity": null, "group": null}, "semantic_model.dbt_octafx.uninstall_events": {"name": "uninstall_events", "resource_type": "semantic_model", "package_name": "dbt_octafx", "path": "metrics/uninstall_events_semantic.yml", "original_file_path": "models/metrics/uninstall_events_semantic.yml", "unique_id": "semantic_model.dbt_octafx.uninstall_events", "fqn": ["dbt_octafx", "metrics", "uninstall_events"], "model": "ref('appsflyer_uninstall_events_report')", "node_relation": {"alias": "appsflyer_uninstall_events_report", "schema_name": "dev_gsokolov", "database": "analytics-147612", "relation_name": "`analytics-147612`.`dev_gsokolov`.`appsflyer_uninstall_events_report`"}, "description": "A semantic model representing detailed tracking of uninstall events from AppsFlyer.", "label": null, "defaults": {"agg_time_dimension": "event_time"}, "entities": [{"name": "appsflyer_id", "type": "primary", "description": null, "label": null, "role": null, "expr": null}], "measures": [{"name": "events_count", "agg": "count", "description": null, "label": null, "create_metric": false, "expr": "1", "agg_params": null, "non_additive_dimension": null, "agg_time_dimension": null}, {"name": "event_revenue_usd", "agg": "sum", "description": null, "label": null, "create_metric": false, "expr": "1", "agg_params": null, "non_additive_dimension": null, "agg_time_dimension": null}], "dimensions": [{"name": "event_time", "type": "time", "description": null, "label": null, "is_partition": false, "type_params": {"time_granularity": "day", "validity_params": null}, "expr": null, "metadata": null}, {"name": "media_source", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}, {"name": "campaign", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}, {"name": "region", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}, {"name": "country_code", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}], "metadata": null, "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.appsflyer_uninstall_events_report"]}, "refs": [{"name": "appsflyer_uninstall_events_report", "package": null, "version": null}], "created_at": 1714072383.895534, "config": {"enabled": true, "group": null, "meta": {}}, "unrendered_config": {}, "primary_entity": null, "group": null}, "semantic_model.dbt_octafx.trading_activity": {"name": "trading_activity", "resource_type": "semantic_model", "package_name": "dbt_octafx", "path": "metrics/user_deals_semantic.yml", "original_file_path": "models/metrics/user_deals_semantic.yml", "unique_id": "semantic_model.dbt_octafx.trading_activity", "fqn": ["dbt_octafx", "metrics", "trading_activity"], "model": "ref('user_deals')", "node_relation": {"alias": "user_deals", "schema_name": "dev_gsokolov", "database": "analytics-147612", "relation_name": "`analytics-147612`.`dev_gsokolov`.`user_deals`"}, "description": "A semantic model representing trading activity data", "label": null, "defaults": {"agg_time_dimension": "trade_day"}, "entities": [{"name": "user_id", "type": "primary", "description": null, "label": null, "role": null, "expr": null}], "measures": [{"name": "deals_cnt", "agg": "count", "description": null, "label": null, "create_metric": false, "expr": "1", "agg_params": null, "non_additive_dimension": null, "agg_time_dimension": null}, {"name": "symbol_vol", "agg": "sum", "description": null, "label": null, "create_metric": false, "expr": "volume", "agg_params": null, "non_additive_dimension": null, "agg_time_dimension": null}], "dimensions": [{"name": "variant", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}, {"name": "symbol_name", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}, {"name": "trade_day", "type": "time", "description": null, "label": null, "is_partition": false, "type_params": {"time_granularity": "day", "validity_params": null}, "expr": null, "metadata": null}], "metadata": null, "depends_on": {"macros": [], "nodes": ["model.dbt_octafx.user_deals"]}, "refs": [{"name": "user_deals", "package": null, "version": null}], "created_at": 1714072383.8964741, "config": {"enabled": true, "group": null, "meta": {}}, "unrendered_config": {}, "primary_entity": null, "group": null}, "semantic_model.dq_tools.data_quality_score": {"name": "data_quality_score", "resource_type": "semantic_model", "package_name": "dq_tools", "path": "04_metric/sm__data_quality_score.yml", "original_file_path": "models/04_metric/sm__data_quality_score.yml", "unique_id": "semantic_model.dq_tools.data_quality_score", "fqn": ["dq_tools", "04_metric", "data_quality_score"], "model": "ref('bi_dq_metrics')", "node_relation": {"alias": "bi_dq_metrics", "schema_name": "dev_gsokolov", "database": "analytics-147612", "relation_name": "`analytics-147612`.`dev_gsokolov`.`bi_dq_metrics`"}, "description": null, "label": null, "defaults": {"agg_time_dimension": "run_time"}, "entities": [{"name": "key", "type": "primary", "description": null, "label": null, "role": null, "expr": "concat(\n  run_time,\n  rule_name,\n  data_concept,\n  data_element,\n  indicator_category\n)"}], "measures": [{"name": "data_quality_score", "agg": "average", "description": null, "label": null, "create_metric": false, "expr": "(rows_processed - rows_failed) * 1.00 / nullif(rows_processed,0)", "agg_params": null, "non_additive_dimension": null, "agg_time_dimension": null}], "dimensions": [{"name": "run_time", "type": "time", "description": null, "label": null, "is_partition": false, "type_params": {"time_granularity": "day", "validity_params": null}, "expr": null, "metadata": null}, {"name": "rule_name", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}, {"name": "data_concept", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}, {"name": "data_element", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}, {"name": "dq_dimension", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}], "metadata": null, "depends_on": {"macros": [], "nodes": ["model.dq_tools.bi_dq_metrics"]}, "refs": [{"name": "bi_dq_metrics", "package": null, "version": null}], "created_at": 1714072384.255347, "config": {"enabled": true, "group": null, "meta": {}}, "unrendered_config": {}, "primary_entity": null, "group": null}, "semantic_model.dq_tools.test_coverage": {"name": "test_coverage", "resource_type": "semantic_model", "package_name": "dq_tools", "path": "04_metric/sm__test_coverage.yml", "original_file_path": "models/04_metric/sm__test_coverage.yml", "unique_id": "semantic_model.dq_tools.test_coverage", "fqn": ["dq_tools", "04_metric", "test_coverage"], "model": "ref('test_coverage')", "node_relation": {"alias": "test_coverage", "schema_name": "dev_gsokolov", "database": "analytics-147612", "relation_name": "`analytics-147612`.`dev_gsokolov`.`test_coverage`"}, "description": null, "label": null, "defaults": {"agg_time_dimension": "check_timestamp"}, "entities": [{"name": "key", "type": "primary", "description": null, "label": null, "role": null, "expr": "concat(\n  check_timestamp,\n  invocation_id\n)"}], "measures": [{"name": "coverage_pct", "agg": "average", "description": null, "label": null, "create_metric": false, "expr": null, "agg_params": null, "non_additive_dimension": null, "agg_time_dimension": null}, {"name": "test_to_column_ratio", "agg": "average", "description": null, "label": null, "create_metric": false, "expr": null, "agg_params": null, "non_additive_dimension": null, "agg_time_dimension": null}], "dimensions": [{"name": "check_timestamp", "type": "time", "description": null, "label": null, "is_partition": false, "type_params": {"time_granularity": "day", "validity_params": null}, "expr": null, "metadata": null}, {"name": "invocation_id", "type": "categorical", "description": null, "label": null, "is_partition": false, "type_params": null, "expr": null, "metadata": null}], "metadata": null, "depends_on": {"macros": [], "nodes": ["model.dq_tools.test_coverage"]}, "refs": [{"name": "test_coverage", "package": null, "version": null}], "created_at": 1714072384.25696, "config": {"enabled": true, "group": null, "meta": {}}, "unrendered_config": {}, "primary_entity": null, "group": null}}}